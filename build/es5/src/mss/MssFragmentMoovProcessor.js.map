{"version":3,"sources":["../../../../src/mss/MssFragmentMoovProcessor.js"],"names":["MssFragmentMoovProcessor","config","NALUTYPE_SPS","NALUTYPE_PPS","constants","ISOBoxer","protectionController","instance","period","adaptationSet","representation","contentProtection","timescale","trackId","createFtypBox","isoFile","ftyp","createBox","major_brand","minor_version","compatible_brands","createMoovBox","moov","createMvhdBox","trak","createTkhdBox","mdia","createMdhdBox","createHdlrBox","minf","type","VIDEO","createVmhdBox","AUDIO","createSmhdBox","dinf","createDrefBox","stbl","stts","createFullBox","_data","stsc","stco","stsz","createStsdBox","mvex","createTrexBox","supportedKS","getSupportedKeySystemsFromContentProtection","createProtectionSystemSpecificHeaderBox","mvhd","version","creation_time","modification_time","duration","Infinity","Math","round","rate","volume","reserved1","reserved2","matrix","pre_defined","next_track_ID","tkhd","flags","track_ID","layer","alternate_group","reserved3","width","height","mdhd","language","lang","hdlr","handler_type","name","id","reserved","vmhd","graphicsmode","opcolor","smhd","balance","dref","entry_count","entries","url","location","push","stsd","createSampleEntry","length","codec","codecs","substring","indexOf","createAVCVisualSampleEntry","createMP4AudioSampleEntry","code","MssErrors","MSS_UNSUPPORTED_CODEC_CODE","message","MSS_UNSUPPORTED_CODEC_MESSAGE","data","avc1","data_reference_index","pre_defined1","pre_defined2","horizresolution","vertresolution","frame_count","compressorname","depth","pre_defined3","createAVC1ConfigurationRecord","sinf","createOriginalFormatBox","createSchemeTypeBox","createSchemeInformationBox","avcC","avcCLength","sps","pps","AVCProfileIndication","AVCLevelIndication","profile_compatibility","nalus","codecPrivateData","split","slice","naluBytes","naluType","i","hexStringtoBuffer","Uint8Array","set","n","mp4a","channelcount","audioChannels","samplesize","reserved_3","samplerate","audioSamplingRate","esds","createMPEG4AACESDescriptor","audioSpecificConfig","esdsLength","bandwidth","frma","data_format","stringToCharCode","schm","scheme_type","scheme_version","schi","createTrackEncryptionBox","keySystems","pssh_bytes","pssh","parsedBuffer","initData","parseBuffer","fetch","Utils","appendBox","tenc","default_IsEncrypted","default_IV_size","default_KID","trex","default_sample_description_index","default_sample_duration","default_sample_size","default_sample_flags","str","buf","parseInt","charCodeAt","generateMoov","rep","adaptation","arrayBuffer","index","mpd","manifest","Period_asArray","AdaptationSet_asArray","ContentProtection","SegmentTemplate","createFile","write","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"MssFragmentMoovProcessor.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n import MssErrors from './errors/MssErrors';\r\n\r\n/**\r\n * @module MssFragmentMoovProcessor\r\n * @ignore\r\n * @param {Object} config object\r\n */\r\nfunction MssFragmentMoovProcessor(config) {\r\n    config = config || {};\r\n    const NALUTYPE_SPS = 7;\r\n    const NALUTYPE_PPS = 8;\r\n    const constants = config.constants;\r\n    const ISOBoxer = config.ISOBoxer;\r\n\r\n    let protectionController = config.protectionController;\r\n    let instance,\r\n        period,\r\n        adaptationSet,\r\n        representation,\r\n        contentProtection,\r\n        timescale,\r\n        trackId;\r\n\r\n    function createFtypBox(isoFile) {\r\n        let ftyp = ISOBoxer.createBox('ftyp', isoFile);\r\n        ftyp.major_brand = 'iso6';\r\n        ftyp.minor_version = 1; // is an informative integer for the minor version of the major brand\r\n        ftyp.compatible_brands = []; //is a list, to the end of the box, of brands isom, iso6 and msdh\r\n        ftyp.compatible_brands[0] = 'isom'; // => decimal ASCII value for isom\r\n        ftyp.compatible_brands[1] = 'iso6'; // => decimal ASCII value for iso6\r\n        ftyp.compatible_brands[2] = 'msdh'; // => decimal ASCII value for msdh\r\n\r\n        return ftyp;\r\n    }\r\n\r\n    function createMoovBox(isoFile) {\r\n\r\n        // moov box\r\n        let moov = ISOBoxer.createBox('moov', isoFile);\r\n\r\n        // moov/mvhd\r\n        createMvhdBox(moov);\r\n\r\n        // moov/trak\r\n        let trak = ISOBoxer.createBox('trak', moov);\r\n\r\n        // moov/trak/tkhd\r\n        createTkhdBox(trak);\r\n\r\n        // moov/trak/mdia\r\n        let mdia = ISOBoxer.createBox('mdia', trak);\r\n\r\n        // moov/trak/mdia/mdhd\r\n        createMdhdBox(mdia);\r\n\r\n        // moov/trak/mdia/hdlr\r\n        createHdlrBox(mdia);\r\n\r\n        // moov/trak/mdia/minf\r\n        let minf = ISOBoxer.createBox('minf', mdia);\r\n\r\n        switch (adaptationSet.type) {\r\n            case constants.VIDEO:\r\n                // moov/trak/mdia/minf/vmhd\r\n                createVmhdBox(minf);\r\n                break;\r\n            case constants.AUDIO:\r\n                // moov/trak/mdia/minf/smhd\r\n                createSmhdBox(minf);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // moov/trak/mdia/minf/dinf\r\n        let dinf = ISOBoxer.createBox('dinf', minf);\r\n\r\n        // moov/trak/mdia/minf/dinf/dref\r\n        createDrefBox(dinf);\r\n\r\n        // moov/trak/mdia/minf/stbl\r\n        let stbl = ISOBoxer.createBox('stbl', minf);\r\n\r\n        // Create empty stts, stsc, stco and stsz boxes\r\n        // Use data field as for codem-isoboxer unknown boxes for setting fields value\r\n\r\n        // moov/trak/mdia/minf/stbl/stts\r\n        let stts = ISOBoxer.createFullBox('stts', stbl);\r\n        stts._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\r\n\r\n        // moov/trak/mdia/minf/stbl/stsc\r\n        let stsc = ISOBoxer.createFullBox('stsc', stbl);\r\n        stsc._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\r\n\r\n        // moov/trak/mdia/minf/stbl/stco\r\n        let stco = ISOBoxer.createFullBox('stco', stbl);\r\n        stco._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\r\n\r\n        // moov/trak/mdia/minf/stbl/stsz\r\n        let stsz = ISOBoxer.createFullBox('stsz', stbl);\r\n        stsz._data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, sample_size = 0, sample_count = 0\r\n\r\n        // moov/trak/mdia/minf/stbl/stsd\r\n        createStsdBox(stbl);\r\n\r\n        // moov/mvex\r\n        let mvex = ISOBoxer.createBox('mvex', moov);\r\n\r\n        // moov/mvex/trex\r\n        createTrexBox(mvex);\r\n\r\n        if (contentProtection && protectionController) {\r\n            let supportedKS = protectionController.getSupportedKeySystemsFromContentProtection(contentProtection);\r\n            createProtectionSystemSpecificHeaderBox(moov, supportedKS);\r\n        }\r\n    }\r\n\r\n    function createMvhdBox(moov) {\r\n\r\n        let mvhd = ISOBoxer.createFullBox('mvhd', moov);\r\n\r\n        mvhd.version = 1; // version = 1  in order to have 64bits duration value\r\n\r\n        mvhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\r\n        mvhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\r\n        mvhd.timescale = timescale; // the time-scale for the entire presentation => 10000000 for MSS\r\n        mvhd.duration = period.duration === Infinity ? 0xFFFFFFFFFFFFFFFF : Math.round(period.duration * timescale); // the length of the presentation (in the indicated timescale) =>  take duration of period\r\n        mvhd.rate = 1.0; // 16.16 number, '1.0' = normal playback\r\n        mvhd.volume = 1.0; // 8.8 number, '1.0' = full volume\r\n        mvhd.reserved1 = 0;\r\n        mvhd.reserved2 = [0x0, 0x0];\r\n        mvhd.matrix = [\r\n            1, 0, 0, // provides a transformation matrix for the video;\r\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\r\n            0, 0, 16384\r\n        ];\r\n        mvhd.pre_defined = [0, 0, 0, 0, 0, 0];\r\n        mvhd.next_track_ID = trackId + 1; // indicates a value to use for the track ID of the next track to be added to this presentation\r\n\r\n        return mvhd;\r\n    }\r\n\r\n    function createTkhdBox(trak) {\r\n\r\n        let tkhd = ISOBoxer.createFullBox('tkhd', trak);\r\n\r\n        tkhd.version = 1; // version = 1  in order to have 64bits duration value\r\n        tkhd.flags = 0x1 | // Track_enabled (0x000001): Indicates that the track is enabled\r\n            0x2 | // Track_in_movie (0x000002):  Indicates that the track is used in the presentation\r\n            0x4; // Track_in_preview (0x000004):  Indicates that the track is used when previewing the presentation\r\n\r\n        tkhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\r\n        tkhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\r\n        tkhd.track_ID = trackId; // uniquely identifies this track over the entire life-time of this presentation\r\n        tkhd.reserved1 = 0;\r\n        tkhd.duration = period.duration === Infinity ? 0xFFFFFFFFFFFFFFFF : Math.round(period.duration * timescale); // the duration of this track (in the timescale indicated in the Movie Header Box) =>  take duration of period\r\n        tkhd.reserved2 = [0x0, 0x0];\r\n        tkhd.layer = 0; // specifies the front-to-back ordering of video tracks; tracks with lower numbers are closer to the viewer => 0 since only one video track\r\n        tkhd.alternate_group = 0; // specifies a group or collection of tracks => ignore\r\n        tkhd.volume = 1.0; // '1.0' = full volume\r\n        tkhd.reserved3 = 0;\r\n        tkhd.matrix = [\r\n            1, 0, 0, // provides a transformation matrix for the video;\r\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\r\n            0, 0, 16384\r\n        ];\r\n        tkhd.width = representation.width; // visual presentation width\r\n        tkhd.height = representation.height; // visual presentation height\r\n\r\n        return tkhd;\r\n    }\r\n\r\n    function createMdhdBox(mdia) {\r\n\r\n        let mdhd = ISOBoxer.createFullBox('mdhd', mdia);\r\n\r\n        mdhd.version = 1; // version = 1  in order to have 64bits duration value\r\n\r\n        mdhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\r\n        mdhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\r\n        mdhd.timescale = timescale; // the time-scale for the entire presentation\r\n        mdhd.duration = period.duration === Infinity ? 0xFFFFFFFFFFFFFFFF : Math.round(period.duration * timescale); // the duration of this media (in the scale of the timescale). If the duration cannot be determined then duration is set to all 1s.\r\n        mdhd.language = adaptationSet.lang || 'und'; // declares the language code for this media\r\n        mdhd.pre_defined = 0;\r\n\r\n        return mdhd;\r\n    }\r\n\r\n    function createHdlrBox(mdia) {\r\n\r\n        let hdlr = ISOBoxer.createFullBox('hdlr', mdia);\r\n\r\n        hdlr.pre_defined = 0;\r\n        switch (adaptationSet.type) {\r\n            case constants.VIDEO:\r\n                hdlr.handler_type = 'vide';\r\n                break;\r\n            case constants.AUDIO:\r\n                hdlr.handler_type = 'soun';\r\n                break;\r\n            default:\r\n                hdlr.handler_type = 'meta';\r\n                break;\r\n        }\r\n        hdlr.name = representation.id;\r\n        hdlr.reserved = [0, 0, 0];\r\n\r\n        return hdlr;\r\n    }\r\n\r\n    function createVmhdBox(minf) {\r\n\r\n        let vmhd = ISOBoxer.createFullBox('vmhd', minf);\r\n\r\n        vmhd.flags = 1;\r\n\r\n        vmhd.graphicsmode = 0; // specifies a composition mode for this video track, from the following enumerated set, which may be extended by derived specifications: copy = 0 copy over the existing image\r\n        vmhd.opcolor = [0, 0, 0]; // is a set of 3 colour values (red, green, blue) available for use by graphics modes\r\n\r\n        return vmhd;\r\n    }\r\n\r\n    function createSmhdBox(minf) {\r\n\r\n        let smhd = ISOBoxer.createFullBox('smhd', minf);\r\n\r\n        smhd.flags = 1;\r\n\r\n        smhd.balance = 0; // is a fixed-point 8.8 number that places mono audio tracks in a stereo space; 0 is centre (the normal value); full left is -1.0 and full right is 1.0.\r\n        smhd.reserved = 0;\r\n\r\n        return smhd;\r\n    }\r\n\r\n    function createDrefBox(dinf) {\r\n\r\n        let dref = ISOBoxer.createFullBox('dref', dinf);\r\n\r\n        dref.entry_count = 1;\r\n        dref.entries = [];\r\n\r\n        let url = ISOBoxer.createFullBox('url ', dref, false);\r\n        url.location = '';\r\n        url.flags = 1;\r\n\r\n        dref.entries.push(url);\r\n\r\n        return dref;\r\n    }\r\n\r\n    function createStsdBox(stbl) {\r\n\r\n        let stsd = ISOBoxer.createFullBox('stsd', stbl);\r\n\r\n        stsd.entries = [];\r\n        switch (adaptationSet.type) {\r\n            case constants.VIDEO:\r\n            case constants.AUDIO:\r\n                stsd.entries.push(createSampleEntry(stsd));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        stsd.entry_count = stsd.entries.length; // is an integer that counts the actual entries\r\n        return stsd;\r\n    }\r\n\r\n    function createSampleEntry(stsd) {\r\n        let codec = representation.codecs.substring(0, representation.codecs.indexOf('.'));\r\n\r\n        switch (codec) {\r\n            case 'avc1':\r\n                return createAVCVisualSampleEntry(stsd, codec);\r\n            case 'mp4a':\r\n                return createMP4AudioSampleEntry(stsd, codec);\r\n            default:\r\n                throw {\r\n                    code: MssErrors.MSS_UNSUPPORTED_CODEC_CODE,\r\n                    message: MssErrors.MSS_UNSUPPORTED_CODEC_MESSAGE,\r\n                    data: {\r\n                        codec: codec\r\n                    }\r\n                };\r\n        }\r\n    }\r\n\r\n    function createAVCVisualSampleEntry(stsd, codec) {\r\n        let avc1;\r\n\r\n        if (contentProtection) {\r\n            avc1 = ISOBoxer.createBox('encv', stsd, false);\r\n        } else {\r\n            avc1 = ISOBoxer.createBox('avc1', stsd, false);\r\n        }\r\n\r\n        // SampleEntry fields\r\n        avc1.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\r\n        avc1.data_reference_index = 1;\r\n\r\n        // VisualSampleEntry fields\r\n        avc1.pre_defined1 = 0;\r\n        avc1.reserved2 = 0;\r\n        avc1.pre_defined2 = [0, 0, 0];\r\n        avc1.height = representation.height;\r\n        avc1.width = representation.width;\r\n        avc1.horizresolution = 72; // 72 dpi\r\n        avc1.vertresolution = 72; // 72 dpi\r\n        avc1.reserved3 = 0;\r\n        avc1.frame_count = 1; // 1 compressed video frame per sample\r\n        avc1.compressorname = [\r\n            0x0A, 0x41, 0x56, 0x43, 0x20, 0x43, 0x6F, 0x64, // = 'AVC Coding';\r\n            0x69, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\r\n        ];\r\n        avc1.depth = 0x0018; // 0x0018 – images are in colour with no alpha.\r\n        avc1.pre_defined3 = 65535;\r\n        avc1.config = createAVC1ConfigurationRecord();\r\n        if (contentProtection) {\r\n            // Create and add Protection Scheme Info Box\r\n            let sinf = ISOBoxer.createBox('sinf', avc1);\r\n\r\n            // Create and add Original Format Box => indicate codec type of the encrypted content\r\n            createOriginalFormatBox(sinf, codec);\r\n\r\n            // Create and add Scheme Type box\r\n            createSchemeTypeBox(sinf);\r\n\r\n            // Create and add Scheme Information Box\r\n            createSchemeInformationBox(sinf);\r\n        }\r\n\r\n        return avc1;\r\n    }\r\n\r\n    function createAVC1ConfigurationRecord() {\r\n\r\n        let avcC = null;\r\n        let avcCLength = 15; // length = 15 by default (0 SPS and 0 PPS)\r\n\r\n        // First get all SPS and PPS from codecPrivateData\r\n        let sps = [];\r\n        let pps = [];\r\n        let AVCProfileIndication = 0;\r\n        let AVCLevelIndication = 0;\r\n        let profile_compatibility = 0;\r\n\r\n        let nalus = representation.codecPrivateData.split('00000001').slice(1);\r\n        let naluBytes, naluType;\r\n\r\n        for (let i = 0; i < nalus.length; i++) {\r\n            naluBytes = hexStringtoBuffer(nalus[i]);\r\n\r\n            naluType = naluBytes[0] & 0x1F;\r\n\r\n            switch (naluType) {\r\n                case NALUTYPE_SPS:\r\n                    sps.push(naluBytes);\r\n                    avcCLength += naluBytes.length + 2; // 2 = sequenceParameterSetLength field length\r\n                    break;\r\n                case NALUTYPE_PPS:\r\n                    pps.push(naluBytes);\r\n                    avcCLength += naluBytes.length + 2; // 2 = pictureParameterSetLength field length\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Get profile and level from SPS\r\n        if (sps.length > 0) {\r\n            AVCProfileIndication = sps[0][1];\r\n            profile_compatibility = sps[0][2];\r\n            AVCLevelIndication = sps[0][3];\r\n        }\r\n\r\n        // Generate avcC buffer\r\n        avcC = new Uint8Array(avcCLength);\r\n\r\n        let i = 0;\r\n        // length\r\n        avcC[i++] = (avcCLength & 0xFF000000) >> 24;\r\n        avcC[i++] = (avcCLength & 0x00FF0000) >> 16;\r\n        avcC[i++] = (avcCLength & 0x0000FF00) >> 8;\r\n        avcC[i++] = (avcCLength & 0x000000FF);\r\n        avcC.set([0x61, 0x76, 0x63, 0x43], i); // type = 'avcC'\r\n        i += 4;\r\n        avcC[i++] = 1; // configurationVersion = 1\r\n        avcC[i++] = AVCProfileIndication;\r\n        avcC[i++] = profile_compatibility;\r\n        avcC[i++] = AVCLevelIndication;\r\n        avcC[i++] = 0xFF; // '11111' + lengthSizeMinusOne = 3\r\n        avcC[i++] = 0xE0 | sps.length; // '111' + numOfSequenceParameterSets\r\n        for (let n = 0; n < sps.length; n++) {\r\n            avcC[i++] = (sps[n].length & 0xFF00) >> 8;\r\n            avcC[i++] = (sps[n].length & 0x00FF);\r\n            avcC.set(sps[n], i);\r\n            i += sps[n].length;\r\n        }\r\n        avcC[i++] = pps.length; // numOfPictureParameterSets\r\n        for (let n = 0; n < pps.length; n++) {\r\n            avcC[i++] = (pps[n].length & 0xFF00) >> 8;\r\n            avcC[i++] = (pps[n].length & 0x00FF);\r\n            avcC.set(pps[n], i);\r\n            i += pps[n].length;\r\n        }\r\n\r\n        return avcC;\r\n    }\r\n\r\n    function createMP4AudioSampleEntry(stsd, codec) {\r\n        let mp4a;\r\n\r\n        if (contentProtection) {\r\n            mp4a = ISOBoxer.createBox('enca', stsd, false);\r\n        } else {\r\n            mp4a = ISOBoxer.createBox('mp4a', stsd, false);\r\n        }\r\n\r\n        // SampleEntry fields\r\n        mp4a.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\r\n        mp4a.data_reference_index = 1;\r\n\r\n        // AudioSampleEntry fields\r\n        mp4a.reserved2 = [0x0, 0x0];\r\n        mp4a.channelcount = representation.audioChannels;\r\n        mp4a.samplesize = 16;\r\n        mp4a.pre_defined = 0;\r\n        mp4a.reserved_3 = 0;\r\n        mp4a.samplerate = representation.audioSamplingRate << 16;\r\n\r\n        mp4a.esds = createMPEG4AACESDescriptor();\r\n\r\n        if (contentProtection) {\r\n            // Create and add Protection Scheme Info Box\r\n            let sinf = ISOBoxer.createBox('sinf', mp4a);\r\n\r\n            // Create and add Original Format Box => indicate codec type of the encrypted content\r\n            createOriginalFormatBox(sinf, codec);\r\n\r\n            // Create and add Scheme Type box\r\n            createSchemeTypeBox(sinf);\r\n\r\n            // Create and add Scheme Information Box\r\n            createSchemeInformationBox(sinf);\r\n        }\r\n\r\n        return mp4a;\r\n    }\r\n\r\n    function createMPEG4AACESDescriptor() {\r\n\r\n        // AudioSpecificConfig (see ISO/IEC 14496-3, subpart 1) => corresponds to hex bytes contained in 'codecPrivateData' field\r\n        let audioSpecificConfig = hexStringtoBuffer(representation.codecPrivateData);\r\n\r\n        // ESDS length = esds box header length (= 12) +\r\n        //               ES_Descriptor header length (= 5) +\r\n        //               DecoderConfigDescriptor header length (= 15) +\r\n        //               decoderSpecificInfo header length (= 2) +\r\n        //               AudioSpecificConfig length (= codecPrivateData length)\r\n        let esdsLength = 34 + audioSpecificConfig.length;\r\n        let esds = new Uint8Array(esdsLength);\r\n\r\n        let i = 0;\r\n        // esds box\r\n        esds[i++] = (esdsLength & 0xFF000000) >> 24; // esds box length\r\n        esds[i++] = (esdsLength & 0x00FF0000) >> 16; // ''\r\n        esds[i++] = (esdsLength & 0x0000FF00) >> 8; // ''\r\n        esds[i++] = (esdsLength & 0x000000FF); // ''\r\n        esds.set([0x65, 0x73, 0x64, 0x73], i); // type = 'esds'\r\n        i += 4;\r\n        esds.set([0, 0, 0, 0], i); // version = 0, flags = 0\r\n        i += 4;\r\n        // ES_Descriptor (see ISO/IEC 14496-1 (Systems))\r\n        esds[i++] = 0x03; // tag = 0x03 (ES_DescrTag)\r\n        esds[i++] = 20 + audioSpecificConfig.length; // size\r\n        esds[i++] = (trackId & 0xFF00) >> 8; // ES_ID = track_id\r\n        esds[i++] = (trackId & 0x00FF); // ''\r\n        esds[i++] = 0; // flags and streamPriority\r\n\r\n        // DecoderConfigDescriptor (see ISO/IEC 14496-1 (Systems))\r\n        esds[i++] = 0x04; // tag = 0x04 (DecoderConfigDescrTag)\r\n        esds[i++] = 15 + audioSpecificConfig.length; // size\r\n        esds[i++] = 0x40; // objectTypeIndication = 0x40 (MPEG-4 AAC)\r\n        esds[i] = 0x05 << 2; // streamType = 0x05 (Audiostream)\r\n        esds[i] |= 0 << 1; // upStream = 0\r\n        esds[i++] |= 1; // reserved = 1\r\n        esds[i++] = 0xFF; // buffersizeDB = undefined\r\n        esds[i++] = 0xFF; // ''\r\n        esds[i++] = 0xFF; // ''\r\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // maxBitrate\r\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\r\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\r\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\r\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // avgbitrate\r\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\r\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\r\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\r\n\r\n        // DecoderSpecificInfo (see ISO/IEC 14496-1 (Systems))\r\n        esds[i++] = 0x05; // tag = 0x05 (DecSpecificInfoTag)\r\n        esds[i++] = audioSpecificConfig.length; // size\r\n        esds.set(audioSpecificConfig, i); // AudioSpecificConfig bytes\r\n\r\n        return esds;\r\n    }\r\n\r\n    function createOriginalFormatBox(sinf, codec) {\r\n        let frma = ISOBoxer.createBox('frma', sinf);\r\n        frma.data_format = stringToCharCode(codec);\r\n    }\r\n\r\n    function createSchemeTypeBox(sinf) {\r\n        let schm = ISOBoxer.createFullBox('schm', sinf);\r\n\r\n        schm.flags = 0;\r\n        schm.version = 0;\r\n        schm.scheme_type = 0x63656E63; // 'cenc' => common encryption\r\n        schm.scheme_version = 0x00010000; // version set to 0x00010000 (Major version 1, Minor version 0)\r\n    }\r\n\r\n    function createSchemeInformationBox(sinf) {\r\n        let schi = ISOBoxer.createBox('schi', sinf);\r\n\r\n        // Create and add Track Encryption Box\r\n        createTrackEncryptionBox(schi);\r\n    }\r\n\r\n    function createProtectionSystemSpecificHeaderBox(moov, keySystems) {\r\n        let pssh_bytes,\r\n            pssh,\r\n            i,\r\n            parsedBuffer;\r\n\r\n        for (i = 0; i < keySystems.length; i += 1) {\r\n            pssh_bytes = keySystems[i].initData;\r\n            if (pssh_bytes) {\r\n                parsedBuffer = ISOBoxer.parseBuffer(pssh_bytes);\r\n                pssh = parsedBuffer.fetch('pssh');\r\n                if (pssh) {\r\n                    ISOBoxer.Utils.appendBox(moov, pssh);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function createTrackEncryptionBox(schi) {\r\n        let tenc = ISOBoxer.createFullBox('tenc', schi);\r\n\r\n        tenc.flags = 0;\r\n        tenc.version = 0;\r\n\r\n        tenc.default_IsEncrypted = 0x1;\r\n        tenc.default_IV_size = 8;\r\n        tenc.default_KID = (contentProtection && (contentProtection.length) > 0 && contentProtection[0]['cenc:default_KID']) ?\r\n            contentProtection[0]['cenc:default_KID'] : [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\r\n    }\r\n\r\n    function createTrexBox(moov) {\r\n        let trex = ISOBoxer.createFullBox('trex', moov);\r\n\r\n        trex.track_ID = trackId;\r\n        trex.default_sample_description_index = 1;\r\n        trex.default_sample_duration = 0;\r\n        trex.default_sample_size = 0;\r\n        trex.default_sample_flags = 0;\r\n\r\n        return trex;\r\n    }\r\n\r\n    function hexStringtoBuffer(str) {\r\n        let buf = new Uint8Array(str.length / 2);\r\n        let i;\r\n\r\n        for (i = 0; i < str.length / 2; i += 1) {\r\n            buf[i] = parseInt('' + str[i * 2] + str[i * 2 + 1], 16);\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    function stringToCharCode(str) {\r\n        let code = 0;\r\n        let i;\r\n\r\n        for (i = 0; i < str.length; i += 1) {\r\n            code |= str.charCodeAt(i) << ((str.length - i - 1) * 8);\r\n        }\r\n        return code;\r\n    }\r\n\r\n    function generateMoov(rep) {\r\n        if (!rep || !rep.adaptation) {\r\n            return;\r\n        }\r\n\r\n        let isoFile,\r\n            arrayBuffer;\r\n\r\n        representation = rep;\r\n        adaptationSet = representation.adaptation;\r\n\r\n        period = adaptationSet.period;\r\n        trackId = adaptationSet.index + 1;\r\n        contentProtection = period.mpd.manifest.Period_asArray[period.index].AdaptationSet_asArray[adaptationSet.index].ContentProtection;\r\n\r\n        timescale = period.mpd.manifest.Period_asArray[period.index].AdaptationSet_asArray[adaptationSet.index].SegmentTemplate.timescale;\r\n\r\n        isoFile = ISOBoxer.createFile();\r\n        createFtypBox(isoFile);\r\n        createMoovBox(isoFile);\r\n\r\n        arrayBuffer = isoFile.write();\r\n\r\n        return arrayBuffer;\r\n    }\r\n\r\n    instance = {\r\n        generateMoov: generateMoov\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMssFragmentMoovProcessor.__dashjs_factory_name = 'MssFragmentMoovProcessor';\r\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentMoovProcessor); /* jshint ignore:line */\r\n"]}