{"version":3,"sources":["../../../../src/mss/MssHandler.js"],"names":["MssHandler","config","context","eventBus","events","constants","initSegmentType","dashMetrics","playbackController","streamController","protectionController","mssFragmentProcessor","create","ISOBoxer","debug","errHandler","mssParser","fragmentInfoControllers","initCache","instance","setup","getInstance","getStreamProcessor","type","getActiveStreamProcessors","filter","processor","getType","getFragmentInfoController","controller","createDataChunk","request","streamId","endFragment","chunk","DataChunk","mediaInfo","segmentType","start","startTime","duration","end","index","quality","representationId","startFragmentInfoControllers","processors","forEach","VIDEO","AUDIO","FRAGMENTED_TEXT","fragmentInfoController","streamProcessor","baseURLController","initialize","push","stopFragmentInfoControllers","c","reset","onInitFragmentNeeded","e","mediaType","representationController","getRepresentationController","representation","getCurrentRepresentation","getMediaInfo","FragmentRequest","adaptation","range","id","streamInfo","FRAGMENT_LOADING_PROGRESS","bytes","generateMoov","trigger","INIT_FRAGMENT_LOADED","error","DashJSError","code","message","data","sender","onSegmentMediaLoaded","processFragment","fragmentInfoLoaded","manifestInfo","isDynamic","DVRWindowSize","Infinity","onPlaybackPaused","getIsDynamic","getTime","onPlaybackSeekAsked","onTTMLPreProcess","ttmlSubtitles","replace","registerEvents","on","INIT_FRAGMENT_NEEDED","priority","dashjs","FactoryMaker","getSingletonFactoryByName","getClassName","EVENT_PRIORITY_HIGH","PLAYBACK_PAUSED","PLAYBACK_SEEK_ASKED","FRAGMENT_LOADING_COMPLETED","TTML_TO_PARSE","undefined","off","createMssParser","__dashjs_factory_name","factory","getClassFactory","errors","MssErrors","updateClassFactory"],"mappings":"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","file":"MssHandler.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport DataChunk from '../streaming/vo/DataChunk';\r\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\r\nimport MssFragmentInfoController from './MssFragmentInfoController';\r\nimport MssFragmentProcessor from './MssFragmentProcessor';\r\nimport MssParser from './parser/MssParser';\r\nimport MssErrors from './errors/MssErrors';\r\nimport DashJSError from '../streaming/vo/DashJSError';\r\nimport InitCache from '../streaming/utils/InitCache';\r\n\r\nfunction MssHandler(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const constants = config.constants;\r\n    const initSegmentType = config.initSegmentType;\r\n    const dashMetrics = config.dashMetrics;\r\n    const playbackController = config.playbackController;\r\n    const streamController = config.streamController;\r\n    const protectionController = config.protectionController;\r\n    const mssFragmentProcessor = MssFragmentProcessor(context).create({\r\n        dashMetrics: dashMetrics,\r\n        playbackController: playbackController,\r\n        protectionController: protectionController,\r\n        streamController: streamController,\r\n        eventBus: eventBus,\r\n        constants: constants,\r\n        ISOBoxer: config.ISOBoxer,\r\n        debug: config.debug,\r\n        errHandler: config.errHandler\r\n    });\r\n    let mssParser,\r\n        fragmentInfoControllers,\r\n        initCache,\r\n        instance;\r\n\r\n    function setup() {\r\n        fragmentInfoControllers = [];\r\n        initCache = InitCache(context).getInstance();\r\n    }\r\n\r\n    function getStreamProcessor(type) {\r\n        return streamController.getActiveStreamProcessors().filter(processor => {\r\n            return processor.getType() === type;\r\n        })[0];\r\n    }\r\n\r\n    function getFragmentInfoController(type) {\r\n        return fragmentInfoControllers.filter(controller => {\r\n            return (controller.getType() === type);\r\n        })[0];\r\n    }\r\n\r\n    function createDataChunk(request, streamId, endFragment) {\r\n        const chunk = new DataChunk();\r\n\r\n        chunk.streamId = streamId;\r\n        chunk.mediaInfo = request.mediaInfo;\r\n        chunk.segmentType = request.type;\r\n        chunk.start = request.startTime;\r\n        chunk.duration = request.duration;\r\n        chunk.end = chunk.start + chunk.duration;\r\n        chunk.index = request.index;\r\n        chunk.quality = request.quality;\r\n        chunk.representationId = request.representationId;\r\n        chunk.endFragment = endFragment;\r\n\r\n        return chunk;\r\n    }\r\n\r\n    function startFragmentInfoControllers() {\r\n\r\n        // Create MssFragmentInfoControllers for each StreamProcessor of active stream (only for audio, video or fragmentedText)\r\n        let processors = streamController.getActiveStreamProcessors();\r\n        processors.forEach(function (processor) {\r\n            if (processor.getType() === constants.VIDEO ||\r\n                processor.getType() === constants.AUDIO ||\r\n                processor.getType() === constants.FRAGMENTED_TEXT) {\r\n\r\n                let fragmentInfoController = getFragmentInfoController(processor.getType());\r\n                if (!fragmentInfoController) {\r\n                    fragmentInfoController = MssFragmentInfoController(context).create({\r\n                        streamProcessor: processor,\r\n                        baseURLController: config.baseURLController,\r\n                        debug: config.debug\r\n                    });\r\n                    fragmentInfoController.initialize();\r\n                    fragmentInfoControllers.push(fragmentInfoController);\r\n                }\r\n                fragmentInfoController.start();\r\n            }\r\n        });\r\n    }\r\n\r\n    function stopFragmentInfoControllers() {\r\n        fragmentInfoControllers.forEach(c => {\r\n            c.reset();\r\n        });\r\n        fragmentInfoControllers = [];\r\n    }\r\n\r\n    function onInitFragmentNeeded(e) {\r\n        let streamProcessor = getStreamProcessor(e.mediaType);\r\n        if (!streamProcessor) return;\r\n\r\n        // Create init segment request\r\n        let representationController = streamProcessor.getRepresentationController();\r\n        let representation = representationController.getCurrentRepresentation();\r\n        let mediaInfo = streamProcessor.getMediaInfo();\r\n\r\n        let request = new FragmentRequest();\r\n        request.mediaType = representation.adaptation.type;\r\n        request.type = initSegmentType;\r\n        request.range = representation.range;\r\n        request.quality = representation.index;\r\n        request.mediaInfo = mediaInfo;\r\n        request.representationId = representation.id;\r\n\r\n        const chunk = createDataChunk(request, mediaInfo.streamInfo.id, e.type !== events.FRAGMENT_LOADING_PROGRESS);\r\n\r\n        try {\r\n            // Generate init segment (moov)\r\n            chunk.bytes = mssFragmentProcessor.generateMoov(representation);\r\n\r\n            // Notify init segment has been loaded\r\n            eventBus.trigger(events.INIT_FRAGMENT_LOADED,\r\n                { chunk: chunk },\r\n                { streamId: mediaInfo.streamInfo.id, mediaType: representation.adaptation.type }\r\n            );\r\n        } catch (e) {\r\n            config.errHandler.error(new DashJSError(e.code, e.message, e.data));\r\n        }\r\n\r\n        // Change the sender value to stop event to be propagated\r\n        e.sender = null;\r\n    }\r\n\r\n    function onSegmentMediaLoaded(e) {\r\n        if (e.error)  return;\r\n\r\n        let streamProcessor = getStreamProcessor(e.request.mediaType);\r\n        if (!streamProcessor) return;\r\n\r\n        // Process moof to transcode it from MSS to DASH (or to update segment timeline for SegmentInfo fragments)\r\n        mssFragmentProcessor.processFragment(e, streamProcessor);\r\n\r\n        if (e.request.type === 'FragmentInfoSegment') {\r\n            // If FragmentInfo loaded, then notify corresponding MssFragmentInfoController\r\n            let fragmentInfoController = getFragmentInfoController(e.request.mediaType);\r\n            if (fragmentInfoController) {\r\n                fragmentInfoController.fragmentInfoLoaded(e);\r\n            }\r\n        }\r\n\r\n        // Start MssFragmentInfoControllers in case of start-over streams\r\n        let manifestInfo = e.request.mediaInfo.streamInfo.manifestInfo;\r\n        if (!manifestInfo.isDynamic && manifestInfo.DVRWindowSize !== Infinity) {\r\n            startFragmentInfoControllers();\r\n        }\r\n    }\r\n\r\n    function onPlaybackPaused() {\r\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\r\n            startFragmentInfoControllers();\r\n        }\r\n    }\r\n\r\n    function onPlaybackSeekAsked() {\r\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\r\n            startFragmentInfoControllers();\r\n        }\r\n    }\r\n\r\n    function onTTMLPreProcess(ttmlSubtitles) {\r\n        if (!ttmlSubtitles || !ttmlSubtitles.data) {\r\n            return;\r\n        }\r\n\r\n        ttmlSubtitles.data = ttmlSubtitles.data.replace(/http:\\/\\/www.w3.org\\/2006\\/10\\/ttaf1/gi, 'http://www.w3.org/ns/ttml');\r\n    }\r\n\r\n    function registerEvents() {\r\n        eventBus.on(events.INIT_FRAGMENT_NEEDED, onInitFragmentNeeded, instance, { priority: dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH }); /* jshint ignore:line */\r\n        eventBus.on(events.PLAYBACK_PAUSED, onPlaybackPaused, instance, { priority: dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH }); /* jshint ignore:line */\r\n        eventBus.on(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, instance, { priority: dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH }); /* jshint ignore:line */\r\n        eventBus.on(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, instance, { priority: dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH }); /* jshint ignore:line */\r\n        eventBus.on(events.TTML_TO_PARSE, onTTMLPreProcess, instance);\r\n    }\r\n\r\n    function reset() {\r\n        if (mssParser) {\r\n            mssParser.reset();\r\n            mssParser = undefined;\r\n        }\r\n\r\n        eventBus.off(events.INIT_FRAGMENT_NEEDED, onInitFragmentNeeded, this);\r\n        eventBus.off(events.PLAYBACK_PAUSED, onPlaybackPaused, this);\r\n        eventBus.off(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, this);\r\n        eventBus.off(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, this);\r\n        eventBus.off(events.TTML_TO_PARSE, onTTMLPreProcess, this);\r\n\r\n        // Reset FragmentInfoControllers\r\n        stopFragmentInfoControllers();\r\n    }\r\n\r\n    function createMssParser() {\r\n        mssParser = MssParser(context).create(config);\r\n        return mssParser;\r\n    }\r\n\r\n    instance = {\r\n        reset: reset,\r\n        createMssParser: createMssParser,\r\n        registerEvents: registerEvents\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nMssHandler.__dashjs_factory_name = 'MssHandler';\r\nconst factory = dashjs.FactoryMaker.getClassFactory(MssHandler); /* jshint ignore:line */\r\nfactory.errors = MssErrors;\r\ndashjs.FactoryMaker.updateClassFactory(MssHandler.__dashjs_factory_name, factory); /* jshint ignore:line */\r\nexport default factory; /* jshint ignore:line */\r\n"]}