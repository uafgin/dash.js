{"version":3,"sources":["../../../../../src/offline/storage/IndexDBStore.js"],"names":["localforage","require","entities","XmlEntities","IndexDBStore","instance","manifestStore","fragmentStores","setup","window","config","driver","INDEXEDDB","name","createInstance","version","storeName","createFragmentStore","console","log","fragmentStore","setDownloadingStatus","manifestId","newStatus","getManifestById","then","item","status","updateManifest","catch","Promise","reject","err","setRepresentationCurrentState","representationId","state","index","downloaded","getRepresentationCurrentState","resolve","getFragmentByKey","key","Error","getItem","value","id","getAllManifests","array","i","manifests","length","parseInt","manifest","decode","getCurrentHigherManifestId","higherManifestId","setItem","saveSelectedRepresentations","selected","storeManifest","results","push","storeFragment","fragmentId","fragmentData","dropAll","clear","dropFragmentStore","dropInstance","deleteDownloadById","deleteFragmentStore","splice","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"IndexDBStore.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nconst localforage = require('localforage');\r\nconst entities = require('html-entities').XmlEntities;\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction IndexDBStore() {\r\n\r\n    let instance,\r\n        manifestStore,\r\n        fragmentStores;\r\n\r\n    function setup() {\r\n        fragmentStores = {};\r\n\r\n        if (typeof window === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        localforage.config({\r\n            driver: localforage.INDEXEDDB,\r\n            name: 'dash_offline_db'\r\n        });\r\n\r\n        manifestStore = localforage.createInstance({\r\n            driver: localforage.INDEXEDDB,\r\n            name: 'dash_offline_db',\r\n            version: 1.0,\r\n            storeName: 'manifest'\r\n        });\r\n    }\r\n\r\n    /////////////////////////////////////////\r\n    //\r\n    // GET/SET Methods\r\n    //\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * Creates an instance of localforage to store fragments in indexed db\r\n     * @param {string} storeName\r\n     * @instance\r\n     */\r\n    function createFragmentStore(storeName) {\r\n\r\n        if (!fragmentStores[storeName]) {\r\n            console.log('setStore  ' + storeName);\r\n            let fragmentStore = localforage.createInstance({\r\n                driver: localforage.INDEXEDDB,\r\n                name: 'dash_offline_db',\r\n                version: 1.0,\r\n                storeName: storeName\r\n            });\r\n            fragmentStores[storeName] = fragmentStore;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update download status\r\n     * @param {number} manifestId\r\n     * @param {string} newStatus\r\n     * @returns {Promise} promise\r\n     * @instance\r\n     */\r\n    function setDownloadingStatus(manifestId, newStatus) {\r\n        return getManifestById(manifestId).then(function (item) {\r\n            item.status = newStatus;\r\n            return updateManifest(item).catch(function () {\r\n                return Promise.reject('Cannot set status ' + newStatus + ' for this stream !');\r\n            });\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updat last downloaded fragment index for representationId\r\n     * @param {number} manifestId - manifest id\r\n      * @param {string} representationId - representation\r\n     * @param {number} state - representation state\r\n     * @returns {Promise} promise\r\n     * @instance\r\n     */\r\n    function setRepresentationCurrentState(manifestId, representationId, state) {\r\n        return getManifestById(manifestId).then(function (item) {\r\n            if (!item.state) {\r\n                item.state = {};\r\n            }\r\n\r\n            if (!item.state[representationId]) {\r\n                item.state[representationId] = {\r\n                    index: -1,\r\n                    downloaded: 0\r\n                };\r\n            }\r\n\r\n            item.state[representationId] = state;\r\n            return updateManifest(item).catch(function () {\r\n                return Promise.reject('Cannot set current index for represenation id ' + representationId);\r\n            });\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns current downloaded segment index for representation\r\n     * @param {number} manifestId - manifest id\r\n     * @param {string} representationId - representation\r\n     * @returns {Promise} promise\r\n     * @instance\r\n     */\r\n    function getRepresentationCurrentState(manifestId, representationId) {\r\n        return getManifestById(manifestId).then(function (item) {\r\n            let state = {\r\n                index: -1,\r\n                downloaded: 0\r\n            };\r\n            if (item.state && item.state[representationId]) {\r\n                state = item.state[representationId];\r\n            }\r\n            return Promise.resolve(state);\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a fragment from its key\r\n     * @param {number} manifestId\r\n     * @param {number} key\r\n     * @returns {Promise} fragment\r\n     * @instance\r\n     */\r\n    function getFragmentByKey(manifestId, key) {\r\n        let fragmentStore = fragmentStores[manifestId];\r\n\r\n        if (!fragmentStore) {\r\n            return Promise.reject(new Error (`No fragment store found for manifest ${manifestId}`));\r\n        }\r\n\r\n        return fragmentStore.getItem(key).then(function (value) {\r\n            return Promise.resolve(value);\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns a manifest from its identifier\r\n     * @param {number} id\r\n     * @returns {Promise} {Object[]} manifests\r\n     * @instance\r\n     */\r\n    function getManifestById(id) {\r\n        return getAllManifests().then(function (array) {\r\n            if (array) {\r\n                let item = null;\r\n                for (let i = 0; i < array.manifests.length; i++) {\r\n                    if (array.manifests[i].manifestId === parseInt(id)) {\r\n                        item = array.manifests[i];\r\n                    }\r\n                }\r\n                if (item !== null) {\r\n                    item.manifest = entities.decode(item.manifest);\r\n                    return Promise.resolve(item);\r\n                } else {\r\n                    return Promise.reject('Cannot found manifest with this manifestId : ' + id);\r\n                }\r\n            } else {\r\n                return Promise.reject('Any manifests stored in DB !');\r\n            }\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns all offline manifests\r\n     * @returns {Promise} {Object[]} manifests\r\n     * @instance\r\n     */\r\n    function getAllManifests() {\r\n        return manifestStore.getItem('manifest').then(function (array) {\r\n            return Promise.resolve(array ? array : {\r\n                'manifests': []\r\n            });\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return higher manifest id\r\n     * @returns {Promise} number\r\n     * @instance\r\n     */\r\n    function getCurrentHigherManifestId() {\r\n        return getAllManifests().then(function (array) {\r\n            let higherManifestId = 0;\r\n            if (array) {\r\n                for (let i = 0; i < array.manifests.length; i++) {\r\n                    if (array.manifests[i].manifestId > higherManifestId) {\r\n                        higherManifestId = array.manifests[i].manifestId;\r\n                    }\r\n                }\r\n                return Promise.resolve(higherManifestId);\r\n            } else {\r\n                return Promise.resolve(higherManifestId);\r\n            }\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update manifest\r\n     * @param {Object} manifest updated manifest\r\n     * @returns {Promise} promise asynchronously resolved\r\n     * @instance\r\n     */\r\n    function updateManifest(manifest) {\r\n        return getAllManifests().then(function (array) {\r\n            try {\r\n                for (let i = 0; i < array.manifests.length; i++) {\r\n                    if (array.manifests[i].manifestId === manifest.manifestId) {\r\n                        array.manifests[i] = manifest;\r\n                    }\r\n                }\r\n                return manifestStore.setItem('manifest', array);\r\n            } catch (err) {\r\n                throw new Error('Any results found !');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * save selected representation by user\r\n     * @param {Object} manifest updated manifest\r\n     * @param {Object} selected selected representations\r\n     * @returns {Promise} promise asynchronously resolved\r\n     * @instance\r\n     */\r\n    function saveSelectedRepresentations(manifest, selected) {\r\n        return getManifestById(manifest).then(function (item) {\r\n            if (!item.selected) {\r\n                item.selected = {};\r\n            }\r\n\r\n            item.selected = selected;\r\n            return updateManifest(item).catch(function () {\r\n                return Promise.reject('Cannot save selected representations');\r\n            });\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Store a manifest in manifest array\r\n     * @param {Object} manifest\r\n     * @instance\r\n     */\r\n    function storeManifest(manifest) {\r\n        return manifestStore.getItem('manifest').then(function (results) {\r\n            let array = results ? results : {\r\n                'manifests': []\r\n            };\r\n            array.manifests.push(manifest);\r\n            return manifestStore.setItem('manifest', array);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Store a fragment in fragment store\r\n     * @param {number} manifestId\r\n     * @param {number} fragmentId\r\n     * @param {Object} fragmentData\r\n     * @returns {Promise} promise asynchronously resolved\r\n     * @instance\r\n     */\r\n    function storeFragment(manifestId, fragmentId, fragmentData) {\r\n        let fragmentStore = fragmentStores[manifestId];\r\n\r\n        if (!fragmentStore) {\r\n            return Promise.reject(new Error (`No fragment store found for manifest ${manifestId}`));\r\n        }\r\n\r\n        return fragmentStore.setItem(fragmentId, fragmentData, function () {\r\n            return Promise.resolve();\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /////////////////////////////////////////\r\n    //\r\n    // DROP Methods\r\n    //\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * Remove all manifest and fragment store\r\n     * @returns {Promise} promise asynchronously resolved\r\n     * @instance\r\n     */\r\n    function dropAll() {\r\n        return localforage.clear().then(function () {\r\n            return Promise.resolve();\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove framgent store given its name\r\n     * @param {string} storeName\r\n     * @instance\r\n     */\r\n    function dropFragmentStore(storeName) {\r\n        localforage.dropInstance({\r\n            driver: localforage.INDEXEDDB,\r\n            name: 'dash_offline_db',\r\n            version: 1.0,\r\n            storeName: storeName\r\n        }).then(function () {\r\n            delete fragmentStores[storeName];\r\n        }).catch(function (err) {\r\n            console.log('dropFragmentStore failed ' + err);\r\n        });\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Remove download given its id (fragmentStore + manifest entry in manifest array)\r\n     * @param {number} manifestId\r\n     * @returns {Promise} promise asynchronously resolved\r\n     * @instance\r\n     */\r\n    function deleteDownloadById(manifestId) {\r\n        return manifestStore.getItem('manifest').then(function (array) {\r\n            if (array) {\r\n                return deleteFragmentStore(manifestId).then(function () {\r\n                    for (let i = 0; i < array.manifests.length; i++) {\r\n                        if (array.manifests[i].manifestId === parseInt(manifestId)) {\r\n                            array.manifests.splice(i, 1);\r\n                        }\r\n                    }\r\n                    return manifestStore.setItem('manifest', array).then(function () {\r\n                        return Promise.resolve('This stream has been successfull removed !');\r\n                    }).catch(function () {\r\n                        return Promise.reject('An error occured when trying to delete this manifest');\r\n                    });\r\n                });\r\n            } else {\r\n                return Promise.resolve('Nothing to delete !');\r\n            }\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove fragment store\r\n     * @param {string} storeName\r\n     * @returns {Promise} promise asynchronously resolved\r\n     * @instance\r\n     */\r\n    function deleteFragmentStore(storeName) {\r\n        localforage.createInstance({\r\n            name: 'dash_offline_db',\r\n            storeName: storeName\r\n        });\r\n        return localforage.dropInstance({\r\n            name: 'dash_offline_db',\r\n            storeName: storeName\r\n        }).then(function () {\r\n            delete fragmentStores[storeName];\r\n            return Promise.resolve();\r\n        }).catch(function (err) {\r\n            console.log(err);\r\n            return Promise.reject(err);\r\n        });\r\n\r\n    }\r\n\r\n\r\n    setup();\r\n\r\n    instance = {\r\n        dropAll: dropAll,\r\n        getFragmentByKey: getFragmentByKey,\r\n        getManifestById: getManifestById,\r\n        storeFragment: storeFragment,\r\n        storeManifest: storeManifest,\r\n        updateManifest: updateManifest,\r\n        saveSelectedRepresentations: saveSelectedRepresentations,\r\n        createFragmentStore: createFragmentStore,\r\n        setDownloadingStatus: setDownloadingStatus,\r\n        setRepresentationCurrentState: setRepresentationCurrentState,\r\n        getRepresentationCurrentState: getRepresentationCurrentState,\r\n        getCurrentHigherManifestId: getCurrentHigherManifestId,\r\n        getAllManifests: getAllManifests,\r\n        dropFragmentStore: dropFragmentStore,\r\n        deleteDownloadById: deleteDownloadById\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nIndexDBStore.__dashjs_factory_name = 'IndexDBStore';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(IndexDBStore); /* jshint ignore:line */\r\n"]}