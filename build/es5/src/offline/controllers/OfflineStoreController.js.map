{"version":3,"sources":["../../../../../src/offline/controllers/OfflineStoreController.js"],"names":["OfflineStoreController","config","context","errHandler","instance","indexDBStore","setup","getInstance","createFragmentStore","manifestId","storeName","err","manageDOMError","storeFragment","fragmentId","fragmentData","catch","createOfflineManifest","manifest","storeManifest","updateOfflineManifest","updateManifest","getManifestById","saveSelectedRepresentations","selected","getCurrentHigherManifestId","getAllManifests","deleteDownloadById","setDownloadingStatus","status","setRepresentationCurrentState","representationId","state","getRepresentationCurrentState","error","name","OfflineErrors","INDEXEDDB_QUOTA_EXCEED_ERROR","INDEXEDDB_INVALID_STATE_ERROR","INDEXEDDB_NOT_FOUND_ERROR","INDEXEDDB_VERSION_ERROR","code","message","data","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"OfflineStoreController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport IndexDBStore from '../storage/IndexDBStore';\r\nimport OfflineErrors from '../errors/OfflineErrors';\r\n\r\n/**\r\n * @class OfflineStoreController\r\n * @description This class manages database store\r\n * @param {object} config\r\n * @ignore\r\n */\r\nfunction OfflineStoreController(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const errHandler = config.errHandler;\r\n\r\n    let instance,\r\n        indexDBStore;\r\n\r\n    function setup() {\r\n        indexDBStore = IndexDBStore(context).getInstance();\r\n    }\r\n\r\n    function createFragmentStore(manifestId, storeName) {\r\n        try {\r\n            indexDBStore.createFragmentStore(manifestId, storeName);\r\n        } catch (err) {\r\n            manageDOMError(err);\r\n        }\r\n    }\r\n\r\n    function storeFragment(manifestId, fragmentId, fragmentData) {\r\n        return indexDBStore.storeFragment(manifestId, fragmentId, fragmentData).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function createOfflineManifest(manifest) {\r\n        return indexDBStore.storeManifest(manifest).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function updateOfflineManifest(manifest) {\r\n        return indexDBStore.updateManifest(manifest).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function getManifestById(manifestId) {\r\n        return indexDBStore.getManifestById(manifestId).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function saveSelectedRepresentations (manifestId, selected) {\r\n        return indexDBStore.saveSelectedRepresentations(manifestId, selected).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function getCurrentHigherManifestId() {\r\n        return indexDBStore.getCurrentHigherManifestId().catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function getAllManifests() {\r\n        return indexDBStore.getAllManifests().catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function deleteDownloadById(manifestId) {\r\n        return indexDBStore.deleteDownloadById(manifestId).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function setDownloadingStatus(manifestId, status) {\r\n        return indexDBStore.setDownloadingStatus(manifestId, status).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function setRepresentationCurrentState(manifestId, representationId, state) {\r\n        return indexDBStore.setRepresentationCurrentState(manifestId, representationId, state).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function getRepresentationCurrentState(manifestId, representationId) {\r\n        return indexDBStore.getRepresentationCurrentState(manifestId, representationId).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function manageDOMError(err) {\r\n        let error;\r\n        if (err) {\r\n            switch (err.name) {\r\n                case 'QuotaExceededError':\r\n                    error = OfflineErrors.INDEXEDDB_QUOTA_EXCEED_ERROR;\r\n                    break;\r\n                case 'InvalidStateError':\r\n                    error = OfflineErrors.INDEXEDDB_INVALID_STATE_ERROR;\r\n                    break;\r\n                case 'NotFoundError':\r\n                    error = OfflineErrors.INDEXEDDB_NOT_FOUND_ERROR;\r\n                    break;\r\n                case 'VersionError':\r\n                    error = OfflineErrors.INDEXEDDB_VERSION_ERROR;\r\n                    break;\r\n                // TODO : Manage all DOM cases\r\n            }\r\n\r\n            // avoid importing DashJSError object from streaming\r\n            errHandler.error({code: error, message: err.name, data: err});\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        storeFragment: storeFragment,\r\n        createOfflineManifest: createOfflineManifest,\r\n        updateOfflineManifest: updateOfflineManifest,\r\n        getManifestById: getManifestById,\r\n        saveSelectedRepresentations: saveSelectedRepresentations,\r\n        createFragmentStore: createFragmentStore,\r\n        getCurrentHigherManifestId: getCurrentHigherManifestId,\r\n        getAllManifests: getAllManifests,\r\n        deleteDownloadById: deleteDownloadById,\r\n        setDownloadingStatus: setDownloadingStatus,\r\n        setRepresentationCurrentState: setRepresentationCurrentState,\r\n        getRepresentationCurrentState: getRepresentationCurrentState\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nOfflineStoreController.__dashjs_factory_name = 'OfflineStoreController';\r\nexport default dashjs.FactoryMaker.getClassFactory(OfflineStoreController); /* jshint ignore:line */\r\n"]}