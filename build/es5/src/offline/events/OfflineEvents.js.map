{"version":3,"sources":["../../../../../src/offline/events/OfflineEvents.js"],"names":["OfflineEvents","OFFLINE_RECORD_LOADEDMETADATA","OFFLINE_RECORD_STARTED","OFFLINE_RECORD_STOPPED","OFFLINE_RECORD_FINISHED","EventsBase","offlineEvents"],"mappings":"sEAAA,2D,u7BACA;;;MAIMA,c,4DACF,wBAAe,qCAGX;;;UAHW,sHAOX,MAAKC,6BAAL,CAAqC,oCAArC,CAEA;;;UAIA,MAAKC,sBAAL,CAA8B,6BAA9B,CAEA;;;UAIA,MAAKC,sBAAL,CAA8B,6BAA9B,CAEA;;;UAIA,MAAKC,uBAAL,CAA+B,8BAA/B,CAzBW,aA0Bd,C,uBA3BuBC,oB,EA8B5B,GAAIC,eAAgB,GAAIN,cAAJ,EAApB,C,gBACeM,a","file":"OfflineEvents.js","sourcesContent":["import EventsBase from './../../core/events/EventsBase';\r\n/**\r\n * These are offline events that should be sent to the player level.\r\n * @class\r\n */\r\nclass OfflineEvents extends EventsBase {\r\n    constructor () {\r\n        super();\r\n\r\n        /**\r\n        * Triggered when all mediaInfo has been loaded\r\n        * @event OfflineEvents#OFFLINE_RECORD_LOADEDMETADATA\r\n        */\r\n        this.OFFLINE_RECORD_LOADEDMETADATA = 'public_offlineRecordLoadedmetadata';\r\n\r\n        /**\r\n        * Triggered when a record is initialized and download is started\r\n        * @event OfflineEvents#OFFLINE_RECORD_STARTED\r\n        */\r\n        this.OFFLINE_RECORD_STARTED = 'public_offlineRecordStarted';\r\n\r\n        /**\r\n        * Triggered when the user stop downloading a record\r\n        * @event OfflineEvents#OFFLINE_RECORD_STOPPED\r\n        */\r\n        this.OFFLINE_RECORD_STOPPED = 'public_offlineRecordStopped';\r\n\r\n        /**\r\n        * Triggered when all record has been downloaded\r\n        * @event OfflineEvents#OFFLINE_RECORD_FINISHED\r\n        */\r\n        this.OFFLINE_RECORD_FINISHED = 'public_offlineRecordFinished';\r\n    }\r\n}\r\n\r\nlet offlineEvents = new OfflineEvents();\r\nexport default offlineEvents;\r\n"]}