{"version":3,"sources":["../../../../../../src/streaming/utils/baseUrlResolution/DVBSelector.js"],"names":["DVBSelector","config","instance","blacklistController","getNonBlacklistedBaseUrls","urls","removedPriorities","samePrioritiesFilter","el","length","dvb_priority","indexOf","serviceLocationFilter","baseUrl","contains","serviceLocation","push","filter","selectByWeight","availableUrls","prioritySorter","a","b","diff","isNaN","topPriorityFilter","idx","arr","totalWeight","cumulWeights","rn","sort","forEach","dvb_weight","Math","floor","random","every","limit","index","select","baseUrls","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"DVBSelector.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\n\r\nfunction DVBSelector(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n\r\n    const blacklistController = config.blacklistController;\r\n\r\n    function getNonBlacklistedBaseUrls(urls) {\r\n        let removedPriorities = [];\r\n\r\n        const samePrioritiesFilter = function (el) {\r\n            if (removedPriorities.length) {\r\n                if ((el.dvb_priority) &&\r\n                        (removedPriorities.indexOf(el.dvb_priority) !== -1)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        const serviceLocationFilter = function (baseUrl) {\r\n            if (blacklistController.contains(baseUrl.serviceLocation)) {\r\n                // whenever a BaseURL is removed from the available list of\r\n                // BaseURLs, any other BaseURL with the same @priority\r\n                // value as the BaseURL being removed shall also be removed\r\n                if (baseUrl.dvb_priority) {\r\n                    removedPriorities.push(baseUrl.dvb_priority);\r\n                }\r\n\r\n                // all URLs in the list which have a @serviceLocation\r\n                // attribute matching an entry in the blacklist shall be\r\n                // removed from the available list of BaseURLs\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        return urls.filter(serviceLocationFilter).filter(samePrioritiesFilter);\r\n    }\r\n\r\n    function selectByWeight(availableUrls) {\r\n        const prioritySorter = function (a, b) {\r\n            let diff = a.dvb_priority - b.dvb_priority;\r\n            return isNaN(diff) ? 0 : diff;\r\n        };\r\n\r\n        const topPriorityFilter = function (baseUrl, idx, arr) {\r\n            return !idx || (\r\n                (arr[0].dvb_priority && baseUrl.dvb_priority) &&\r\n                (arr[0].dvb_priority === baseUrl.dvb_priority)\r\n            );\r\n        };\r\n\r\n        let totalWeight = 0;\r\n        let cumulWeights = [];\r\n        let idx = 0;\r\n        let rn,\r\n            urls;\r\n\r\n        // It shall begin by taking the set of resolved BaseURLs present or inherited at the current\r\n        // position in the MPD, resolved and filtered as described in 10.8.2.1, that have the lowest\r\n        // @priority attribute value.\r\n        urls = availableUrls.sort(prioritySorter).filter(topPriorityFilter);\r\n\r\n        if (urls.length) {\r\n            if (urls.length > 1) {\r\n                // If there is more than one BaseURL with this lowest @priority attribute value then the Player\r\n                // shall select one of them at random such that the probability of each BaseURL being chosen\r\n                // is proportional to the value of its @weight attribute. The method described in RFC 2782\r\n                // [26] or picking from a number of weighted entries is suitable for this, but there may be other\r\n                // algorithms which achieve the same effect.\r\n\r\n                // add all the weights together, storing the accumulated weight per entry\r\n                urls.forEach(baseUrl => {\r\n                    totalWeight += baseUrl.dvb_weight;\r\n                    cumulWeights.push(totalWeight);\r\n                });\r\n\r\n                // pick a random number between zero and totalWeight\r\n                rn = Math.floor(Math.random() * (totalWeight - 1));\r\n\r\n                // select the index for the range rn falls within\r\n                cumulWeights.every((limit, index) => {\r\n                    idx = index;\r\n\r\n                    if (rn < limit) {\r\n                        return false;\r\n                    }\r\n\r\n                    return true;\r\n                });\r\n            }\r\n\r\n            return urls[idx];\r\n        }\r\n    }\r\n\r\n    function select(baseUrls) {\r\n        return baseUrls && selectByWeight(\r\n            getNonBlacklistedBaseUrls(\r\n                baseUrls\r\n            )\r\n        );\r\n    }\r\n\r\n    instance = {\r\n        select: select\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nDVBSelector.__dashjs_factory_name = 'DVBSelector';\r\nexport default FactoryMaker.getClassFactory(DVBSelector);\r\n"]}