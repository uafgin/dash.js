{"version":3,"sources":["../../../../../../src/streaming/vo/metrics/ManifestUpdate.js"],"names":["ManifestUpdate","mediaType","type","requestTime","fetchTime","availabilityStartTime","presentationStartTime","clientTimeOffset","currentTime","buffered","latency","streamInfo","representationInfo","ManifestUpdateStreamInfo","id","index","start","duration","ManifestUpdateRepresentationInfo","streamIndex","presentationTimeOffset","startNumber","fragmentInfoType"],"mappings":"uNAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BA;;;MAIMA,e,CACF;;OAGA,yBAAc,sCAEV;;;WAIA,KAAKC,SAAL,CAAiB,IAAjB,CACA;;;WAIA,KAAKC,IAAL,CAAY,IAAZ,CACA;;;WAIA,KAAKC,WAAL,CAAmB,IAAnB,CACA;;;WAIA,KAAKC,SAAL,CAAiB,IAAjB,CACA;;;WAIA,KAAKC,qBAAL,CAA6B,IAA7B,CACA;;;WAIA,KAAKC,qBAAL,CAA6B,CAA7B,CACA;;;WAIA,KAAKC,gBAAL,CAAwB,CAAxB,CACA;;;WAIA,KAAKC,WAAL,CAAmB,IAAnB,CACA;;;WAIA,KAAKC,QAAL,CAAgB,IAAhB,CACA;;;WAIA,KAAKC,OAAL,CAAe,CAAf,CACA;;;WAIA,KAAKC,UAAL,CAAkB,EAAlB,CACA;;;WAIA,KAAKC,kBAAL,CAA0B,EAA1B,CAEH,C,CAGL;;;MAIMC,yB,CACF;;OAGA,mCAAc,gDACV;;;WAIA,KAAKC,EAAL,CAAU,IAAV,CACA;;;WAIA,KAAKC,KAAL,CAAa,IAAb,CACA;;;WAIA,KAAKC,KAAL,CAAa,IAAb,CACA;;;WAIA,KAAKC,QAAL,CAAgB,IAAhB,CACH,C,CAGL;;;MAIMC,iC,CACF;;OAGA,2CAAc,wDACV;;;WAIA,KAAKJ,EAAL,CAAU,IAAV,CACA;;;WAIA,KAAKC,KAAL,CAAa,IAAb,CACA;;;WAIA,KAAKd,SAAL,CAAiB,IAAjB,CACA;;;WAIA,KAAKkB,WAAL,CAAmB,IAAnB,CACA;;;WAIA,KAAKC,sBAAL,CAA8B,IAA9B,CACA;;;WAIA,KAAKC,WAAL,CAAmB,IAAnB,CACA;;;WAIA,KAAKC,gBAAL,CAAwB,IAAxB,CACH,C,SAGItB,c,CAAAA,c,SAAgBa,wB,CAAAA,wB,SAA0BK,gC,CAAAA,gC","file":"ManifestUpdate.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc This Object holds reference to the manifest update information.\r\n * @ignore\r\n */\r\nclass ManifestUpdate {\r\n    /**\r\n     * @class\r\n     */\r\n    constructor() {\r\n\r\n        /**\r\n         * Media Type Video | Audio | FragmentedText\r\n         * @public\r\n         */\r\n        this.mediaType = null;\r\n        /**\r\n         * MPD Type static | dynamic\r\n         * @public\r\n         */\r\n        this.type = null;\r\n        /**\r\n         * When this manifest update was requested\r\n         * @public\r\n         */\r\n        this.requestTime = null;\r\n        /**\r\n         * When this manifest update was received\r\n         * @public\r\n         */\r\n        this.fetchTime = null;\r\n        /**\r\n         * Calculated Availability Start time of the stream.\r\n         * @public\r\n         */\r\n        this.availabilityStartTime = null;\r\n        /**\r\n         * the seek point (liveEdge for dynamic, Stream[0].startTime for static)\r\n         * @public\r\n         */\r\n        this.presentationStartTime = 0;\r\n        /**\r\n         * The calculated difference between the server and client wall clock time\r\n         * @public\r\n         */\r\n        this.clientTimeOffset = 0;\r\n        /**\r\n         * Actual element.currentTime\r\n         * @public\r\n         */\r\n        this.currentTime = null;\r\n        /**\r\n         * Actual element.ranges\r\n         * @public\r\n         */\r\n        this.buffered = null;\r\n        /**\r\n         * Static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - elementCurrentTime)\r\n         * @public\r\n         */\r\n        this.latency = 0;\r\n        /**\r\n         * Array holding list of StreamInfo VO Objects\r\n         * @public\r\n         */\r\n        this.streamInfo = [];\r\n        /**\r\n         * Array holding list of RepresentationInfo VO Objects\r\n         * @public\r\n         */\r\n        this.representationInfo = [];\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * @classdesc This Object holds reference to the current period's stream information when the manifest was updated.\r\n * @ignore\r\n */\r\nclass ManifestUpdateStreamInfo {\r\n    /**\r\n     * @class\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Stream@id\r\n         * @public\r\n         */\r\n        this.id = null;\r\n        /**\r\n         * Period Index\r\n         * @public\r\n         */\r\n        this.index = null;\r\n        /**\r\n         * Stream@start\r\n         * @public\r\n         */\r\n        this.start = null;\r\n        /**\r\n         * Stream@duration\r\n         * @public\r\n         */\r\n        this.duration = null;\r\n    }\r\n}\r\n\r\n/**\r\n * @classdesc This Object holds reference to the current representation's info when the manifest was updated.\r\n * @ignore\r\n */\r\nclass ManifestUpdateRepresentationInfo {\r\n    /**\r\n     * @class\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Track@id\r\n         * @public\r\n         */\r\n        this.id = null;\r\n        /**\r\n         * Representation Index\r\n         * @public\r\n         */\r\n        this.index = null;\r\n        /**\r\n         * Media Type Video | Audio | FragmentedText\r\n         * @public\r\n         */\r\n        this.mediaType = null;\r\n        /**\r\n         * Which representation\r\n         * @public\r\n         */\r\n        this.streamIndex = null;\r\n        /**\r\n         * Holds reference to @presentationTimeOffset\r\n         * @public\r\n         */\r\n        this.presentationTimeOffset = null;\r\n        /**\r\n         * Holds reference to @startNumber\r\n         * @public\r\n         */\r\n        this.startNumber = null;\r\n        /**\r\n         * list|template|timeline\r\n         * @public\r\n         */\r\n        this.fragmentInfoType = null;\r\n    }\r\n}\r\n\r\nexport { ManifestUpdate, ManifestUpdateStreamInfo, ManifestUpdateRepresentationInfo };\r\n"]}