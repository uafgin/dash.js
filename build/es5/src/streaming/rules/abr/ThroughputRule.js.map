{"version":3,"sources":["../../../../../../src/streaming/rules/abr/ThroughputRule.js"],"names":["ThroughputRule","config","context","dashMetrics","instance","logger","setup","getInstance","getLogger","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getMaxIndex","rulesContext","switchRequest","create","mediaInfo","getMediaInfo","mediaType","getMediaType","currentBufferState","getCurrentBufferState","scheduleController","getScheduleController","abrController","getAbrController","streamInfo","getStreamInfo","isDynamic","manifestInfo","throughputHistory","getThroughputHistory","throughput","getSafeAverageThroughput","latency","getAverageLatency","useBufferOccupancyABR","isNaN","getAbandonmentStateFor","MetricsConstants","ABANDON_LOAD","state","BUFFER_LOADED","quality","getQualityForBitrate","setTimeToLoadDelay","debug","Math","round","reason","reset","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"ThroughputRule.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport Debug from '../../../core/Debug';\r\nimport SwitchRequest from '../SwitchRequest';\r\nimport Constants from '../../constants/Constants';\r\nimport MetricsConstants from '../../constants/MetricsConstants';\r\n\r\nfunction ThroughputRule(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const dashMetrics = config.dashMetrics;\r\n\r\n    let instance,\r\n        logger;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!dashMetrics || !dashMetrics.hasOwnProperty('getCurrentBufferState')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getMaxIndex(rulesContext) {\r\n        const switchRequest = SwitchRequest(context).create();\r\n\r\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('useBufferOccupancyABR') ||\r\n            !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('getScheduleController')) {\r\n            return switchRequest;\r\n        }\r\n\r\n        checkConfig();\r\n\r\n        const mediaInfo = rulesContext.getMediaInfo();\r\n        const mediaType = rulesContext.getMediaType();\r\n        const currentBufferState = dashMetrics.getCurrentBufferState(mediaType);\r\n        const scheduleController = rulesContext.getScheduleController();\r\n        const abrController = rulesContext.getAbrController();\r\n        const streamInfo = rulesContext.getStreamInfo();\r\n        const isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null;\r\n        const throughputHistory = abrController.getThroughputHistory();\r\n        const throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\r\n        const latency = throughputHistory.getAverageLatency(mediaType);\r\n        const useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();\r\n\r\n\r\n        if (isNaN(throughput) || !currentBufferState || useBufferOccupancyABR) {\r\n            return switchRequest;\r\n        }\r\n\r\n        if (abrController.getAbandonmentStateFor(mediaType) !== MetricsConstants.ABANDON_LOAD) {\r\n            if (currentBufferState.state === MetricsConstants.BUFFER_LOADED || isDynamic) {\r\n                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, throughput, latency);\r\n                scheduleController.setTimeToLoadDelay(0);\r\n                logger.debug('[' + mediaType + '] requesting switch to index: ', switchRequest.quality, 'Average throughput', Math.round(throughput), 'kbps');\r\n                switchRequest.reason = {throughput: throughput, latency: latency};\r\n            }\r\n        }\r\n\r\n        return switchRequest;\r\n    }\r\n\r\n    function reset() {\r\n        // no persistent information to reset\r\n    }\r\n\r\n    instance = {\r\n        getMaxIndex: getMaxIndex,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nThroughputRule.__dashjs_factory_name = 'ThroughputRule';\r\nexport default FactoryMaker.getClassFactory(ThroughputRule);\r\n"]}