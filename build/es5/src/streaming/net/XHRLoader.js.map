{"version":3,"sources":["../../../../../src/streaming/net/XHRLoader.js"],"names":["XHRLoader","cfg","requestModifier","instance","load","httpRequest","requestStartTime","Date","request","xhr","XMLHttpRequest","open","method","url","responseType","range","setRequestHeader","requestStartDate","modifyRequestHeader","withCredentials","onload","onloadend","onend","onerror","onprogress","progress","onabort","ontimeout","timeout","send","response","abort","x","undefined","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"sEA8BA,qD,4IAEA;;;;;GAMA,QAASA,UAAT,CAAmBC,GAAnB,CAAwB,CAEpBA,IAAMA,KAAO,EAAb,CACA,GAAMC,iBAAkBD,IAAIC,eAA5B,CAEA,GAAIC,gBAAJ,CAEA,QAASC,KAAT,CAAcC,WAAd,CAA2B,CAEvB;AACA,GAAMC,kBAAmB,GAAIC,KAAJ,EAAzB,CACA,GAAMC,SAAUH,YAAYG,OAA5B,CAEA,GAAIC,KAAM,GAAIC,eAAJ,EAAV,CACAD,IAAIE,IAAJ,CAASN,YAAYO,MAArB,CAA6BP,YAAYQ,GAAzC,CAA8C,IAA9C,EAEA,GAAIL,QAAQM,YAAZ,CAA0B,CACtBL,IAAIK,YAAJ,CAAmBN,QAAQM,YAA3B,CACH,CAED,GAAIN,QAAQO,KAAZ,CAAmB,CACfN,IAAIO,gBAAJ,CAAqB,OAArB,CAA8B,SAAWR,QAAQO,KAAjD,EACH,CAED,GAAI,CAACP,QAAQS,gBAAb,CAA+B,CAC3BT,QAAQS,gBAAR,CAA2BX,gBAA3B,CACH,CAED,GAAIJ,eAAJ,CAAqB,CACjBO,IAAMP,gBAAgBgB,mBAAhB,CAAoCT,GAApC,CAAN,CACH,CAEDA,IAAIU,eAAJ,CAAsBd,YAAYc,eAAlC,CAEAV,IAAIW,MAAJ,CAAaf,YAAYe,MAAzB,CACAX,IAAIY,SAAJ,CAAgBhB,YAAYiB,KAA5B,CACAb,IAAIc,OAAJ,CAAclB,YAAYkB,OAA1B,CACAd,IAAIe,UAAJ,CAAiBnB,YAAYoB,QAA7B,CACAhB,IAAIiB,OAAJ,CAAcrB,YAAYqB,OAA1B,CACAjB,IAAIkB,SAAJ,CAAgBtB,YAAYsB,SAA5B,CACAlB,IAAImB,OAAJ,CAAcvB,YAAYuB,OAA1B,CAEAnB,IAAIoB,IAAJ,GAEAxB,YAAYyB,QAAZ,CAAuBrB,GAAvB,CACH,CAED,QAASsB,MAAT,CAAevB,OAAf,CAAwB,CACpB,GAAMwB,GAAIxB,QAAQsB,QAAlB,CACAE,EAAEX,SAAF,CAAcW,EAAET,OAAF,CAAYS,EAAER,UAAF,CAAeS,SAAzC,CAAoD;AACpDD,EAAED,KAAF,GACH,CAED5B,SAAW,CACPC,KAAMA,IADC,CAEP2B,MAAOA,KAFA,CAAX,CAKA,MAAO5B,SAAP,CACH,CAjGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmGAH,UAAUkC,qBAAV,CAAkC,WAAlC,CAEA,GAAMC,SAAUC,uBAAaC,eAAb,CAA6BrC,SAA7B,CAAhB,C,gBACemC,O","file":"XHRLoader.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\n/**\r\n * @module XHRLoader\r\n * @ignore\r\n * @description Manages download of resources via HTTP.\r\n * @param {Object} cfg - dependencies from parent\r\n */\r\nfunction XHRLoader(cfg) {\r\n\r\n    cfg = cfg || {};\r\n    const requestModifier = cfg.requestModifier;\r\n\r\n    let instance;\r\n\r\n    function load(httpRequest) {\r\n\r\n        // Variables will be used in the callback functions\r\n        const requestStartTime = new Date();\r\n        const request = httpRequest.request;\r\n\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(httpRequest.method, httpRequest.url, true);\r\n\r\n        if (request.responseType) {\r\n            xhr.responseType = request.responseType;\r\n        }\r\n\r\n        if (request.range) {\r\n            xhr.setRequestHeader('Range', 'bytes=' + request.range);\r\n        }\r\n\r\n        if (!request.requestStartDate) {\r\n            request.requestStartDate = requestStartTime;\r\n        }\r\n\r\n        if (requestModifier) {\r\n            xhr = requestModifier.modifyRequestHeader(xhr);\r\n        }\r\n\r\n        xhr.withCredentials = httpRequest.withCredentials;\r\n\r\n        xhr.onload = httpRequest.onload;\r\n        xhr.onloadend = httpRequest.onend;\r\n        xhr.onerror = httpRequest.onerror;\r\n        xhr.onprogress = httpRequest.progress;\r\n        xhr.onabort = httpRequest.onabort;\r\n        xhr.ontimeout = httpRequest.ontimeout;\r\n        xhr.timeout = httpRequest.timeout;\r\n\r\n        xhr.send();\r\n\r\n        httpRequest.response = xhr;\r\n    }\r\n\r\n    function abort(request) {\r\n        const x = request.response;\r\n        x.onloadend = x.onerror = x.onprogress = undefined; //Ignore events from aborted requests.\r\n        x.abort();\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        abort: abort\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nXHRLoader.__dashjs_factory_name = 'XHRLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(XHRLoader);\r\nexport default factory;\r\n"]}