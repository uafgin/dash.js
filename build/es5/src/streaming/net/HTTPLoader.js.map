{"version":3,"sources":["../../../../../src/streaming/net/HTTPLoader.js"],"names":["HTTPLoader","cfg","context","errHandler","dashMetrics","mediaPlayerModel","requestModifier","boxParser","useFetch","errors","requestTimeout","eventBus","getInstance","settings","instance","requests","delayedRequests","retryRequests","downloadErrorToRequestTypeMap","cmcdModel","logger","setup","getLogger","HTTPRequest","MPD_TYPE","DOWNLOAD_ERROR_ID_MANIFEST_CODE","XLINK_EXPANSION_TYPE","DOWNLOAD_ERROR_ID_XLINK_CODE","INIT_SEGMENT_TYPE","DOWNLOAD_ERROR_ID_INITIALIZATION_CODE","MEDIA_SEGMENT_TYPE","DOWNLOAD_ERROR_ID_CONTENT_CODE","INDEX_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","OTHER_TYPE","internalLoad","config","remainingAttempts","request","traces","firstProgress","needFailureReport","requestStartTime","Date","lastTraceTime","lastTraceReceivedCount","httpRequest","Error","handleLoaded","success","requestStartDate","requestEndDate","firstByteDate","checkExistenceOnly","addHttpRequest","response","responseURL","status","getAllResponseHeaders","responseHeaders","type","addManifestUpdate","onloadend","indexOf","splice","get","streaming","utcSynchronization","enableBackgroundSyncAfterSegmentDownloadError","initialNumberOfAttempts","getRetryAttemptsForType","trigger","Events","ATTEMPT_BACKGROUND_SYNC","e","retryRequest","push","timeout","setTimeout","getRetryIntervalsForType","error","DashJSError","url","statusText","complete","progress","event","currentTime","lengthComputable","total","loaded","bytesLoaded","bytesTotal","noTrace","s","d","time","getTime","b","onload","onabort","abort","ontimeout","timeoutMessage","percentageComplete","toFixed","warn","loader","window","fetch","responseType","create","modifiedUrl","modifyRequestURL","additionalQueryParameter","_getAdditionalQueryParameter","Utils","addAditionalQueryParameterToUrl","verb","HEAD","GET","withCredentials","getXHRWithCredentialsForType","method","onend","onerror","now","isNaN","delayLoadingTime","load","delayedRequest","delayTimeout","cmcdQueryParameter","getQueryParameter","forEach","clearTimeout","t","x","onprogress","undefined","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"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","file":"HTTPLoader.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport XHRLoader from './XHRLoader';\r\nimport FetchLoader from './FetchLoader';\r\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport DashJSError from '../vo/DashJSError';\r\nimport CmcdModel from '../models/CmcdModel';\r\nimport Utils from '../../core/Utils';\r\nimport Debug from '../../core/Debug';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport Settings from '../../core/Settings';\r\n\r\n/**\r\n * @module HTTPLoader\r\n * @ignore\r\n * @description Manages download of resources via HTTP.\r\n * @param {Object} cfg - dependancies from parent\r\n */\r\nfunction HTTPLoader(cfg) {\r\n\r\n    cfg = cfg || {};\r\n\r\n    const context = this.context;\r\n    const errHandler = cfg.errHandler;\r\n    const dashMetrics = cfg.dashMetrics;\r\n    const mediaPlayerModel = cfg.mediaPlayerModel;\r\n    const requestModifier = cfg.requestModifier;\r\n    const boxParser = cfg.boxParser;\r\n    const useFetch = cfg.useFetch || false;\r\n    const errors = cfg.errors;\r\n    const requestTimeout = cfg.requestTimeout || 0;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const settings = Settings(context).getInstance();\r\n\r\n    let instance,\r\n        requests,\r\n        delayedRequests,\r\n        retryRequests,\r\n        downloadErrorToRequestTypeMap,\r\n        cmcdModel,\r\n        logger;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        requests = [];\r\n        delayedRequests = [];\r\n        retryRequests = [];\r\n        cmcdModel = CmcdModel(context).getInstance();\r\n\r\n        downloadErrorToRequestTypeMap = {\r\n            [HTTPRequest.MPD_TYPE]: errors.DOWNLOAD_ERROR_ID_MANIFEST_CODE,\r\n            [HTTPRequest.XLINK_EXPANSION_TYPE]: errors.DOWNLOAD_ERROR_ID_XLINK_CODE,\r\n            [HTTPRequest.INIT_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE,\r\n            [HTTPRequest.MEDIA_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\r\n            [HTTPRequest.INDEX_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\r\n            [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\r\n            [HTTPRequest.OTHER_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE\r\n        };\r\n    }\r\n\r\n    function internalLoad(config, remainingAttempts) {\r\n        const request = config.request;\r\n        const traces = [];\r\n        let firstProgress = true;\r\n        let needFailureReport = true;\r\n        let requestStartTime = new Date();\r\n        let lastTraceTime = requestStartTime;\r\n        let lastTraceReceivedCount = 0;\r\n        let httpRequest;\r\n\r\n        if (!requestModifier || !dashMetrics || !errHandler) {\r\n            throw new Error('config object is not correct or missing');\r\n        }\r\n\r\n        const handleLoaded = function (success) {\r\n            needFailureReport = false;\r\n\r\n            request.requestStartDate = requestStartTime;\r\n            request.requestEndDate = new Date();\r\n            request.firstByteDate = request.firstByteDate || requestStartTime;\r\n\r\n            if (!request.checkExistenceOnly) {\r\n                dashMetrics.addHttpRequest(request, httpRequest.response ? httpRequest.response.responseURL : null,\r\n                    httpRequest.response ? httpRequest.response.status : null,\r\n                    httpRequest.response && httpRequest.response.getAllResponseHeaders ? httpRequest.response.getAllResponseHeaders() :\r\n                        httpRequest.response ? httpRequest.response.responseHeaders : [],\r\n                    success ? traces : null);\r\n\r\n                if (request.type === HTTPRequest.MPD_TYPE) {\r\n                    dashMetrics.addManifestUpdate(request);\r\n                }\r\n            }\r\n        };\r\n\r\n        const onloadend = function () {\r\n            if (requests.indexOf(httpRequest) === -1) {\r\n                return;\r\n            } else {\r\n                requests.splice(requests.indexOf(httpRequest), 1);\r\n            }\r\n\r\n            if (needFailureReport) {\r\n                handleLoaded(false);\r\n\r\n                if (remainingAttempts > 0) {\r\n\r\n                    // If we get a 404 to a media segment we should check the client clock again and perform a UTC sync in the background.\r\n                    try {\r\n                        if (settings.get().streaming.utcSynchronization.enableBackgroundSyncAfterSegmentDownloadError && request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\r\n                            // Only trigger a sync if the loading failed for the first time\r\n                            const initialNumberOfAttempts = mediaPlayerModel.getRetryAttemptsForType(HTTPRequest.MEDIA_SEGMENT_TYPE);\r\n                            if (initialNumberOfAttempts === remainingAttempts) {\r\n                                eventBus.trigger(Events.ATTEMPT_BACKGROUND_SYNC);\r\n                            }\r\n                        }\r\n                    } catch (e) {\r\n\r\n                    }\r\n\r\n                    remainingAttempts--;\r\n                    let retryRequest = { config: config };\r\n                    retryRequests.push(retryRequest);\r\n                    retryRequest.timeout = setTimeout(function () {\r\n                        if (retryRequests.indexOf(retryRequest) === -1) {\r\n                            return;\r\n                        } else {\r\n                            retryRequests.splice(retryRequests.indexOf(retryRequest), 1);\r\n                        }\r\n                        internalLoad(config, remainingAttempts);\r\n                    }, mediaPlayerModel.getRetryIntervalsForType(request.type));\r\n                } else {\r\n                    errHandler.error(new DashJSError(downloadErrorToRequestTypeMap[request.type], request.url + ' is not available', {\r\n                        request: request,\r\n                        response: httpRequest.response\r\n                    }));\r\n\r\n                    if (config.error) {\r\n                        config.error(request, 'error', httpRequest.response.statusText);\r\n                    }\r\n\r\n                    if (config.complete) {\r\n                        config.complete(request, httpRequest.response.statusText);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const progress = function (event) {\r\n            const currentTime = new Date();\r\n\r\n            if (firstProgress) {\r\n                firstProgress = false;\r\n                if (!event.lengthComputable ||\r\n                    (event.lengthComputable && event.total !== event.loaded)) {\r\n                    request.firstByteDate = currentTime;\r\n                }\r\n            }\r\n\r\n            if (event.lengthComputable) {\r\n                request.bytesLoaded = event.loaded;\r\n                request.bytesTotal = event.total;\r\n            }\r\n\r\n            if (!event.noTrace) {\r\n                traces.push({\r\n                    s: lastTraceTime,\r\n                    d: event.time ? event.time : currentTime.getTime() - lastTraceTime.getTime(),\r\n                    b: [event.loaded ? event.loaded - lastTraceReceivedCount : 0]\r\n                });\r\n\r\n                lastTraceTime = currentTime;\r\n                lastTraceReceivedCount = event.loaded;\r\n            }\r\n\r\n            if (config.progress && event) {\r\n                config.progress(event);\r\n            }\r\n        };\r\n\r\n        const onload = function () {\r\n            if (httpRequest.response.status >= 200 && httpRequest.response.status <= 299) {\r\n                handleLoaded(true);\r\n\r\n                if (config.success) {\r\n                    config.success(httpRequest.response.response, httpRequest.response.statusText, httpRequest.response.responseURL);\r\n                }\r\n\r\n                if (config.complete) {\r\n                    config.complete(request, httpRequest.response.statusText);\r\n                }\r\n            }\r\n        };\r\n\r\n        const onabort = function () {\r\n            if (config.abort) {\r\n                config.abort(request);\r\n            }\r\n        };\r\n\r\n        const ontimeout = function (event) {\r\n            let timeoutMessage;\r\n            if (event.lengthComputable) {\r\n                let percentageComplete = (event.loaded / event.total) * 100;\r\n                timeoutMessage = 'Request timeout: loaded: ' + event.loaded + ', out of: ' + event.total + ' : ' + percentageComplete.toFixed(3) + '% Completed';\r\n            } else {\r\n                timeoutMessage = 'Request timeout: non-computable download size';\r\n            }\r\n            logger.warn(timeoutMessage);\r\n        };\r\n\r\n        let loader;\r\n        if (useFetch && window.fetch && request.responseType === 'arraybuffer' && request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\r\n            loader = FetchLoader(context).create({\r\n                requestModifier: requestModifier,\r\n                boxParser: boxParser\r\n            });\r\n        } else {\r\n            loader = XHRLoader(context).create({\r\n                requestModifier: requestModifier\r\n            });\r\n        }\r\n\r\n        let modifiedUrl = requestModifier.modifyRequestURL(request.url);\r\n        const additionalQueryParameter = _getAdditionalQueryParameter(request);\r\n        modifiedUrl = Utils.addAditionalQueryParameterToUrl(modifiedUrl, additionalQueryParameter);\r\n        const verb = request.checkExistenceOnly ? HTTPRequest.HEAD : HTTPRequest.GET;\r\n        const withCredentials = mediaPlayerModel.getXHRWithCredentialsForType(request.type);\r\n\r\n\r\n        httpRequest = {\r\n            url: modifiedUrl,\r\n            method: verb,\r\n            withCredentials: withCredentials,\r\n            request: request,\r\n            onload: onload,\r\n            onend: onloadend,\r\n            onerror: onloadend,\r\n            progress: progress,\r\n            onabort: onabort,\r\n            ontimeout: ontimeout,\r\n            loader: loader,\r\n            timeout: requestTimeout\r\n        };\r\n\r\n        // Adds the ability to delay single fragment loading time to control buffer.\r\n        let now = new Date().getTime();\r\n        if (isNaN(request.delayLoadingTime) || now >= request.delayLoadingTime) {\r\n            // no delay - just send\r\n            requests.push(httpRequest);\r\n            loader.load(httpRequest);\r\n        } else {\r\n            // delay\r\n            let delayedRequest = { httpRequest: httpRequest };\r\n            delayedRequests.push(delayedRequest);\r\n            delayedRequest.delayTimeout = setTimeout(function () {\r\n                if (delayedRequests.indexOf(delayedRequest) === -1) {\r\n                    return;\r\n                } else {\r\n                    delayedRequests.splice(delayedRequests.indexOf(delayedRequest), 1);\r\n                }\r\n                try {\r\n                    requestStartTime = new Date();\r\n                    lastTraceTime = requestStartTime;\r\n                    requests.push(delayedRequest.httpRequest);\r\n                    loader.load(delayedRequest.httpRequest);\r\n                } catch (e) {\r\n                    delayedRequest.httpRequest.onerror();\r\n                }\r\n            }, (request.delayLoadingTime - now));\r\n        }\r\n    }\r\n\r\n    function _getAdditionalQueryParameter(request) {\r\n        try {\r\n            const additionalQueryParameter = [];\r\n            const cmcdQueryParameter = cmcdModel.getQueryParameter(request);\r\n\r\n            if (cmcdQueryParameter) {\r\n                additionalQueryParameter.push(cmcdQueryParameter);\r\n            }\r\n\r\n            return additionalQueryParameter;\r\n        } catch (e) {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initiates a download of the resource described by config.request\r\n     * @param {Object} config - contains request (FragmentRequest or derived type), and callbacks\r\n     * @memberof module:HTTPLoader\r\n     * @instance\r\n     */\r\n    function load(config) {\r\n        if (config.request) {\r\n            internalLoad(\r\n                config,\r\n                mediaPlayerModel.getRetryAttemptsForType(\r\n                    config.request.type\r\n                )\r\n            );\r\n        } else {\r\n            if (config.error) {\r\n                config.error(config.request, 'error');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Aborts any inflight downloads\r\n     * @memberof module:HTTPLoader\r\n     * @instance\r\n     */\r\n    function abort() {\r\n        retryRequests.forEach(t => {\r\n            clearTimeout(t.timeout);\r\n            // abort request in order to trigger LOADING_ABANDONED event\r\n            if (t.config.request && t.config.abort) {\r\n                t.config.abort(t.config.request);\r\n            }\r\n        });\r\n        retryRequests = [];\r\n\r\n        delayedRequests.forEach(x => clearTimeout(x.delayTimeout));\r\n        delayedRequests = [];\r\n\r\n        requests.forEach(x => {\r\n            // abort will trigger onloadend which we don't want\r\n            // when deliberately aborting inflight requests -\r\n            // set them to undefined so they are not called\r\n            x.onloadend = x.onerror = x.onprogress = undefined;\r\n            x.loader.abort(x);\r\n        });\r\n        requests = [];\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        abort: abort\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nHTTPLoader.__dashjs_factory_name = 'HTTPLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(HTTPLoader);\r\nexport default factory;\r\n"]}