{"version":3,"sources":["../../../../../../src/streaming/metrics/controllers/MetricsHandlersController.js"],"names":["MetricsHandlersController","config","handlers","instance","context","eventBus","Events","events","metricsHandlerFactory","getInstance","debug","metricsConstants","handle","e","forEach","handler","handleNewMetric","metric","value","mediaType","initialize","metrics","reportingController","split","m","midx","ms","indexOf","nextm","create","push","on","METRIC_ADDED","METRIC_UPDATED","reset","off","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,uE,8JAEA,QAASA,0BAAT,CAAmCC,MAAnC,CAA2C,CAEvCA,OAASA,QAAU,EAAnB,CACA,GAAIC,UAAW,EAAf,CAEA,GAAIC,gBAAJ,CACA,GAAMC,SAAU,KAAKA,OAArB,CACA,GAAMC,UAAWJ,OAAOI,QAAxB,CACA,GAAMC,QAASL,OAAOM,MAAtB,CAEA,GAAIC,uBAAwB,oCAAsBJ,OAAtB,EAA+BK,WAA/B,CAA2C,CACnEC,MAAOT,OAAOS,KADqD,CAEnEL,SAAUJ,OAAOI,QAFkD,CAGnEM,iBAAkBV,OAAOU,gBAH0C,CAA3C,CAA5B,CAMA,QAASC,OAAT,CAAgBC,CAAhB,CAAmB,CACfX,SAASY,OAAT,CAAiB,iBAAW,CACxBC,QAAQC,eAAR,CAAwBH,EAAEI,MAA1B,CAAkCJ,EAAEK,KAApC,CAA2CL,EAAEM,SAA7C,EACH,CAFD,EAGH,CAED,QAASC,WAAT,CAAoBC,OAApB,CAA6BC,mBAA7B,CAAkD,CAC9CD,QAAQE,KAAR,CAAc,GAAd,EAAmBT,OAAnB,CACI,SAACU,CAAD,CAAIC,IAAJ,CAAUC,EAAV,CAAiB,CACb,GAAIX,eAAJ,CAEA;AACA;AACA;AACA,GAAKS,EAAEG,OAAF,CAAU,GAAV,IAAmB,CAAC,CAArB,EAA2BH,EAAEG,OAAF,CAAU,GAAV,IAAmB,CAAC,CAAnD,CAAsD,CAClD,GAAIC,OAAQF,GAAGD,KAAO,CAAV,CAAZ,CAEA,GAAIG,OACKA,MAAMD,OAAN,CAAc,GAAd,IAAuB,CAAC,CAD7B,EAEKC,MAAMD,OAAN,CAAc,GAAd,IAAuB,CAAC,CAFjC,CAEqC,CACjCH,GAAK,IAAMI,KAAX,CAEA;AACA,MAAOF,IAAGD,KAAO,CAAV,CAAP,CACH,CACJ,CAEDV,QAAUP,sBAAsBqB,MAAtB,CACNL,CADM,CAENF,mBAFM,CAAV,CAKA,GAAIP,OAAJ,CAAa,CACTb,SAAS4B,IAAT,CAAcf,OAAd,EACH,CACJ,CA5BL,EA+BAV,SAAS0B,EAAT,CACIzB,OAAO0B,YADX,CAEIpB,MAFJ,CAGIT,QAHJ,EAMAE,SAAS0B,EAAT,CACIzB,OAAO2B,cADX,CAEIrB,MAFJ,CAGIT,QAHJ,EAKH,CAED,QAAS+B,MAAT,EAAiB,CACb7B,SAAS8B,GAAT,CACI7B,OAAO0B,YADX,CAEIpB,MAFJ,CAGIT,QAHJ,EAMAE,SAAS8B,GAAT,CACI7B,OAAO2B,cADX,CAEIrB,MAFJ,CAGIT,QAHJ,EAMAD,SAASY,OAAT,CAAiB,wBAAWC,SAAQmB,KAAR,EAAX,EAAjB,EAEAhC,SAAW,EAAX,CACH,CAEDC,SAAW,CACPiB,WAAYA,UADL,CAEPc,MAAYA,KAFL,CAAX,CAKA,MAAO/B,SAAP,CACH,CA5HD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8HAH,0BAA0BoC,qBAA1B,CAAkD,2BAAlD,C,gBACeC,OAAOC,YAAP,CAAoBC,eAApB,CAAoCvC,yBAApC,C,CAAgE","file":"MetricsHandlersController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MetricsHandlerFactory from '../metrics/MetricsHandlerFactory';\r\n\r\nfunction MetricsHandlersController(config) {\r\n\r\n    config = config || {};\r\n    let handlers = [];\r\n\r\n    let instance;\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;\r\n    const Events = config.events;\r\n\r\n    let metricsHandlerFactory = MetricsHandlerFactory(context).getInstance({\r\n        debug: config.debug,\r\n        eventBus: config.eventBus,\r\n        metricsConstants: config.metricsConstants\r\n    });\r\n\r\n    function handle(e) {\r\n        handlers.forEach(handler => {\r\n            handler.handleNewMetric(e.metric, e.value, e.mediaType);\r\n        });\r\n    }\r\n\r\n    function initialize(metrics, reportingController) {\r\n        metrics.split(',').forEach(\r\n            (m, midx, ms) => {\r\n                let handler;\r\n\r\n                // there is a bug in ISO23009-1 where the metrics attribute\r\n                // is a comma-separated list but HttpList key can contain a\r\n                // comma enclosed by ().\r\n                if ((m.indexOf('(') !== -1) && m.indexOf(')') === -1) {\r\n                    let nextm = ms[midx + 1];\r\n\r\n                    if (nextm &&\r\n                            (nextm.indexOf('(') === -1) &&\r\n                            (nextm.indexOf(')') !== -1)) {\r\n                        m += ',' + nextm;\r\n\r\n                        // delete the next metric so forEach does not visit.\r\n                        delete ms[midx + 1];\r\n                    }\r\n                }\r\n\r\n                handler = metricsHandlerFactory.create(\r\n                    m,\r\n                    reportingController\r\n                );\r\n\r\n                if (handler) {\r\n                    handlers.push(handler);\r\n                }\r\n            }\r\n        );\r\n\r\n        eventBus.on(\r\n            Events.METRIC_ADDED,\r\n            handle,\r\n            instance\r\n        );\r\n\r\n        eventBus.on(\r\n            Events.METRIC_UPDATED,\r\n            handle,\r\n            instance\r\n        );\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(\r\n            Events.METRIC_ADDED,\r\n            handle,\r\n            instance\r\n        );\r\n\r\n        eventBus.off(\r\n            Events.METRIC_UPDATED,\r\n            handle,\r\n            instance\r\n        );\r\n\r\n        handlers.forEach(handler => handler.reset());\r\n\r\n        handlers = [];\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset:      reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';\r\nexport default dashjs.FactoryMaker.getClassFactory(MetricsHandlersController); /* jshint ignore:line */\r\n"]}