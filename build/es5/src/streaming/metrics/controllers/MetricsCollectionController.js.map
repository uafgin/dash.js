{"version":3,"sources":["../../../../../../src/streaming/metrics/controllers/MetricsCollectionController.js"],"names":["MetricsCollectionController","config","instance","metricsControllers","context","eventBus","events","update","e","error","controllersToRemove","Object","keys","metrics","getInstance","adapter","constants","getMetrics","manifest","forEach","key","JSON","stringify","m","hasOwnProperty","controller","create","initialize","splice","c","reset","trigger","MetricsReportingEvents","METRICS_INITIALISATION_COMPLETE","resetMetricsControllers","setup","on","MANIFEST_UPDATED","STREAM_TEARDOWN_COMPLETE","off","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,sD,mEACA,yD,+DACA,iE,gKAEA,QAASA,4BAAT,CAAqCC,MAArC,CAA6C,CAEzCA,OAASA,QAAU,EAAnB,CACA,GAAIC,gBAAJ,CACA,GAAIC,oBAAqB,EAAzB,CACA,GAAIC,SAAU,KAAKA,OAAnB,CACA,GAAIC,UAAWJ,OAAOI,QAAtB,CACA,GAAMC,QAASL,OAAOK,MAAtB,CAEA,QAASC,OAAT,CAAgBC,CAAhB,CAAmB,CACf,GAAIA,EAAEC,KAAN,CAAa,CACT,OACH,CAED;AACA,GAAIC,qBAAsBC,OAAOC,IAAP,CAAYT,kBAAZ,CAA1B,CAEA,GAAMU,SAAU,8BAAgBT,OAAhB,EAAyBU,WAAzB,CAAqC,CACjDC,QAASd,OAAOc,OADiC,CAEjDC,UAAWf,OAAOe,SAF+B,CAArC,EAGbC,UAHa,CAGFT,EAAEU,QAHA,CAAhB,CAKAL,QAAQM,OAAR,CAAgB,WAAK,CACjB,GAAMC,KAAMC,KAAKC,SAAL,CAAeC,CAAf,CAAZ,CAEA,GAAI,CAACpB,mBAAmBqB,cAAnB,CAAkCJ,GAAlC,CAAL,CAA6C,CACzC,GAAI,CACA,GAAIK,YAAa,gCAAkBrB,OAAlB,EAA2BsB,MAA3B,CAAkCzB,MAAlC,CAAjB,CACAwB,WAAWE,UAAX,CAAsBJ,CAAtB,EACApB,mBAAmBiB,GAAnB,EAA0BK,UAA1B,CACH,CAAC,MAAOjB,CAAP,CAAU,CACR;AACH,CACJ,CARD,IAQO,CACH;AACAE,oBAAoBkB,MAApB,CAA2BR,GAA3B,CAAgC,CAAhC,EACH,CACJ,CAfD,EAiBA;AACAV,oBAAoBS,OAApB,CAA4B,WAAK,CAC7BhB,mBAAmB0B,CAAnB,EAAsBC,KAAtB,GACA,MAAO3B,oBAAmB0B,CAAnB,CAAP,CACH,CAHD,EAKAxB,SAAS0B,OAAT,CAAiBC,iCAAuBC,+BAAxC,EACH,CAED,QAASC,wBAAT,EAAmC,CAC/BvB,OAAOC,IAAP,CAAYT,kBAAZ,EAAgCgB,OAAhC,CAAwC,aAAO,CAC3ChB,mBAAmBiB,GAAnB,EAAwBU,KAAxB,GACH,CAFD,EAIA3B,mBAAqB,EAArB,CACH,CAED,QAASgC,MAAT,EAAiB,CACb9B,SAAS+B,EAAT,CAAY9B,OAAO+B,gBAAnB,CAAqC9B,MAArC,CAA6CL,QAA7C,EACAG,SAAS+B,EAAT,CAAY9B,OAAOgC,wBAAnB,CAA6CJ,uBAA7C,CAAsEhC,QAAtE,EACH,CAED,QAAS4B,MAAT,EAAiB,CACbzB,SAASkC,GAAT,CAAajC,OAAO+B,gBAApB,CAAsC9B,MAAtC,CAA8CL,QAA9C,EACAG,SAASkC,GAAT,CAAajC,OAAOgC,wBAApB,CAA8CJ,uBAA9C,CAAuEhC,QAAvE,EACH,CAEDA,SAAW,CACP4B,MAAOA,KADA,CAAX,CAIAK,QACA,MAAOjC,SAAP,CACH,CA3GD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6GAF,4BAA4BwC,qBAA5B,CAAoD,6BAApD,C,gBACeC,OAAOC,YAAP,CAAoBC,eAApB,CAAoC3C,2BAApC,C,CAAkE","file":"MetricsCollectionController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MetricsController from './MetricsController';\r\nimport ManifestParsing from '../utils/ManifestParsing';\r\nimport MetricsReportingEvents from '../MetricsReportingEvents';\r\n\r\nfunction MetricsCollectionController(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let metricsControllers = {};\r\n    let context = this.context;\r\n    let eventBus = config.eventBus;\r\n    const events = config.events;\r\n\r\n    function update(e) {\r\n        if (e.error) {\r\n            return;\r\n        }\r\n\r\n        // start by assuming all existing controllers need removing\r\n        let controllersToRemove = Object.keys(metricsControllers);\r\n\r\n        const metrics = ManifestParsing(context).getInstance({\r\n            adapter: config.adapter,\r\n            constants: config.constants\r\n        }).getMetrics(e.manifest);\r\n\r\n        metrics.forEach(m => {\r\n            const key = JSON.stringify(m);\r\n\r\n            if (!metricsControllers.hasOwnProperty(key)) {\r\n                try {\r\n                    let controller = MetricsController(context).create(config);\r\n                    controller.initialize(m);\r\n                    metricsControllers[key] = controller;\r\n                } catch (e) {\r\n                    // fail quietly\r\n                }\r\n            } else {\r\n                // we still need this controller - delete from removal list\r\n                controllersToRemove.splice(key, 1);\r\n            }\r\n        });\r\n\r\n        // now remove the unwanted controllers\r\n        controllersToRemove.forEach(c => {\r\n            metricsControllers[c].reset();\r\n            delete metricsControllers[c];\r\n        });\r\n\r\n        eventBus.trigger(MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE);\r\n    }\r\n\r\n    function resetMetricsControllers() {\r\n        Object.keys(metricsControllers).forEach(key => {\r\n            metricsControllers[key].reset();\r\n        });\r\n\r\n        metricsControllers = {};\r\n    }\r\n\r\n    function setup() {\r\n        eventBus.on(events.MANIFEST_UPDATED, update, instance);\r\n        eventBus.on(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers, instance);\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(events.MANIFEST_UPDATED, update, instance);\r\n        eventBus.off(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers, instance);\r\n    }\r\n\r\n    instance = {\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\r\nexport default dashjs.FactoryMaker.getClassFactory(MetricsCollectionController); /* jshint ignore:line */\r\n"]}