{"version":3,"sources":["../../../../../../../src/streaming/metrics/metrics/handlers/DVBErrorsHandler.js"],"names":["DVBErrorsHandler","config","instance","reportingController","eventBus","metricsConstants","onInitialisationComplete","off","MetricsReportingEvents","METRICS_INITIALISATION_COMPLETE","trigger","BECAME_REPORTING_PLAYER","initialize","unused","rc","on","reset","handleNewMetric","metric","vo","DVB_ERRORS","report","dashjs","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,oE,gKAEA,QAASA,iBAAT,CAA0BC,MAA1B,CAAkC,CAE9BA,OAASA,QAAU,EAAnB,CACA,GAAIC,gBAAJ,CACIC,0BADJ,CAGA,GAAIC,UAAWH,OAAOG,QAAtB,CACA,GAAMC,kBAAmBJ,OAAOI,gBAAhC,CAEA,QAASC,yBAAT,EAAoC,CAChC;AACAF,SAASG,GAAT,CACIC,iCAAuBC,+BAD3B,CAEIH,wBAFJ,CAGI,IAHJ,EAMA;AACA;AACAF,SAASM,OAAT,CAAiBF,iCAAuBG,uBAAxC,EACH,CAED,QAASC,WAAT,CAAoBC,MAApB,CAA4BC,EAA5B,CAAgC,CAC5B,GAAIA,EAAJ,CAAQ,CACJX,oBAAsBW,EAAtB,CAEAV,SAASW,EAAT,CACIP,iCAAuBC,+BAD3B,CAEIH,wBAFJ,CAGI,IAHJ,EAKH,CACJ,CAED,QAASU,MAAT,EAAiB,CACbb,oBAAsB,IAAtB,CACH,CAED,QAASc,gBAAT,CAAyBC,MAAzB,CAAiCC,EAAjC,CAAqC,CACjC;AACA,GAAID,SAAWb,iBAAiBe,UAAhC,CAA4C,CACxC,GAAIjB,mBAAJ,CAAyB,CACrBA,oBAAoBkB,MAApB,CAA2BH,MAA3B,CAAmCC,EAAnC,EACH,CACJ,CACJ,CAEDjB,SAAW,CACPU,WAAoBA,UADb,CAEPI,MAAoBA,KAFb,CAGPC,gBAAoBA,eAHb,CAAX,CAMA,MAAOf,SAAP,CACH,CAvFD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAyFeoB,OAAOC,YAAP,CAAoBC,eAApB,CAAoCxB,gBAApC,C,CAAuD","file":"DVBErrorsHandler.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MetricsReportingEvents from '../../MetricsReportingEvents';\r\n\r\nfunction DVBErrorsHandler(config) {\r\n\r\n    config = config || {};\r\n    let instance,\r\n        reportingController;\r\n\r\n    let eventBus = config.eventBus;\r\n    const metricsConstants = config.metricsConstants;\r\n\r\n    function onInitialisationComplete() {\r\n        // we only want to report this once per call to initialize\r\n        eventBus.off(\r\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\r\n            onInitialisationComplete,\r\n            this\r\n        );\r\n\r\n        // Note: A Player becoming a reporting Player is itself\r\n        // something which is recorded by the DVBErrors metric.\r\n        eventBus.trigger(MetricsReportingEvents.BECAME_REPORTING_PLAYER);\r\n    }\r\n\r\n    function initialize(unused, rc) {\r\n        if (rc) {\r\n            reportingController = rc;\r\n\r\n            eventBus.on(\r\n                MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\r\n                onInitialisationComplete,\r\n                this\r\n            );\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        reportingController = null;\r\n    }\r\n\r\n    function handleNewMetric(metric, vo) {\r\n        // simply pass metric straight through\r\n        if (metric === metricsConstants.DVB_ERRORS) {\r\n            if (reportingController) {\r\n                reportingController.report(metric, vo);\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize:         initialize,\r\n        reset:              reset,\r\n        handleNewMetric:    handleNewMetric\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nexport default dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler); /* jshint ignore:line */\r\n"]}