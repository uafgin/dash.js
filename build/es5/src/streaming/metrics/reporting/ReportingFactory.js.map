{"version":3,"sources":["../../../../../../src/streaming/metrics/reporting/ReportingFactory.js"],"names":["ReportingFactory","config","knownReportingSchemeIdUris","DVBReporting","context","instance","logger","debug","getLogger","metricsConstants","create","entry","rangeController","reporting","schemeIdUri","initialize","e","error","message","register","moduleName","unregister","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"sEA+BA,sD,4IAEA,QAASA,iBAAT,CAA0BC,MAA1B,CAAkC,CAC9BA,OAASA,QAAU,EAAnB,CAEA,GAAMC,4BAA6B,CAC/B,8BAA+BC,sBADA,CAAnC,CAIA,GAAMC,SAAU,KAAKA,OAArB,CACA,GAAIC,gBAAJ,CACA,GAAMC,QAASL,OAAOM,KAAP,CAAeN,OAAOM,KAAP,CAAaC,SAAb,CAAuBH,QAAvB,CAAf,CAAkD,EAAjE,CACA,GAAMI,kBAAmBR,OAAOQ,gBAAhC,CAEA,QAASC,OAAT,CAAgBC,KAAhB,CAAuBC,eAAvB,CAAwC,CACpC,GAAIC,iBAAJ,CAEA,GAAI,CACAA,UAAYX,2BAA2BS,MAAMG,WAAjC,EAA8CV,OAA9C,EAAuDM,MAAvD,CAA8D,CACtED,iBAAkBA,gBADoD,CAA9D,CAAZ,CAIAI,UAAUE,UAAV,CAAqBJ,KAArB,CAA4BC,eAA5B,EACH,CAAC,MAAOI,CAAP,CAAU,CACRH,UAAY,IAAZ,CACAP,OAAOW,KAAP,kEAA8EN,MAAMG,WAApF,MAAoGE,EAAEE,OAAtG,MACH,CAED,MAAOL,UAAP,CACH,CAED,QAASM,SAAT,CAAkBL,WAAlB,CAA+BM,UAA/B,CAA2C,CACvClB,2BAA2BY,WAA3B,EAA0CM,UAA1C,CACH,CAED,QAASC,WAAT,CAAoBP,WAApB,CAAiC,CAC7B,MAAOZ,4BAA2BY,WAA3B,CAAP,CACH,CAEDT,SAAW,CACPK,OAAYA,MADL,CAEPS,SAAYA,QAFL,CAGPE,WAAYA,UAHL,CAAX,CAMA,MAAOhB,SAAP,CACH,CA7ED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+EAL,iBAAiBsB,qBAAjB,CAAyC,kBAAzC,C,gBACeC,OAAOC,YAAP,CAAoBC,mBAApB,CAAwCzB,gBAAxC,C,CAA2D","file":"ReportingFactory.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport DVBReporting from './reporters/DVBReporting';\r\n\r\nfunction ReportingFactory(config) {\r\n    config = config || {};\r\n\r\n    const knownReportingSchemeIdUris = {\r\n        'urn:dvb:dash:reporting:2014': DVBReporting\r\n    };\r\n\r\n    const context = this.context;\r\n    let instance;\r\n    const logger = config.debug ? config.debug.getLogger(instance) : {};\r\n    const metricsConstants = config.metricsConstants;\r\n\r\n    function create(entry, rangeController) {\r\n        let reporting;\r\n\r\n        try {\r\n            reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create({\r\n                metricsConstants: metricsConstants\r\n            });\r\n\r\n            reporting.initialize(entry, rangeController);\r\n        } catch (e) {\r\n            reporting = null;\r\n            logger.error(`ReportingFactory: could not create Reporting with schemeIdUri ${entry.schemeIdUri} (${e.message})`);\r\n        }\r\n\r\n        return reporting;\r\n    }\r\n\r\n    function register(schemeIdUri, moduleName) {\r\n        knownReportingSchemeIdUris[schemeIdUri] = moduleName;\r\n    }\r\n\r\n    function unregister(schemeIdUri) {\r\n        delete knownReportingSchemeIdUris[schemeIdUri];\r\n    }\r\n\r\n    instance = {\r\n        create:     create,\r\n        register:   register,\r\n        unregister: unregister\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nReportingFactory.__dashjs_factory_name = 'ReportingFactory';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ReportingFactory); /* jshint ignore:line */\r\n"]}