{"version":3,"sources":["../../../../../../src/streaming/metrics/utils/MetricSerialiser.js"],"names":["MetricSerialiser","serialise","metric","pairs","obj","key","value","hasOwnProperty","indexOf","undefined","Array","isArray","length","forEach","v","isBuiltIn","Object","prototype","toString","call","slice","push","map","encodeURIComponent","join","Date","toISOString","Math","round","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"sEAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BA;;GAGA,QAASA,iBAAT,EAA4B,CAExB;AACA;AACA;AACA,QAASC,UAAT,CAAmBC,MAAnB,CAA2B,CACvB,GAAIC,OAAQ,EAAZ,CACA,GAAIC,KAAM,EAAV,CACA,GAAIC,WAAJ,CACIC,YADJ,CAGA;AACA;AACA;AACA;AACA;AACA,IAAKD,GAAL,GAAYH,OAAZ,CAAoB,CAChB,GAAIA,OAAOK,cAAP,CAAsBF,GAAtB,GAA+BA,IAAIG,OAAJ,CAAY,GAAZ,IAAqB,CAAxD,CAA4D,CACxDF,MAAQJ,OAAOG,GAAP,CAAR,CAEA;AACA;AACA,GAAKC,QAAUG,SAAX,EAA0BH,QAAU,IAAxC,CAA+C,CAC3CA,MAAQ,EAAR,CACH,CAED;AACA,GAAII,MAAMC,OAAN,CAAcL,KAAd,CAAJ,CAA0B,CACtB;AACA,GAAI,CAACA,MAAMM,MAAX,CAAmB,CACf,SACH,CAEDR,IAAM,EAAN,CAEAE,MAAMO,OAAN,CAAc,SAAUC,CAAV,CAAa,CACvB,GAAIC,WAAYC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,CAA/B,EAAkCM,KAAlC,CAAwC,CAAxC,CAA2C,CAAC,CAA5C,IAAmD,QAAnE,CAEAhB,IAAIiB,IAAJ,CAASN,UAAYD,CAAZ,CAAgBb,UAAUa,CAAV,CAAzB,EACH,CAJD,EAMAR,MAAQF,IAAIkB,GAAJ,CAAQC,kBAAR,EAA4BC,IAA5B,CAAiC,GAAjC,CAAR,CACH,CAfD,IAeO,IAAI,MAAOlB,MAAP,GAAiB,QAArB,CAA+B,CAClCA,MAAQiB,mBAAmBjB,KAAnB,CAAR,CACH,CAFM,IAEA,IAAIA,gBAAiBmB,KAArB,CAA2B,CAC9BnB,MAAQA,MAAMoB,WAAN,EAAR,CACH,CAFM,IAEA,IAAI,MAAOpB,MAAP,GAAiB,QAArB,CAA+B,CAClCA,MAAQqB,KAAKC,KAAL,CAAWtB,KAAX,CAAR,CACH,CAEDH,MAAMkB,IAAN,CAAWhB,IAAM,GAAN,CAAYC,KAAvB,EACH,CACJ,CAED;AACA;AACA,MAAOH,OAAMqB,IAAN,CAAW,GAAX,CAAP,CACH,CAED,MAAO,CACHvB,UAAWA,SADR,CAAP,CAGH,CAEDD,iBAAiB6B,qBAAjB,CAAyC,kBAAzC,C,gBACeC,OAAOC,YAAP,CAAoBC,mBAApB,CAAwChC,gBAAxC,C,CAA2D","file":"MetricSerialiser.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction MetricSerialiser() {\r\n\r\n    // For each entry in the top level list within the metric (in the case\r\n    // of the DVBErrors metric each entry corresponds to an \"error event\"\r\n    // described in clause 10.8.4) the Player shall:\r\n    function serialise(metric) {\r\n        let pairs = [];\r\n        let obj = [];\r\n        let key,\r\n            value;\r\n\r\n        // Take each (key, value) pair from the metric entry and create a\r\n        // string consisting of the name of the key, followed by an equals\r\n        // ('=') character, followed by the string representation of the\r\n        // value. The string representation of the value is created based\r\n        // on the type of the value following the instructions in Table 22.\r\n        for (key in metric) {\r\n            if (metric.hasOwnProperty(key) && (key.indexOf('_') !== 0)) {\r\n                value = metric[key];\r\n\r\n                // we want to ensure that keys still end up in the report\r\n                // even if there is no value\r\n                if ((value === undefined) || (value === null)) {\r\n                    value = '';\r\n                }\r\n\r\n                // DVB A168 10.12.4 Table 22\r\n                if (Array.isArray(value)) {\r\n                    // if trace or similar is null, do not include in output\r\n                    if (!value.length) {\r\n                        continue;\r\n                    }\r\n\r\n                    obj = [];\r\n\r\n                    value.forEach(function (v) {\r\n                        let isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== 'Object';\r\n\r\n                        obj.push(isBuiltIn ? v : serialise(v));\r\n                    });\r\n\r\n                    value = obj.map(encodeURIComponent).join(',');\r\n                } else if (typeof value === 'string') {\r\n                    value = encodeURIComponent(value);\r\n                } else if (value instanceof Date) {\r\n                    value = value.toISOString();\r\n                } else if (typeof value === 'number') {\r\n                    value = Math.round(value);\r\n                }\r\n\r\n                pairs.push(key + '=' + value);\r\n            }\r\n        }\r\n\r\n        // Concatenate the strings created in the previous step with an\r\n        // ampersand ('&') character between each one.\r\n        return pairs.join('&');\r\n    }\r\n\r\n    return {\r\n        serialise: serialise\r\n    };\r\n}\r\n\r\nMetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(MetricSerialiser); /* jshint ignore:line */\r\n"]}