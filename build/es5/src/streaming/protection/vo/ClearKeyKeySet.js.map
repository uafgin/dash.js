{"version":3,"sources":["../../../../../../src/streaming/protection/vo/ClearKeyKeySet.js"],"names":["ClearKeyKeySet","keyPairs","type","Error","i","numKeys","length","jwk","keys","key","kty","alg","kid","keyID","k","push","jwkString","JSON","stringify","len","buf","ArrayBuffer","bView","Uint8Array","charCodeAt"],"mappings":"qtBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BA;;;;MAKMA,e,YACF;;;;;;OAOA,wBAAYC,QAAZ,CAAsBC,IAAtB,CAA4B,sCACxB,GAAIA,MAAQA,OAAS,YAAjB,EAAiCA,OAAS,WAA9C,CACI,KAAM,IAAIC,MAAJ,CAAU,gFAAV,CAAN,CACJ,KAAKF,QAAL,CAAgBA,QAAhB,CACA,KAAKC,IAAL,CAAYA,IAAZ,CACH,CAED;;;;uEAKQ,CACJ,GAAIE,SAAJ,CACA,GAAIC,SAAU,KAAKJ,QAAL,CAAcK,MAA5B,CACA,GAAIC,KAAM,CAACC,KAAM,EAAP,CAAV,CAEA,IAAKJ,EAAI,CAAT,CAAYA,EAAIC,OAAhB,CAAyBD,GAAzB,CAA8B,CAC1B,GAAIK,KAAM,CACNC,IAAK,KADC,CAENC,IAAK,QAFC,CAGNC,IAAK,KAAKX,QAAL,CAAcG,CAAd,EAAiBS,KAHhB,CAINC,EAAG,KAAKb,QAAL,CAAcG,CAAd,EAAiBK,GAJd,CAAV,CAMAF,IAAIC,IAAJ,CAASO,IAAT,CAAcN,GAAd,EACH,CACD,GAAI,KAAKP,IAAT,CAAe,CACXK,IAAIL,IAAJ,CAAW,KAAKA,IAAhB,CACH,CACD,GAAIc,WAAYC,KAAKC,SAAL,CAAeX,GAAf,CAAhB,CACA,GAAMY,KAAMH,UAAUV,MAAtB,CAEA;AACA,GAAIc,KAAM,GAAIC,YAAJ,CAAgBF,GAAhB,CAAV,CACA,GAAIG,OAAQ,GAAIC,WAAJ,CAAeH,GAAf,CAAZ,CACA,IAAKhB,EAAI,CAAT,CAAYA,EAAIe,GAAhB,CAAqBf,GAArB,EACIkB,MAAMlB,CAAN,EAAWY,UAAUQ,UAAV,CAAqBpB,CAArB,CAAX,CADJ,CAEA,MAAOgB,IAAP,CACH,C,8CAGUpB,c","file":"ClearKeyKeySet.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\r\n *  type\r\n * @ignore\r\n */\r\nclass ClearKeyKeySet {\r\n    /**\r\n     * @param {Array.<KeyPair>} keyPairs\r\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\r\n     * or 'temporary'.  Can also be null or undefined.\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(keyPairs, type) {\r\n        if (type && type !== 'persistent' && type !== 'temporary')\r\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\r\n        this.keyPairs = keyPairs;\r\n        this.type = type;\r\n    }\r\n\r\n    /**\r\n     * Convert this key set to its JSON Web Key (JWK) representation\r\n     *\r\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\r\n     */\r\n    toJWK() {\r\n        let i;\r\n        let numKeys = this.keyPairs.length;\r\n        let jwk = {keys: []};\r\n\r\n        for (i = 0; i < numKeys; i++) {\r\n            let key = {\r\n                kty: 'oct',\r\n                alg: 'A128KW',\r\n                kid: this.keyPairs[i].keyID,\r\n                k: this.keyPairs[i].key\r\n            };\r\n            jwk.keys.push(key);\r\n        }\r\n        if (this.type) {\r\n            jwk.type = this.type;\r\n        }\r\n        let jwkString = JSON.stringify(jwk);\r\n        const len = jwkString.length;\r\n\r\n        // Convert JSON string to ArrayBuffer\r\n        let buf = new ArrayBuffer(len);\r\n        let bView = new Uint8Array(buf);\r\n        for (i = 0; i < len; i++)\r\n            bView[i] = jwkString.charCodeAt(i);\r\n        return buf;\r\n    }\r\n}\r\n\r\nexport default ClearKeyKeySet;\r\n"]}