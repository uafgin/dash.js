{"version":3,"sources":["../../../../../../src/streaming/protection/controllers/ProtectionController.js"],"names":["NEEDKEY_BEFORE_INITIALIZE_RETRIES","NEEDKEY_BEFORE_INITIALIZE_TIMEOUT","LICENSE_SERVER_REQUEST_RETRIES","LICENSE_SERVER_REQUEST_RETRY_INTERVAL","LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT","ProtectionController","config","protectionKeyController","protectionModel","eventBus","events","debug","BASE64","constants","needkeyRetries","cmcdModel","instance","logger","pendingNeedKeyData","mediaInfoArr","protDataSet","sessionType","robustnessLevel","keySystem","licenseRequestFilters","licenseResponseFilters","setup","getLogger","checkConfig","hasOwnProperty","Error","initializeForMedia","mediaInfo","on","INTERNAL_KEY_MESSAGE","onKeyMessage","INTERNAL_KEY_STATUS_CHANGED","onKeyStatusChanged","push","supportedKS","getSupportedKeySystemsFromContentProtection","contentProtection","length","selectKeySystem","clearMediaInfoArrayByStreamId","streamId","filter","streamInfo","id","cps","createKeySession","initData","cdmData","initDataForKS","CommonEncryption","getPSSHForKeySystem","protData","getProtData","_isInitDataDuplicate","getSessionType","error","trigger","KEY_SESSION_CREATED","data","DashJSError","ProtectionErrors","KEY_SESSION_CREATED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_MESSAGE","message","systemString","currentInitData","getAllInitData","i","initDataEquals","e","loadKeySession","sessionID","removeKeySession","sessionToken","closeKeySession","setServerCertificate","serverCertificate","setMediaElement","element","NEED_KEY","onNeedKey","off","setSessionType","value","setRobustnessLevel","level","setProtectionData","stop","reset","undefined","forEach","clearTimeout","retryTimeout","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","ksSessionType","distinctiveIdentifier","persistentState","media","type","AUDIO","MediaCapability","codec","VIDEO","KeySystemConfiguration","fromManifest","sort","ksA","ksB","indexA","ks","priority","indexB","_selectInitialKeySystem","_selectWithExistingKeySystem","self","requestedKeySystems","ksIdx","findIndex","entry","initDataForKs","configs","onKeySystemAccessComplete","event","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE","info","isClearKey","kids","Object","keys","clearkeys","TextEncoder","encode","JSON","stringify","sessionId","requestKeySystemAccess","keySystemAccess","INTERNAL_KEY_SYSTEM_SELECTED","onKeySystemSelected","getKeySystem","decodeArray","buffer","sendLicenseRequestCompleteEvent","LICENSE_REQUEST_COMPLETE","KEY_STATUSES_CHANGED","status","keyMessage","KEY_MESSAGE","messageType","licenseServerData","getLicenseServer","eventData","byteLength","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE","getSessionID","processClearKeyLicenseRequest","updateKeySession","url","serverURL","laURL","getLicenseServerUrlFromMediaInfo","psshData","getPSSHData","getLicenseServerURLFromInitData","getServerURLFromMessage","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE","reqHeaders","withCredentials","updateHeaders","headers","key","toLowerCase","httpRequestHeaders","getRequestHeadersFromMessage","reportError","xhr","errorMsg","response","getErrorResponse","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE","statusText","readyState","onLoad","licenseResponse","LicenseResponse","responseURL","Utils","parseHttpHeaders","getAllResponseHeaders","applyFilters","then","licenseMessage","getLicenseMessage","onAbort","onError","reqPayload","getLicenseRequestFromMessage","reqMethod","getHTTPMethod","responseType","getResponseType","timeout","isNaN","httpTimeout","licenseRequest","LicenseRequest","doLicenseRequest","request","retriesCount","XMLHttpRequest","cmcdParams","getQueryParameter","HTTPRequest","LICENSE","addAditionalQueryParameterToUrl","open","method","setRequestHeader","retryRequest","setTimeout","onload","warn","ontimeout","onerror","onabort","LICENSE_REQUEST_SENDING","payload","send","retry","initDataType","abInitData","ArrayBuffer","isView","String","fromCharCode","apply","Uint8Array","getSupportedKeySystems","getKeySystems","setKeySystems","keySystems","setLicenseRequestFilters","filters","setLicenseResponseFilters","param","Promise","resolve","reduce","prev","next","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"ProtectionController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport MediaCapability from '../vo/MediaCapability';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport LicenseRequest from '../vo/LicenseRequest';\r\nimport LicenseResponse from '../vo/LicenseResponse';\r\nimport { HTTPRequest } from '../../vo/metrics/HTTPRequest';\r\nimport Utils from '../../../core/Utils';\r\n\r\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\r\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\r\n\r\nconst LICENSE_SERVER_REQUEST_RETRIES = 3;\r\nconst LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;\r\nconst LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8000;\r\n\r\n/**\r\n * @module ProtectionController\r\n * @description Provides access to media protection information and functionality.  Each\r\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\r\n * which encapsulates a set of protection information (EME APIs, selected key system,\r\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\r\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\r\n * functionality provided in {@link ProtectionKeyController}.\r\n * @todo ProtectionController does almost all of its tasks automatically after init() is\r\n * called.  Applications might want more control over this process and want to go through\r\n * each step manually (key system selection, session creation, session maintenance).\r\n * @param {Object} config\r\n */\r\n\r\nfunction ProtectionController(config) {\r\n\r\n    config = config || {};\r\n    const protectionKeyController = config.protectionKeyController;\r\n    let protectionModel = config.protectionModel;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const BASE64 = config.BASE64;\r\n    const constants = config.constants;\r\n    let needkeyRetries = [];\r\n    const cmcdModel = config.cmcdModel;\r\n\r\n    let instance,\r\n        logger,\r\n        pendingNeedKeyData,\r\n        mediaInfoArr,\r\n        protDataSet,\r\n        sessionType,\r\n        robustnessLevel,\r\n        keySystem,\r\n        licenseRequestFilters,\r\n        licenseResponseFilters;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        pendingNeedKeyData = [];\r\n        mediaInfoArr = [];\r\n        sessionType = 'temporary';\r\n        robustnessLevel = '';\r\n        licenseRequestFilters = [];\r\n        licenseResponseFilters = [];\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize this protection system with a given audio\r\n     * or video stream information.\r\n     *\r\n     * @param {StreamInfo} [mediaInfo] Media information\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @todo This API will change when we have better support for allowing applications\r\n     * to select different adaptation sets for playback.  Right now it is clunky for\r\n     * applications to create {@link StreamInfo} with the right information,\r\n     * @ignore\r\n     */\r\n    function initializeForMedia(mediaInfo) {\r\n        // Not checking here if a session for similar KS/KID combination is already created\r\n        // because still don't know which keysystem will be selected.\r\n        // Once Keysystem is selected and before creating the session, we will do that check\r\n        // so we create the strictly necessary DRM sessions\r\n        if (!mediaInfo) {\r\n            throw new Error('mediaInfo can not be null or undefined');\r\n        }\r\n\r\n        checkConfig();\r\n\r\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\r\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\r\n        mediaInfoArr.push(mediaInfo);\r\n\r\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\r\n        // and video will be the same.  Just use one valid MediaInfo object\r\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\r\n        if (supportedKS && supportedKS.length > 0) {\r\n            selectKeySystem(supportedKS, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all entries from the mediaInfoArr array for a specific stream id\r\n     * @param {String} streamId\r\n     */\r\n    function clearMediaInfoArrayByStreamId(streamId) {\r\n        mediaInfoArr = mediaInfoArr.filter((mediaInfo) => {\r\n            return mediaInfo.streamInfo.id !== streamId;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a set of supported key systems and CENC initialization data\r\n     * from the given array of ContentProtection elements.  Only\r\n     * key systems that are supported by this player will be returned.\r\n     * Key systems are returned in priority order (highest first).\r\n     *\r\n     * @param {Array.<Object>} cps - array of content protection elements parsed\r\n     * from the manifest\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getSupportedKeySystemsFromContentProtection(cps) {\r\n        checkConfig();\r\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\r\n    }\r\n\r\n    /**\r\n     * Create a new key session associated with the given initialization data from\r\n     * the MPD or from the PSSH box in the media\r\n     *\r\n     * @param {ArrayBuffer} initData the initialization data\r\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionCreated\r\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\r\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\r\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\r\n     * to come up to speed with the latest EME standard\r\n     * @ignore\r\n     */\r\n    function createKeySession(initData, cdmData) {\r\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\r\n        const protData = getProtData(keySystem);\r\n        if (initDataForKS) {\r\n\r\n            // Check for duplicate initData\r\n            if (_isInitDataDuplicate(initDataForKS)) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\r\n            } catch (error) {\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                    data: null,\r\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)\r\n                });\r\n            }\r\n        } else if (initData) {\r\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\r\n        } else {\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                data: null,\r\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + (keySystem ? keySystem.systemString : null) + '.  needkey/encrypted event contains no initData corresponding to that key system!')\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the provided init data is equal to one of the existing init data values\r\n     * @param {any} initDataForKS\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    function _isInitDataDuplicate(initDataForKS) {\r\n\r\n        if (!initDataForKS) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const currentInitData = protectionModel.getAllInitData();\r\n            for (let i = 0; i < currentInitData.length; i++) {\r\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\r\n                    logger.debug('DRM: Ignoring initData because we have already seen it!');\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a key session with the given session ID from persistent storage.  This\r\n     * essentially creates a new key session\r\n     *\r\n     * @param {string} sessionID\r\n     * @param {string} initData\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionCreated\r\n     * @ignore\r\n     */\r\n    function loadKeySession(sessionID, initData) {\r\n        checkConfig();\r\n        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));\r\n    }\r\n\r\n    /**\r\n     * Removes the given key session from persistent storage and closes the session\r\n     * as if {@link ProtectionController#closeKeySession}\r\n     * was called\r\n     *\r\n     * @param {SessionToken} sessionToken the session\r\n     * token\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionRemoved\r\n     * @fires ProtectionController#KeySessionClosed\r\n     * @ignore\r\n     */\r\n    function removeKeySession(sessionToken) {\r\n        checkConfig();\r\n        protectionModel.removeKeySession(sessionToken);\r\n    }\r\n\r\n    /**\r\n     * Closes the key session and releases all associated decryption keys.  These\r\n     * keys will no longer be available for decrypting media\r\n     *\r\n     * @param {SessionToken} sessionToken the session\r\n     * token\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionClosed\r\n     * @ignore\r\n     */\r\n    function closeKeySession(sessionToken) {\r\n        checkConfig();\r\n        protectionModel.closeKeySession(sessionToken);\r\n    }\r\n\r\n    /**\r\n     * Sets a server certificate for use by the CDM when signing key messages\r\n     * intended for a particular license server.  This will fire\r\n     * an error event if a key system has not yet been selected.\r\n     *\r\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\r\n     * certificate\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#ServerCertificateUpdated\r\n     */\r\n    function setServerCertificate(serverCertificate) {\r\n        checkConfig();\r\n        protectionModel.setServerCertificate(serverCertificate);\r\n    }\r\n\r\n    /**\r\n     * Associate this protection system with the given HTMLMediaElement.  This\r\n     * causes the system to register for needkey/encrypted events from the given\r\n     * element and provides a destination for setting of MediaKeys\r\n     *\r\n     * @param {HTMLMediaElement} element the media element to which the protection\r\n     * system should be associated\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setMediaElement(element) {\r\n        checkConfig();\r\n        if (element) {\r\n            protectionModel.setMediaElement(element);\r\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\r\n        } else if (element === null) {\r\n            protectionModel.setMediaElement(element);\r\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\r\n     * \"persistent-license\".  Default is \"temporary\".\r\n     *\r\n     * @param {string} value the session type\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setSessionType(value) {\r\n        sessionType = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\r\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\r\n     *\r\n     * @param {string} level the robustness level\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setRobustnessLevel(level) {\r\n        robustnessLevel = level;\r\n    }\r\n\r\n    /**\r\n     * Attach KeySystem-specific data to use for license acquisition with EME\r\n     *\r\n     * @param {Object} data an object containing property names corresponding to\r\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\r\n     * being instances of {@link ProtectionData}\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function setProtectionData(data) {\r\n        protDataSet = data;\r\n        protectionKeyController.setProtectionData(data);\r\n    }\r\n\r\n    /**\r\n     * Stop method is called when current playback is stopped/resetted.\r\n     *\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function stop() {\r\n        if (protectionModel) {\r\n            protectionModel.stop();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Destroys all protection data associated with this protection set.  This includes\r\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\r\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\r\n     * associated with a HTMLMediaElement, it will be detached from that element.\r\n     *\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function reset() {\r\n        checkConfig();\r\n\r\n        licenseRequestFilters = [];\r\n        licenseResponseFilters = [];\r\n\r\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\r\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\r\n\r\n        setMediaElement(null);\r\n\r\n        keySystem = undefined;\r\n\r\n        if (protectionModel) {\r\n            protectionModel.reset();\r\n            protectionModel = null;\r\n        }\r\n\r\n        needkeyRetries.forEach(retryTimeout => clearTimeout(retryTimeout));\r\n        needkeyRetries = [];\r\n\r\n        mediaInfoArr = [];\r\n    }\r\n\r\n    ///////////////\r\n    // Private\r\n    ///////////////\r\n\r\n    function getProtData(keySystem) {\r\n        let protData = null;\r\n        if (keySystem) {\r\n            const keySystemString = keySystem.systemString;\r\n\r\n            if (protDataSet) {\r\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\r\n            }\r\n        }\r\n        return protData;\r\n    }\r\n\r\n    function getKeySystemConfiguration(keySystem) {\r\n        const protData = getProtData(keySystem);\r\n        const audioCapabilities = [];\r\n        const videoCapabilities = [];\r\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\r\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\r\n        const ksSessionType = getSessionType(keySystem);\r\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\r\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\r\n\r\n        mediaInfoArr.forEach((media) => {\r\n            if (media.type === constants.AUDIO) {\r\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\r\n            } else if (media.type === constants.VIDEO) {\r\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\r\n            }\r\n        });\r\n\r\n        return new KeySystemConfiguration(\r\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\r\n            persistentState,\r\n            [ksSessionType]);\r\n    }\r\n\r\n    function getSessionType(keySystem) {\r\n        const protData = getProtData(keySystem);\r\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\r\n        return ksSessionType;\r\n    }\r\n\r\n    function selectKeySystem(supportedKS, fromManifest) {\r\n\r\n        // Reorder key systems according to priority order provided in protectionData\r\n        supportedKS = supportedKS.sort((ksA, ksB) => {\r\n            let indexA = (protDataSet && protDataSet[ksA.ks.systemString] && protDataSet[ksA.ks.systemString].priority >= 0) ? protDataSet[ksA.ks.systemString].priority : supportedKS.length;\r\n            let indexB = (protDataSet && protDataSet[ksB.ks.systemString] && protDataSet[ksB.ks.systemString].priority >= 0) ? protDataSet[ksB.ks.systemString].priority : supportedKS.length;\r\n            return indexA - indexB;\r\n        });\r\n\r\n\r\n        // First time, so we need to select a key system\r\n        if (keySystem === undefined) {\r\n            _selectInitialKeySystem(supportedKS, fromManifest);\r\n        }\r\n\r\n        // We already selected a key system. we only need to trigger a new license exchange if the init data has changed\r\n        else if (keySystem) {\r\n            _selectWithExistingKeySystem(supportedKS, fromManifest);\r\n        }\r\n\r\n        // We are in the process of selecting a key system, so just save the data which might be coming from additional AdaptationSets.\r\n        else {\r\n            pendingNeedKeyData.push(supportedKS);\r\n        }\r\n    }\r\n\r\n    function _selectWithExistingKeySystem(supportedKS, fromManifest) {\r\n        const self = this;\r\n        const requestedKeySystems = [];\r\n\r\n        const ksIdx = supportedKS.findIndex((entry) => {\r\n            return entry.ks === keySystem;\r\n        });\r\n\r\n        if (ksIdx === -1 || !supportedKS[ksIdx].initData) {\r\n            return;\r\n        }\r\n\r\n        //  we only need to call this if the init data has changed\r\n        const initDataForKs = CommonEncryption.getPSSHForKeySystem(keySystem, supportedKS[ksIdx].initData);\r\n        if (_isInitDataDuplicate(initDataForKs)) {\r\n            return;\r\n        }\r\n\r\n        requestedKeySystems.push({\r\n            ks: supportedKS[ksIdx].ks,\r\n            configs: [getKeySystemConfiguration(keySystem)]\r\n        });\r\n\r\n        // Ensure that we would be granted key system access using the key\r\n        // system and codec information\r\n        const onKeySystemAccessComplete = function (event) {\r\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n            if (event.error) {\r\n                if (!fromManifest) {\r\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, { error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error) });\r\n                }\r\n            } else {\r\n                logger.info('DRM: KeySystem Access Granted');\r\n                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: event.data });\r\n                const protData = getProtData(keySystem);\r\n                if (protectionKeyController.isClearKey(keySystem)) {\r\n                    // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\r\n                    // initData and overwrite possible initData indicated in encrypted event (EME)\r\n                    if (protData && protData.hasOwnProperty('clearkeys')) {\r\n                        const initData = { kids: Object.keys(protData.clearkeys) };\r\n                        supportedKS[ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\r\n                    }\r\n                }\r\n                if (supportedKS[ksIdx].sessionId) {\r\n                    // Load MediaKeySession with sessionId\r\n                    loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);\r\n                } else if (supportedKS[ksIdx].initData) {\r\n                    // Create new MediaKeySession with initData\r\n                    createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\r\n                }\r\n            }\r\n        };\r\n\r\n        eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n        protectionModel.requestKeySystemAccess(requestedKeySystems);\r\n    }\r\n\r\n    function _selectInitialKeySystem(supportedKS, fromManifest) {\r\n        const self = this;\r\n        const requestedKeySystems = [];\r\n        let ksIdx;\r\n\r\n        // First time through, so we need to select a key system\r\n        keySystem = null;\r\n        pendingNeedKeyData.push(supportedKS);\r\n\r\n        // Add all key systems to our request list since we have yet to select a key system\r\n        for (let i = 0; i < supportedKS.length; i++) {\r\n            requestedKeySystems.push({\r\n                ks: supportedKS[i].ks,\r\n                configs: [getKeySystemConfiguration(supportedKS[i].ks)]\r\n            });\r\n        }\r\n\r\n        let keySystemAccess;\r\n        const onKeySystemAccessComplete = function (event) {\r\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n            if (event.error) {\r\n                keySystem = undefined;\r\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n                if (!fromManifest) {\r\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\r\n                        data: null,\r\n                        error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)\r\n                    });\r\n                }\r\n            } else {\r\n                keySystemAccess = event.data;\r\n                logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\r\n                protectionModel.selectKeySystem(keySystemAccess);\r\n            }\r\n        };\r\n        var onKeySystemSelected = function (event) {\r\n            eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n            if (!event.error) {\r\n                if (!protectionModel) {\r\n                    return;\r\n                }\r\n                keySystem = protectionModel.getKeySystem();\r\n                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: keySystemAccess });\r\n                // Set server certificate from protData\r\n                const protData = getProtData(keySystem);\r\n                if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\r\n                    protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\r\n                }\r\n\r\n                // Create key session for the remaining AdaptationSets which have been added to pendingNeedKeyData\r\n                for (let i = 0; i < pendingNeedKeyData.length; i++) {\r\n                    for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\r\n                        if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\r\n                            if (protectionKeyController.isClearKey(keySystem)) {\r\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\r\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\r\n                                if (protData && protData.hasOwnProperty('clearkeys')) {\r\n                                    const initData = { kids: Object.keys(protData.clearkeys) };\r\n                                    pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\r\n                                }\r\n                            }\r\n                            if (pendingNeedKeyData[i][ksIdx].sessionId) {\r\n                                // Load MediaKeySession with sessionId\r\n                                loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);\r\n                            } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\r\n                                // Create new MediaKeySession with initData\r\n                                createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                keySystem = undefined;\r\n                if (!fromManifest) {\r\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\r\n                        data: null,\r\n                        error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n        eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n        protectionModel.requestKeySystemAccess(requestedKeySystems);\r\n    }\r\n\r\n    function sendLicenseRequestCompleteEvent(data, error) {\r\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, { data: data, error: error });\r\n    }\r\n\r\n    function onKeyStatusChanged(e) {\r\n        if (e.error) {\r\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: null, error: e.error });\r\n        } else {\r\n            logger.debug('DRM: key status = ' + e.status);\r\n        }\r\n    }\r\n\r\n    function onKeyMessage(e) {\r\n        logger.debug('DRM: onKeyMessage');\r\n\r\n        // Dispatch event to applications indicating we received a key message\r\n        const keyMessage = e.data;\r\n        eventBus.trigger(events.KEY_MESSAGE, { data: keyMessage });\r\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\r\n        const message = keyMessage.message;\r\n        const sessionToken = keyMessage.sessionToken;\r\n        const protData = getProtData(keySystem);\r\n        const keySystemString = keySystem ? keySystem.systemString : null;\r\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\r\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\r\n\r\n        // Ensure message from CDM is not empty\r\n        if (!message || message.byteLength === 0) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        // Message not destined for license server\r\n        if (!licenseServerData) {\r\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\r\n            sendLicenseRequestCompleteEvent(eventData);\r\n            return;\r\n        }\r\n\r\n        // Perform any special handling for ClearKey\r\n        if (protectionKeyController.isClearKey(keySystem)) {\r\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\r\n            if (clearkeys) {\r\n                logger.debug('DRM: ClearKey license request handled by application!');\r\n                sendLicenseRequestCompleteEvent(eventData);\r\n                protectionModel.updateKeySession(sessionToken, clearkeys);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // All remaining key system scenarios require a request to a remote license server\r\n        // Determine license server URL\r\n        let url = null;\r\n        if (protData && protData.serverURL) {\r\n            const serverURL = protData.serverURL;\r\n            if (typeof serverURL === 'string' && serverURL !== '') {\r\n                url = serverURL;\r\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\r\n                url = serverURL[messageType];\r\n            }\r\n        } else if (protData && protData.laURL && protData.laURL !== '') {\r\n            // TODO: Deprecated!\r\n            url = protData.laURL;\r\n        } else {\r\n            // For clearkey use the url defined in the manifest\r\n            if (protectionKeyController.isClearKey(keySystem)) {\r\n                url = keySystem.getLicenseServerUrlFromMediaInfo(mediaInfoArr);\r\n            } else {\r\n                const psshData = CommonEncryption.getPSSHData(sessionToken.initData);\r\n                url = keySystem.getLicenseServerURLFromInitData(psshData);\r\n                if (!url) {\r\n                    url = e.data.laURL;\r\n                }\r\n            }\r\n        }\r\n        // Possibly update or override the URL based on the message\r\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\r\n\r\n        // Ensure valid license server URL\r\n        if (!url) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        // Set optional XMLHttpRequest headers from protection data and message\r\n        const reqHeaders = {};\r\n        let withCredentials = false;\r\n        const updateHeaders = function (headers) {\r\n            if (headers) {\r\n                for (const key in headers) {\r\n                    if ('authorization' === key.toLowerCase()) {\r\n                        withCredentials = true;\r\n                    }\r\n                    reqHeaders[key] = headers[key];\r\n                }\r\n            }\r\n        };\r\n        if (protData) {\r\n            updateHeaders(protData.httpRequestHeaders);\r\n        }\r\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\r\n\r\n        // Overwrite withCredentials property from protData if present\r\n        if (protData && typeof protData.withCredentials == 'boolean') {\r\n            withCredentials = protData.withCredentials;\r\n        }\r\n\r\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\r\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));\r\n        };\r\n\r\n        const onLoad = function (xhr) {\r\n            if (!protectionModel) {\r\n                return;\r\n            }\r\n\r\n            if (xhr.status === 200) {\r\n                let licenseResponse = new LicenseResponse(xhr.responseURL, Utils.parseHttpHeaders(xhr.getAllResponseHeaders ? xhr.getAllResponseHeaders() : null), xhr.response);\r\n                applyFilters(licenseResponseFilters, licenseResponse).then(() => {\r\n                    const licenseMessage = licenseServerData.getLicenseMessage(licenseResponse.data, keySystemString, messageType);\r\n                    if (licenseMessage !== null) {\r\n                        sendLicenseRequestCompleteEvent(eventData);\r\n                        protectionModel.updateKeySession(sessionToken, licenseMessage);\r\n                    } else {\r\n                        reportError(xhr, eventData, keySystemString, messageType);\r\n                    }\r\n                });\r\n            } else {\r\n                reportError(xhr, eventData, keySystemString, messageType);\r\n            }\r\n        };\r\n\r\n        const onAbort = function (xhr) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\r\n        };\r\n\r\n        const onError = function (xhr) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\r\n        };\r\n\r\n        const reqPayload = keySystem.getLicenseRequestFromMessage(message);\r\n        const reqMethod = licenseServerData.getHTTPMethod(messageType);\r\n        const responseType = licenseServerData.getResponseType(keySystemString, messageType);\r\n        const timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;\r\n        const sessionId = sessionToken.getSessionID() || null;\r\n\r\n        let licenseRequest = new LicenseRequest(url, reqMethod, responseType, reqHeaders, withCredentials, messageType, sessionId, reqPayload);\r\n        applyFilters(licenseRequestFilters, licenseRequest).then(() => {\r\n            doLicenseRequest(licenseRequest, LICENSE_SERVER_REQUEST_RETRIES, timeout, onLoad, onAbort, onError);\r\n        });\r\n    }\r\n\r\n    // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience\r\n    function doLicenseRequest(request, retriesCount, timeout, onLoad, onAbort, onError) {\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        const cmcdParams = cmcdModel.getQueryParameter({\r\n            url: request.url,\r\n            type: HTTPRequest.LICENSE\r\n        });\r\n\r\n        if (cmcdParams) {\r\n            request.url = Utils.addAditionalQueryParameterToUrl(request.url, [cmcdParams]);\r\n        }\r\n\r\n        xhr.open(request.method, request.url, true);\r\n        xhr.responseType = request.responseType;\r\n        xhr.withCredentials = request.withCredentials;\r\n        if (timeout > 0) {\r\n            xhr.timeout = timeout;\r\n        }\r\n        for (const key in request.headers) {\r\n            xhr.setRequestHeader(key, request.headers[key]);\r\n        }\r\n\r\n        const retryRequest = function () {\r\n            // fail silently and retry\r\n            retriesCount--;\r\n            setTimeout(function () {\r\n                doLicenseRequest(request, retriesCount, timeout, onLoad, onAbort, onError);\r\n            }, LICENSE_SERVER_REQUEST_RETRY_INTERVAL);\r\n        };\r\n\r\n        xhr.onload = function () {\r\n            if (this.status === 200 || retriesCount <= 0) {\r\n                onLoad(this);\r\n            } else {\r\n                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);\r\n                retryRequest();\r\n            }\r\n        };\r\n\r\n        xhr.ontimeout = xhr.onerror = function () {\r\n            if (retriesCount <= 0) {\r\n                onError(this);\r\n            } else {\r\n                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);\r\n                retryRequest();\r\n            }\r\n        };\r\n\r\n        xhr.onabort = function () {\r\n            onAbort(this);\r\n        };\r\n\r\n        // deprecated, to be removed\r\n        eventBus.trigger(events.LICENSE_REQUEST_SENDING, {\r\n            url: request.url,\r\n            headers: request.headers,\r\n            payload: request.data,\r\n            sessionId: request.sessionId\r\n        });\r\n\r\n        xhr.send(request.data);\r\n    }\r\n\r\n    function onNeedKey(event, retry) {\r\n        logger.debug('DRM: onNeedKey');\r\n        // Ignore non-cenc initData\r\n        if (event.key.initDataType !== 'cenc') {\r\n            logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\r\n            return;\r\n        }\r\n\r\n        if (mediaInfoArr.length === 0) {\r\n            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\r\n            retry = typeof retry === 'undefined' ? 1 : retry + 1;\r\n            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\r\n                needkeyRetries.push(setTimeout(() => {\r\n                    onNeedKey(event, retry);\r\n                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\r\n                return;\r\n            }\r\n\r\n        }\r\n\r\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\r\n        // Convert to ArrayBuffer\r\n        let abInitData = event.key.initData;\r\n        if (ArrayBuffer.isView(abInitData)) {\r\n            abInitData = abInitData.buffer;\r\n        }\r\n\r\n        // If key system has already been selected and initData already seen, then do nothing\r\n        if (keySystem) {\r\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\r\n            if (initDataForKS) {\r\n\r\n                // Check for duplicate initData\r\n                if (_isInitDataDuplicate(initDataForKS)) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\r\n\r\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\r\n        if (supportedKS.length === 0) {\r\n            logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\r\n            return;\r\n        }\r\n\r\n        selectKeySystem(supportedKS, false);\r\n    }\r\n\r\n    function getKeySystems() {\r\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\r\n    }\r\n\r\n    function setKeySystems(keySystems) {\r\n        if (protectionKeyController) {\r\n            protectionKeyController.setKeySystems(keySystems);\r\n        }\r\n    }\r\n\r\n    function setLicenseRequestFilters (filters) {\r\n        licenseRequestFilters = filters;\r\n    }\r\n\r\n    function setLicenseResponseFilters (filters) {\r\n        licenseResponseFilters = filters;\r\n    }\r\n\r\n    function applyFilters (filters, param) {\r\n        if (!filters) return Promise.resolve();\r\n        return filters.reduce((prev, next) => {\r\n            return prev.then(() => {\r\n                return next(param);\r\n            });\r\n        }, Promise.resolve());\r\n    }\r\n\r\n    instance = {\r\n        initializeForMedia: initializeForMedia,\r\n        clearMediaInfoArrayByStreamId: clearMediaInfoArrayByStreamId,\r\n        createKeySession: createKeySession,\r\n        loadKeySession: loadKeySession,\r\n        removeKeySession: removeKeySession,\r\n        closeKeySession: closeKeySession,\r\n        setServerCertificate: setServerCertificate,\r\n        setMediaElement: setMediaElement,\r\n        setSessionType: setSessionType,\r\n        setRobustnessLevel: setRobustnessLevel,\r\n        setProtectionData: setProtectionData,\r\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\r\n        getKeySystems: getKeySystems,\r\n        setKeySystems: setKeySystems,\r\n        setLicenseRequestFilters: setLicenseRequestFilters,\r\n        setLicenseResponseFilters: setLicenseResponseFilters,\r\n        stop: stop,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nProtectionController.__dashjs_factory_name = 'ProtectionController';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\r\n"]}