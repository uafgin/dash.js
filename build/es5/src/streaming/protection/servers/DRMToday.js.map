{"version":3,"sources":["../../../../../../src/streaming/protection/servers/DRMToday.js"],"names":["DRMToday","config","BASE64","keySystems","ProtectionConstants","WIDEVINE_KEYSTEM_STRING","responseType","getLicenseMessage","response","decodeArray","license","getErrorResponse","PLAYREADY_KEYSTEM_STRING","String","fromCharCode","apply","Uint8Array","instance","checkConfig","hasOwnProperty","Error","getServerURLFromMessage","url","getHTTPMethod","getResponseType","keySystemStr","serverResponse","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"sEAsCA,wE,0JAEA,QAASA,SAAT,CAAkBC,MAAlB,CAA0B,CAEtBA,OAASA,QAAU,EAAnB,CACA,GAAMC,QAASD,OAAOC,MAAtB,CAEA,GAAMC,YAAa,EAAnB,CACAA,WAAWC,8BAAoBC,uBAA/B,EAA0D,CACtDC,aAAc,MADwC,CAEtDC,kBAAmB,2BAAUC,QAAV,CAAoB,CACnC,MAAON,QAAOO,WAAP,CAAmBD,SAASE,OAA5B,CAAP,CACH,CAJqD,CAKtDC,iBAAkB,0BAAUH,QAAV,CAAoB,CAClC,MAAOA,SAAP,CACH,CAPqD,CAA1D,CASAL,WAAWC,8BAAoBQ,wBAA/B,EAA2D,CACvDN,aAAc,aADyC,CAEvDC,kBAAmB,2BAAUC,QAAV,CAAoB,CACnC,MAAOA,SAAP,CACH,CAJsD,CAKvDG,iBAAkB,0BAAUH,QAAV,CAAoB,CAClC,MAAOK,QAAOC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,CAAgC,GAAIC,WAAJ,CAAeR,QAAf,CAAhC,CAAP,CACH,CAPsD,CAA3D,CAUA,GAAIS,gBAAJ,CAEA,QAASC,YAAT,EAAuB,CACnB,GAAI,CAAChB,MAAD,EAAW,CAACA,OAAOiB,cAAP,CAAsB,aAAtB,CAAhB,CAAsD,CAClD,KAAM,IAAIC,MAAJ,CAAU,6BAAV,CAAN,CACH,CACJ,CAED,QAASC,wBAAT,CAAiCC,GAAI,0BAArC,CAAiE,CAC7D,MAAOA,IAAP,CACH,CAED,QAASC,cAAT,EAAuB,eAAiB,CACpC,MAAO,MAAP,CACH,CAED,QAASC,gBAAT,CAAyBC,YAAY,iBAArC,CAAwD,CACpD,MAAOtB,YAAWsB,YAAX,EAAyBnB,YAAhC,CACH,CAED,QAASC,kBAAT,CAA2BmB,cAA3B,CAA2CD,YAAY,iBAAvD,CAA0E,CACtEP,cACA,MAAOf,YAAWsB,YAAX,EAAyBlB,iBAAzB,CAA2CmB,cAA3C,CAAP,CACH,CAED,QAASf,iBAAT,CAA0Be,cAA1B,CAA0CD,YAAY,iBAAtD,CAAyE,CACrE,MAAOtB,YAAWsB,YAAX,EAAyBd,gBAAzB,CAA0Ce,cAA1C,CAAP,CACH,CAEDT,SAAW,CACPI,wBAAyBA,uBADlB,CAEPE,cAAeA,aAFR,CAGPC,gBAAiBA,eAHV,CAIPjB,kBAAmBA,iBAJZ,CAKPI,iBAAkBA,gBALX,CAAX,CAQA,MAAOM,SAAP,CACH,CAvGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BA;;;;;GA0EAjB,SAAS2B,qBAAT,CAAiC,UAAjC,C,gBACeC,OAAOC,YAAP,CAAoBC,mBAApB,CAAwC9B,QAAxC,C,CAAmD","file":"DRMToday.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * CastLabs DRMToday License Server implementation\r\n *\r\n * @implements LicenseServer\r\n * @class\r\n */\r\n\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nfunction DRMToday(config) {\r\n\r\n    config = config || {};\r\n    const BASE64 = config.BASE64;\r\n\r\n    const keySystems = {};\r\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\r\n        responseType: 'json',\r\n        getLicenseMessage: function (response) {\r\n            return BASE64.decodeArray(response.license);\r\n        },\r\n        getErrorResponse: function (response) {\r\n            return response;\r\n        }\r\n    };\r\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\r\n        responseType: 'arraybuffer',\r\n        getLicenseMessage: function (response) {\r\n            return response;\r\n        },\r\n        getErrorResponse: function (response) {\r\n            return String.fromCharCode.apply(null, new Uint8Array(response));\r\n        }\r\n    };\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    function getServerURLFromMessage(url /*, message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(keySystemStr/*, messageType*/) {\r\n        return keySystems[keySystemStr].responseType;\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\r\n        checkConfig();\r\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\r\n    }\r\n\r\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\r\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage: getServerURLFromMessage,\r\n        getHTTPMethod: getHTTPMethod,\r\n        getResponseType: getResponseType,\r\n        getLicenseMessage: getLicenseMessage,\r\n        getErrorResponse: getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nDRMToday.__dashjs_factory_name = 'DRMToday';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */"]}