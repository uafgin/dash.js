{"version":3,"sources":["../../../../../src/streaming/protection/CommonEncryption.js"],"names":["CommonEncryption","cpArray","retVal","i","length","cp","schemeIdUri","toLowerCase","value","pssh","offset","view","DataView","version","getUint8","getUint32","slice","keySystem","initData","psshList","parsePSSHList","hasOwnProperty","uuid","cpData","BASE64","__text","replace","decodeArray","buffer","data","undefined","dv","done","byteCursor","size","nextBox","systemID","psshDataSize","boxStart","byteLength","val","toString"],"mappings":"qtBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BA;;;MAIMA,iB,qJACF;;;;;;;gDAQiCC,O,CAAS,CACtC,GAAIC,QAAS,IAAb,CACA,IAAK,GAAIC,GAAI,CAAb,CAAgBA,EAAIF,QAAQG,MAA5B,CAAoC,EAAED,CAAtC,CAAyC,CACrC,GAAIE,IAAKJ,QAAQE,CAAR,CAAT,CACA,GAAIE,GAAGC,WAAH,CAAeC,WAAf,KAAiC,kCAAjC,GACCF,GAAGG,KAAH,CAASD,WAAT,KAA2B,MAA3B,EAAqCF,GAAGG,KAAH,CAASD,WAAT,KAA2B,MADjE,CAAJ,CAEIL,OAASG,EAAT,CACP,CACD,MAAOH,OAAP,CACH,CAED;;;;;uDAMmBO,I,CAAM,CACrB,GAAIC,QAAS,CAAb,CAAgB;AAChB,GAAIC,MAAO,GAAIC,SAAJ,CAAaH,IAAb,CAAX,CAEA;AACA,GAAII,SAAUF,KAAKG,QAAL,CAAcJ,MAAd,CAAd,CAEAA,QAAU,EAAV,CAAc;AAEd,GAAIG,QAAU,CAAd,CAAiB,CACbH,QAAU,EAAK,GAAKC,KAAKI,SAAL,CAAeL,MAAf,CAApB,CAA6C;AAChD,CAEDA,QAAU,CAAV,CAAa;AACb,MAAOD,MAAKO,KAAL,CAAWN,MAAX,CAAP,CACH,CAED;;;;;;;;;uEAU2BO,S,CAAWC,Q,CAAU,CAC5C,GAAIC,UAAWnB,iBAAiBoB,aAAjB,CAA+BF,QAA/B,CAAf,CACA,GAAID,WAAaE,SAASE,cAAT,CAAwBJ,UAAUK,IAAV,CAAef,WAAf,EAAxB,CAAjB,CAAwE,CACpE,MAAOY,UAASF,UAAUK,IAAV,CAAef,WAAf,EAAT,CAAP,CACH,CACD,MAAO,KAAP,CACH,CAED;;;;;;;qGAQ0CgB,M,CAAQC,M,CAAQ,CACtD,GAAI,QAAUD,OAAd,CAAsB,CAElB;AACAA,OAAOd,IAAP,CAAYgB,MAAZ,CAAqBF,OAAOd,IAAP,CAAYgB,MAAZ,CAAmBC,OAAnB,CAA2B,WAA3B,CAAwC,EAAxC,EAA4CA,OAA5C,CAAoD,MAApD,CAA4D,EAA5D,CAArB,CAEA,MAAOF,QAAOG,WAAP,CAAmBJ,OAAOd,IAAP,CAAYgB,MAA/B,EAAuCG,MAA9C,CACH,CACD,MAAO,KAAP,CACH,CAED;;;;;;;;2DASqBC,I,CAAM,CAEvB,GAAIA,OAAS,IAAT,EAAiBA,OAASC,SAA9B,CACI,MAAO,EAAP,CAEJ,GAAIC,IAAK,GAAInB,SAAJ,CAAaiB,KAAKD,MAAL,EAAeC,IAA5B,CAAT,CAA4C;AAC5C,GAAIG,MAAO,KAAX,CACA,GAAIvB,MAAO,EAAX,CAEA;AACA,GAAIwB,YAAa,CAAjB,CACA,MAAO,CAACD,IAAR,CAAc,CAEV,GAAIE,YAAJ,CACIC,cADJ,CAEItB,cAFJ,CAGIuB,eAHJ,CAIIC,mBAJJ,CAKA,GAAIC,UAAWL,UAAf,CAEA,GAAIA,YAAcF,GAAGH,MAAH,CAAUW,UAA5B,CACI,MAEJ,cACAL,KAAOH,GAAGhB,SAAH,CAAakB,UAAb,CAAP,CACAE,QAAUF,WAAaC,IAAvB,CACAD,YAAc,CAAd,CAEA,iBACA,GAAIF,GAAGhB,SAAH,CAAakB,UAAb,IAA6B,UAAjC,CAA6C,CACzCA,WAAaE,OAAb,CACA,SACH,CACDF,YAAc,CAAd,CAEA,4BACApB,QAAUkB,GAAGjB,QAAH,CAAYmB,UAAZ,CAAV,CACA,GAAIpB,UAAY,CAAZ,EAAiBA,UAAY,CAAjC,CAAoC,CAChCoB,WAAaE,OAAb,CACA,SACH,CACDF,aAEAA,YAAc,CAAd,CAAiB,gBAEjB;AACAG,SAAW,EAAX,CACA,GAAIjC,SAAJ,CAAOqC,UAAP,CACA,IAAKrC,EAAI,CAAT,CAAYA,EAAI,CAAhB,CAAmBA,GAAnB,CAAwB,CACpBqC,IAAMT,GAAGjB,QAAH,CAAYmB,WAAa9B,CAAzB,EAA4BsC,QAA5B,CAAqC,EAArC,CAAN,CACAL,UAAaI,IAAIpC,MAAJ,GAAe,CAAhB,CAAqB,IAAMoC,GAA3B,CAAiCA,GAA7C,CACH,CACDP,YAAc,CAAd,CACAG,UAAY,GAAZ,CACA,IAAKjC,EAAI,CAAT,CAAYA,EAAI,CAAhB,CAAmBA,GAAnB,CAAwB,CACpBqC,IAAMT,GAAGjB,QAAH,CAAYmB,WAAa9B,CAAzB,EAA4BsC,QAA5B,CAAqC,EAArC,CAAN,CACAL,UAAaI,IAAIpC,MAAJ,GAAe,CAAhB,CAAqB,IAAMoC,GAA3B,CAAiCA,GAA7C,CACH,CACDP,YAAc,CAAd,CACAG,UAAY,GAAZ,CACA,IAAKjC,EAAI,CAAT,CAAYA,EAAI,CAAhB,CAAmBA,GAAnB,CAAwB,CACpBqC,IAAMT,GAAGjB,QAAH,CAAYmB,WAAa9B,CAAzB,EAA4BsC,QAA5B,CAAqC,EAArC,CAAN,CACAL,UAAaI,IAAIpC,MAAJ,GAAe,CAAhB,CAAqB,IAAMoC,GAA3B,CAAiCA,GAA7C,CACH,CACDP,YAAc,CAAd,CACAG,UAAY,GAAZ,CACA,IAAKjC,EAAI,CAAT,CAAYA,EAAI,CAAhB,CAAmBA,GAAnB,CAAwB,CACpBqC,IAAMT,GAAGjB,QAAH,CAAYmB,WAAa9B,CAAzB,EAA4BsC,QAA5B,CAAqC,EAArC,CAAN,CACAL,UAAaI,IAAIpC,MAAJ,GAAe,CAAhB,CAAqB,IAAMoC,GAA3B,CAAiCA,GAA7C,CACH,CACDP,YAAc,CAAd,CACAG,UAAY,GAAZ,CACA,IAAKjC,EAAI,CAAT,CAAYA,EAAI,CAAhB,CAAmBA,GAAnB,CAAwB,CACpBqC,IAAMT,GAAGjB,QAAH,CAAYmB,WAAa9B,CAAzB,EAA4BsC,QAA5B,CAAqC,EAArC,CAAN,CACAL,UAAaI,IAAIpC,MAAJ,GAAe,CAAhB,CAAqB,IAAMoC,GAA3B,CAAiCA,GAA7C,CACH,CACDP,YAAc,CAAd,CAEAG,SAAWA,SAAS7B,WAAT,EAAX,CAEA,oBACA8B,aAAeN,GAAGhB,SAAH,CAAakB,UAAb,CAAf,CACAA,YAAc,CAAd,CAEA,eACAxB,KAAK2B,QAAL,EAAiBL,GAAGH,MAAH,CAAUZ,KAAV,CAAgBsB,QAAhB,CAA0BH,OAA1B,CAAjB,CACAF,WAAaE,OAAb,CACH,CAED,MAAO1B,KAAP,CACH,C,gDAGUT,gB","file":"CommonEncryption.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass CommonEncryption {\r\n    /**\r\n     * Find and return the ContentProtection element in the given array\r\n     * that indicates support for MPEG Common Encryption\r\n     *\r\n     * @param {Array} cpArray array of content protection elements\r\n     * @returns {Object|null} the Common Encryption content protection element or\r\n     * null if one was not found\r\n     */\r\n    static findCencContentProtection(cpArray) {\r\n        let retVal = null;\r\n        for (let i = 0; i < cpArray.length; ++i) {\r\n            let cp = cpArray[i];\r\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\r\n                (cp.value.toLowerCase() === 'cenc' || cp.value.toLowerCase() === 'cbcs'))\r\n                retVal = cp;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Returns just the data portion of a single PSSH\r\n     *\r\n     * @param {ArrayBuffer} pssh - the PSSH\r\n     * @return {ArrayBuffer} data portion of the PSSH\r\n     */\r\n    static getPSSHData(pssh) {\r\n        let offset = 8; // Box size and type fields\r\n        let view = new DataView(pssh);\r\n\r\n        // Read version\r\n        let version = view.getUint8(offset);\r\n\r\n        offset += 20; // Version (1), flags (3), system ID (16)\r\n\r\n        if (version > 0) {\r\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\r\n        }\r\n\r\n        offset += 4; // Data size\r\n        return pssh.slice(offset);\r\n    }\r\n\r\n    /**\r\n     * Returns the PSSH associated with the given key system from the concatenated\r\n     * list of PSSH boxes in the given initData\r\n     *\r\n     * @param {KeySystem} keySystem the desired\r\n     * key system\r\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\r\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\r\n     * or null if a valid association could not be found.\r\n     */\r\n    static getPSSHForKeySystem(keySystem, initData) {\r\n        let psshList = CommonEncryption.parsePSSHList(initData);\r\n        if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\r\n            return psshList[keySystem.uuid.toLowerCase()];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parse a standard common encryption PSSH which contains a simple\r\n     * base64-encoding of the init data\r\n     *\r\n     * @param {Object} cpData the ContentProtection element\r\n     * @param {BASE64} BASE64 reference\r\n     * @returns {ArrayBuffer|null} the init data or null if not found\r\n     */\r\n    static parseInitDataFromContentProtection(cpData, BASE64) {\r\n        if ('pssh' in cpData) {\r\n\r\n            // Remove whitespaces and newlines from pssh text\r\n            cpData.pssh.__text = cpData.pssh.__text.replace(/\\r?\\n|\\r/g, '').replace(/\\s+/g, '');\r\n\r\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\r\n     *\r\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\r\n     * CDM as initialization data when CommonEncryption content is detected\r\n     * @returns {Object|Array} an object that has a property named according to each of\r\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\r\n     * and a ArrayBuffer (the entire PSSH box) as the property value\r\n     */\r\n    static parsePSSHList(data) {\r\n\r\n        if (data === null || data === undefined)\r\n            return [];\r\n\r\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\r\n        let done = false;\r\n        let pssh = {};\r\n\r\n        // TODO: Need to check every data read for end of buffer\r\n        let byteCursor = 0;\r\n        while (!done) {\r\n\r\n            let size,\r\n                nextBox,\r\n                version,\r\n                systemID,\r\n                psshDataSize;\r\n            let boxStart = byteCursor;\r\n\r\n            if (byteCursor >= dv.buffer.byteLength)\r\n                break;\r\n\r\n            /* Box size */\r\n            size = dv.getUint32(byteCursor);\r\n            nextBox = byteCursor + size;\r\n            byteCursor += 4;\r\n\r\n            /* Verify PSSH */\r\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\r\n                byteCursor = nextBox;\r\n                continue;\r\n            }\r\n            byteCursor += 4;\r\n\r\n            /* Version must be 0 or 1 */\r\n            version = dv.getUint8(byteCursor);\r\n            if (version !== 0 && version !== 1) {\r\n                byteCursor = nextBox;\r\n                continue;\r\n            }\r\n            byteCursor++;\r\n\r\n            byteCursor += 3; /* skip flags */\r\n\r\n            // 16-byte UUID/SystemID\r\n            systemID = '';\r\n            let i, val;\r\n            for (i = 0; i < 4; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 4;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 6; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 6;\r\n\r\n            systemID = systemID.toLowerCase();\r\n\r\n            /* PSSH Data Size */\r\n            psshDataSize = dv.getUint32(byteCursor);\r\n            byteCursor += 4;\r\n\r\n            /* PSSH Data */\r\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\r\n            byteCursor = nextBox;\r\n        }\r\n\r\n        return pssh;\r\n    }\r\n}\r\n\r\nexport default CommonEncryption;\r\n"]}