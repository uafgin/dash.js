{"version":3,"sources":["../../../../../../src/streaming/protection/models/ProtectionModel.js"],"names":["ProtectionModel"],"mappings":"sEAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCA;;;;;;;;;;;;;;;GAiBA,GAAMA,iBAAkB,QAAlBA,gBAAkB,EAAY,CAAG,CAAvC,CAEA;;;;;;;;GAUA;;;;;;;;;;;;;;;;;GAmBA;;;;;;;;;;GAYA;;;;;;;;;;GAYA;;;;;;;;;;;;;;;;GAkBA;;;;;;;;;;;;GAcA;;;;;;;;;;;;;GAeA;;;;;;;;;;;GAaA;;;;;;;;;;GAYA;;;;;;;;GAUA;;;;;;;;;mBAWeA,e","file":"ProtectionModel.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n\r\n/**\r\n * Defines the public interface for all ProtectionModel implementations.\r\n *\r\n * ProtectionModel implementations provide access to particular versions\r\n * of the Encrypted Media Extensions (EME) APIs that have been implemented\r\n * in a user agent.  Developers wishing to add support for a new EME version\r\n * found in a target user-agent should add a new instance of this interface\r\n * to the\r\n *\r\n * Applications should not need direct access to this object.  All interactions with\r\n * the protection system should be performed with\r\n * {@link module:ProtectionController}\r\n *\r\n * @interface ProtectionModel\r\n * @ignore\r\n */\r\n\r\nconst ProtectionModel = function () { };\r\n\r\n/**\r\n * Returns an array of all initialization data currently used by\r\n * active sessions.\r\n * @function\r\n * @instance\r\n * @name getAllInitData\r\n * @memberof ProtectionModel\r\n * @returns {Array.<ArrayBuffer>} an array of initialization data buffers\r\n */\r\n\r\n/**\r\n * Determine if the user-agent supports one of the given key systems and\r\n * content type configurations. Sends ENAME_KEY_SYSTEM_ACCESS_COMPLETE event\r\n * with a KeySystemAccess object as event data\r\n *\r\n * @function\r\n * @instance\r\n * @name requestKeySystemAccess\r\n * @memberof ProtectionModel\r\n *\r\n * @param {Array.<Object>} ksConfigurations array of desired key system\r\n * configurations in priority order (highest priority first)\r\n * @param {MediaPlayer.dependencies.protection.KeySystem} ksConfigurations.ks\r\n * the key system\r\n * @param {MediaPlayer.vo.protection.KeySystemConfiguration[]} ksConfigurations.configs\r\n * array of acceptable key system configurations\r\n * for this key system in priority order (highest priority first)\r\n */\r\n\r\n/**\r\n * Selects the key system to use for all future operations on this\r\n * ProtectionModel.  Sends ENAME_KEY_SYSTEM_SELECTED with no data\r\n *\r\n * @function\r\n * @instance\r\n * @name selectKeySystem\r\n * @memberof ProtectionModel\r\n * @param keySystemAccess {MediaPlayer.vo.protection.KeySystemAccess} the key\r\n * system access token representing a supported key system\r\n */\r\n\r\n/**\r\n * Associate this protection model with a HTMLMediaElement\r\n *\r\n * @function\r\n * @instance\r\n * @name setMediaElement\r\n * @memberof ProtectionModel\r\n * @param mediaElement {HTMLMediaElement} the media element to\r\n * which we should associate this protection model and all current\r\n * key sessions\r\n */\r\n\r\n/**\r\n * Creates a new key session using the given initData and type. Sends\r\n * KEY_SESSION_CREATED event with MediaPlayer.vo.protection.SessionToken\r\n * as data.\r\n *\r\n * @function\r\n * @instance\r\n * @name createKeySession\r\n * @memberof ProtectionModel\r\n * @param {ArrayBuffer} initData PSSH box for the currently selected\r\n * key system.\r\n * @param {ProtectionData} protData Protection data for the currently selected\r\n * key system.\r\n * @param {string} sessionType the desired session type.  One of \"temporary\",\r\n * \"persistent-license\", \"persistent-release-message\".  CDM implementations\r\n * are not required to support anything except \"temporary\"\r\n */\r\n\r\n/**\r\n * Update the given key session with a key (or any other message\r\n * intended for the CDM)\r\n *\r\n * @function\r\n * @instance\r\n * @name updateKeySession\r\n * @memberof ProtectionModel\r\n * @param {MediaPlayer.vo.protection.SessionToken} sessionToken the session\r\n * token\r\n * @param {ArrayBuffer} message the message that should be delivered to the CDM\r\n * for this session\r\n */\r\n\r\n/**\r\n * Loads the persisted key session data associated with the given sessionID\r\n * into a new session.  Sends KEY_SESSION_CREATED event with\r\n * {@MediaPlayer.vo.protection.SessionToken} as data.\r\n *\r\n * @function\r\n * @instance\r\n * @name loadKeySession\r\n * @memberof ProtectionModel\r\n * @param {string} sessionID the session ID corresponding to the persisted\r\n * session data to be loaded\r\n * @param {ArrayBuffer} the corresponding initData PSSH box for the currently\r\n * selected key system.\r\n */\r\n\r\n/**\r\n * Removes any persisted key session data associated with the given session.\r\n * Also closes the session.  Sends KEY_SESSION_REMOVED and\r\n * ENAME_KEY_SESSION_CLOSED with sessionID as data\r\n *\r\n * @function\r\n * @instance\r\n * @name removeKeySession\r\n * @memberof ProtectionModel\r\n * @param {SessionToken} sessionToken the session\r\n * token\r\n */\r\n\r\n/**\r\n * Close the given session and release all associated keys.  Following\r\n * this call, the sessionToken becomes invalid.  Sends KEY_SESSION_CLOSED\r\n * with sessionID as data\r\n *\r\n * @function\r\n * @instance\r\n * @name closeKeySession\r\n * @memberof ProtectionModel\r\n * @param sessionToken the session token\r\n */\r\n\r\n/**\r\n * Sets the certificate to be used by the CDM for encrypting messages\r\n *\r\n * @function\r\n * @instance\r\n * @name setServerCertificate\r\n * @memberof ProtectionModel\r\n * @param {ArrayBuffer} serverCertificate\r\n */\r\n\r\n/**\r\n * Currently selected key system.  Will be null or undefined if no key\r\n * system has yet been selected\r\n *\r\n * @instance\r\n * @name keySystem\r\n * @memberof ProtectionModel\r\n * @readonly\r\n * @type MediaPlayer.dependencies.protection.KeySystem\r\n */\r\n\r\nexport default ProtectionModel;\r\n"]}