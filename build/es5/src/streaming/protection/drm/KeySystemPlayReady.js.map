{"version":3,"sources":["../../../../../../src/streaming/protection/drm/KeySystemPlayReady.js"],"names":["uuid","systemString","ProtectionConstants","PLAYREADY_KEYSTEM_STRING","schemeIdURI","PRCDMData","protData","KeySystemPlayReady","config","instance","messageFormat","BASE64","checkConfig","hasOwnProperty","Error","getRequestHeadersFromMessage","message","msg","xmlDoc","headers","parser","DOMParser","dataview","Uint16Array","Uint8Array","String","fromCharCode","apply","parseFromString","headerNameList","getElementsByTagName","headerValueList","i","length","childNodes","nodeValue","Content","getLicenseRequestFromMessage","licenseRequest","Challenge","decode","getLicenseServerURLFromInitData","initData","data","DataView","numRecords","getUint16","offset","recordType","recordLength","recordData","slice","record","laurl","luiurl","getInitData","cpData","PSSHBoxType","playreadySystemID","byteCursor","uint8arraydecodedPROHeader","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","CommonEncryption","parseInitDataFromContentProtection","decodeArray","pro","__text","prheader","ArrayBuffer","setUint32","set","buffer","setPlayReadyMessageFormat","format","init","protectionData","getCDMData","customData","cdmData","cdmDataBytes","push","charCodeAt","encode","replace","getSessionId","cp","sessionId","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"KeySystemPlayReady.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Microsoft PlayReady DRM\r\n *\r\n * @class\r\n * @implements KeySystem\r\n */\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\r\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\r\nlet protData;\r\n\r\nfunction KeySystemPlayReady(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let messageFormat = 'utf-16';\r\n    const BASE64 = config.BASE64;\r\n\r\n    function checkConfig() {\r\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(message) {\r\n        let msg,\r\n            xmlDoc;\r\n        const headers = {};\r\n        const parser = new DOMParser();\r\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\r\n\r\n        msg = String.fromCharCode.apply(null, dataview);\r\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\r\n\r\n        const headerNameList = xmlDoc.getElementsByTagName('name');\r\n        const headerValueList = xmlDoc.getElementsByTagName('value');\r\n        for (let i = 0; i < headerNameList.length; i++) {\r\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\r\n        }\r\n        // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\r\n        // this is NOT w3c conform and license servers may reject the request!\r\n        // -> rename it to proper w3c definition!\r\n        if (headers.hasOwnProperty('Content')) {\r\n            headers['Content-Type'] = headers.Content;\r\n            delete headers.Content;\r\n        }\r\n        // Set Content-Type header by default if not provided in the the CDM message (<PlayReadyKeyMessage/>)\r\n        // or if the message contains directly the challenge itself (Ex: LG SmartTVs)\r\n        if (!headers.hasOwnProperty('Content-Type')) {\r\n            headers['Content-Type'] = 'text/xml; charset=utf-8';\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        let licenseRequest = null;\r\n        const parser = new DOMParser();\r\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\r\n\r\n        checkConfig();\r\n        const msg = String.fromCharCode.apply(null, dataview);\r\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\r\n\r\n        if (xmlDoc.getElementsByTagName('PlayReadyKeyMessage')[0]) {\r\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\r\n            if (Challenge) {\r\n                licenseRequest = BASE64.decode(Challenge);\r\n            }\r\n        } else {\r\n            // The message from CDM is not a wrapped message as on IE11 and Edge,\r\n            // thus it contains direclty the challenge itself\r\n            // (note that the xmlDoc at this point may be unreadable since it may have been interpreted as UTF-16)\r\n            return message;\r\n        }\r\n\r\n        return licenseRequest;\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(initData) {\r\n        if (initData) {\r\n            const data = new DataView(initData);\r\n            const numRecords = data.getUint16(4, true);\r\n            let offset = 6;\r\n            const parser = new DOMParser();\r\n\r\n            for (let i = 0; i < numRecords; i++) {\r\n                // Parse the PlayReady Record header\r\n                const recordType = data.getUint16(offset, true);\r\n                offset += 2;\r\n                const recordLength = data.getUint16(offset, true);\r\n                offset += 2;\r\n                if (recordType !== 0x0001) {\r\n                    offset += recordLength;\r\n                    continue;\r\n                }\r\n\r\n                const recordData = initData.slice(offset, offset + recordLength);\r\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\r\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\r\n\r\n                // First try <LA_URL>\r\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\r\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\r\n                    if (laurl) {\r\n                        return laurl;\r\n                    }\r\n                }\r\n\r\n                // Optionally, try <LUI_URL>\r\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\r\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\r\n                    if (luiurl) {\r\n                        return luiurl;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getInitData(cpData) {\r\n        // * desc@ getInitData\r\n        // *   generate PSSH data from PROHeader defined in MPD file\r\n        // *   PSSH format:\r\n        // *   size (4)\r\n        // *   box type(PSSH) (8)\r\n        // *   Protection SystemID (16)\r\n        // *   protection system data size (4) - length of decoded PROHeader\r\n        // *   decoded PROHeader data from MPD file\r\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\r\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\r\n\r\n        let byteCursor = 0;\r\n        let uint8arraydecodedPROHeader = null;\r\n\r\n        let PROSize,\r\n            PSSHSize,\r\n            PSSHBoxBuffer,\r\n            PSSHBox,\r\n            PSSHData;\r\n\r\n        checkConfig();\r\n        if (!cpData) {\r\n            return null;\r\n        }\r\n        // Handle common encryption PSSH\r\n        if ('pssh' in cpData) {\r\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\r\n        }\r\n        // Handle native MS PlayReady ContentProtection elements\r\n        if ('pro' in cpData) {\r\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\r\n        }\r\n        else if ('prheader' in cpData) {\r\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n\r\n        PROSize = uint8arraydecodedPROHeader.length;\r\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\r\n\r\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\r\n\r\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\r\n        PSSHData = new DataView(PSSHBoxBuffer);\r\n\r\n        PSSHData.setUint32(byteCursor, PSSHSize);\r\n        byteCursor += 0x4;\r\n\r\n        PSSHBox.set(PSSHBoxType, byteCursor);\r\n        byteCursor += PSSHBoxType.length;\r\n\r\n        PSSHBox.set(playreadySystemID, byteCursor);\r\n        byteCursor += playreadySystemID.length;\r\n\r\n        PSSHData.setUint32(byteCursor, PROSize);\r\n        byteCursor += 0x4;\r\n\r\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\r\n        byteCursor += PROSize;\r\n\r\n        return PSSHBox.buffer;\r\n    }\r\n\r\n    /**\r\n     * It seems that some PlayReady implementations return their XML-based CDM\r\n     * messages using UTF16, while others return them as UTF8.  Use this function\r\n     * to modify the message format to expect when parsing CDM messages.\r\n     *\r\n     * @param {string} format the expected message format.  Either \"utf-8\" or \"utf-16\".\r\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\r\n     */\r\n    function setPlayReadyMessageFormat(format) {\r\n        if (format !== 'utf-8' && format !== 'utf-16') {\r\n            throw new Error('Specified message format is not one of \"utf-8\" or \"utf-16\"');\r\n        }\r\n        messageFormat = format;\r\n    }\r\n\r\n    /**\r\n     * Initialize the Key system with protection data\r\n     * @param {Object} protectionData the protection data\r\n     */\r\n    function init(protectionData) {\r\n        if (protectionData) {\r\n            protData = protectionData;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Get Playready Custom data\r\n     */\r\n    function getCDMData() {\r\n        let customData,\r\n            cdmData,\r\n            cdmDataBytes,\r\n            i;\r\n\r\n        checkConfig();\r\n        if (protData && protData.cdmData) {\r\n            // Convert custom data into multibyte string\r\n            customData = [];\r\n            for (i = 0; i < protData.cdmData.length; ++i) {\r\n                customData.push(protData.cdmData.charCodeAt(i));\r\n                customData.push(0);\r\n            }\r\n            customData = String.fromCharCode.apply(null, customData);\r\n\r\n            // Encode in Base 64 the custom data string\r\n            customData = BASE64.encode(customData);\r\n\r\n            // Initialize CDM data with Base 64 encoded custom data\r\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\r\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\r\n\r\n            // Convert CDM data into multibyte characters\r\n            cdmDataBytes = [];\r\n            for (i = 0; i < cdmData.length; ++i) {\r\n                cdmDataBytes.push(cdmData.charCodeAt(i));\r\n                cdmDataBytes.push(0);\r\n            }\r\n\r\n            return new Uint8Array(cdmDataBytes).buffer;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(cp) {\r\n        // Get sessionId from protectionData or from manifest\r\n        if (protData && protData.sessionId) {\r\n            return protData.sessionId;\r\n        } else if (cp && cp.sessionId) {\r\n            return cp.sessionId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId,\r\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\r\n        init: init\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */\r\n"]}