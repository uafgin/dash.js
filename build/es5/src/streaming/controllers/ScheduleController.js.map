{"version":3,"sources":["../../../../../src/streaming/controllers/ScheduleController.js"],"names":["ScheduleController","config","context","eventBus","getInstance","adapter","dashMetrics","mediaPlayerModel","fragmentModel","abrController","playbackController","textController","streamInfo","type","mimeType","mediaController","bufferController","settings","instance","logger","currentRepresentationInfo","initialRequest","isStopped","isFragmentProcessingInProgress","timeToLoadDelay","scheduleTimeout","seekTarget","hasVideoTrack","bufferLevelRule","lastFragmentRequest","topQualityIndex","lastInitQuality","replaceRequestArray","switchTrack","replacingBuffer","mediaRequest","checkPlaybackQuality","isReplacementRequest","setup","getLogger","resetInitialSettings","initialize","_hasVideoTrack","create","on","Events","DATA_UPDATE_STARTED","onDataUpdateStarted","FRAGMENT_LOADING_COMPLETED","onFragmentLoadingCompleted","STREAM_COMPLETED","onStreamCompleted","BUFFER_CLEARED","onBufferCleared","BYTES_APPENDED_END_FRAGMENT","onBytesAppended","QUOTA_EXCEEDED","onQuotaExceeded","PLAYBACK_SEEKING","onPlaybackSeeking","PLAYBACK_STARTED","onPlaybackStarted","PLAYBACK_RATE_CHANGED","onPlaybackRateChanged","PLAYBACK_TIME_UPDATED","onPlaybackTimeUpdated","URL_RESOLUTION_FAILED","onURLResolutionFailed","FRAGMENT_LOADING_ABANDONED","onFragmentLoadingAbandoned","BUFFERING_COMPLETED","onBufferingCompleted","getType","getStreamId","id","setCurrentRepresentation","representationInfo","isStarted","start","getIsBufferingCompleted","debug","createPlaylistTraceMetrics","getTime","getPlaybackRate","startScheduleTimer","stop","clearTimeout","hasTopQualityChanged","newTopQualityIndex","getTopQualityIndexFor","info","schedule","isPaused","get","streaming","scheduleWhilePaused","Constants","FRAGMENTED_TEXT","TEXT","isTextEnabled","validateExecutedFragmentRequest","isReplacement","length","isNaN","execute","getNextFragment","quality","getSwitchMode","TRACK_SWITCH_MODE_ALWAYS_REPLACE","replaceBuffer","trigger","INIT_FRAGMENT_NEEDED","representationId","sender","streamId","mediaType","replacement","shift","isInitializationRequest","MEDIA_FRAGMENT_NEEDED","setFragmentProcessState","time","safeBufferLevel","fragmentDuration","schedulingInfo","getCurrentSchedulingInfo","mediaInfo","duration","request","getRequests","state","FragmentModel","FRAGMENT_MODEL_EXECUTED","threshold","indexOf","getIsTextTrack","fastSwitchModeEnabled","fastSwitchEnabled","bufferLevel","getBufferLevel","abandonmentState","getAbandonmentStateFor","trackChanged","isCurrentTrack","TRACK_SWITCH_MODE_NEVER_REPLACE","qualityChanged","MetricsConstants","ABANDON_LOAD","replaceRequest","index","setSeekTarget","value","setTimeout","processInitRequest","executeRequest","processMediaRequest","url","getIsDynamic","lowLatencyEnabled","switchTrackAsked","push","completeQualityChange","item","startTime","TRACK_CHANGE_RENDERED","oldMediaInfo","newMediaInfo","adaptationIndex","QUALITY_CHANGE_RENDERED","oldQuality","newQuality","e","range","error","serviceLocation","addExecutedRequest","currentTime","fragEndTime","isSeeking","flushBufferAtTrackSwitch","seek","hasEnoughSpaceToAppend","quotaExceeded","abortRequests","seekTime","setTimeToLoadDelay","latency","DVRWindow","end","NaN","updateManifestUpdateInfo","updatePlayListTraceMetrics","playbackspeed","playbackRate","toString","getTimeToLoadDelay","getBufferTarget","undefined","reset","off","getPlaybackController","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"ScheduleController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport MetricsConstants from '../constants/MetricsConstants';\r\nimport BufferLevelRule from '../rules/scheduling/BufferLevelRule';\r\nimport FragmentModel from '../models/FragmentModel';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\n\r\nfunction ScheduleController(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const adapter = config.adapter;\r\n    const dashMetrics = config.dashMetrics;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const fragmentModel = config.fragmentModel;\r\n    const abrController = config.abrController;\r\n    const playbackController = config.playbackController;\r\n    const textController = config.textController;\r\n    const streamInfo = config.streamInfo;\r\n    const type = config.type;\r\n    const mimeType = config.mimeType;\r\n    const mediaController = config.mediaController;\r\n    const bufferController = config.bufferController;\r\n    const settings = config.settings;\r\n\r\n    let instance,\r\n        logger,\r\n        currentRepresentationInfo,\r\n        initialRequest,\r\n        isStopped,\r\n        isFragmentProcessingInProgress,\r\n        timeToLoadDelay,\r\n        scheduleTimeout,\r\n        seekTarget,\r\n        hasVideoTrack,\r\n        bufferLevelRule,\r\n        lastFragmentRequest,\r\n        topQualityIndex,\r\n        lastInitQuality,\r\n        replaceRequestArray,\r\n        switchTrack,\r\n        replacingBuffer,\r\n        mediaRequest,\r\n        checkPlaybackQuality,\r\n        isReplacementRequest;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function initialize(_hasVideoTrack) {\r\n        hasVideoTrack = _hasVideoTrack;\r\n\r\n        bufferLevelRule = BufferLevelRule(context).create({\r\n            abrController: abrController,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            textController: textController,\r\n            settings: settings\r\n        });\r\n\r\n        //eventBus.on(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\r\n        eventBus.on(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\r\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\r\n        eventBus.on(Events.STREAM_COMPLETED, onStreamCompleted, this);\r\n        eventBus.on(Events.BUFFER_CLEARED, onBufferCleared, this);\r\n        eventBus.on(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);\r\n        eventBus.on(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\r\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\r\n        eventBus.on(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\r\n        eventBus.on(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\r\n        eventBus.on(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\r\n        eventBus.on(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\r\n        eventBus.on(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\r\n        eventBus.on(Events.BUFFERING_COMPLETED, onBufferingCompleted, this);\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function setCurrentRepresentation(representationInfo) {\r\n        currentRepresentationInfo = representationInfo;\r\n    }\r\n\r\n    function isStarted() {\r\n        return (isStopped === false);\r\n    }\r\n\r\n    function start() {\r\n        if (isStarted()) return;\r\n        if (!currentRepresentationInfo || bufferController.getIsBufferingCompleted()) return;\r\n\r\n        logger.debug('Schedule Controller starts');\r\n        isStopped = false;\r\n        dashMetrics.createPlaylistTraceMetrics(currentRepresentationInfo.id, playbackController.getTime() * 1000, playbackController.getPlaybackRate());\r\n\r\n        if (initialRequest) {\r\n            initialRequest = false;\r\n        }\r\n\r\n        startScheduleTimer(0);\r\n    }\r\n\r\n    function stop() {\r\n        if (isStopped) return;\r\n\r\n        logger.debug('Schedule Controller stops');\r\n        logger.debug(type + ' Schedule Controller stops');\r\n        isStopped = true;\r\n        clearTimeout(scheduleTimeout);\r\n    }\r\n\r\n    function hasTopQualityChanged(type, id) {\r\n        topQualityIndex[id] = topQualityIndex[id] || {};\r\n        const newTopQualityIndex = abrController.getTopQualityIndexFor(type, id);\r\n\r\n        if (topQualityIndex[id][type] != newTopQualityIndex) {\r\n            logger.info('Top quality ' + type + ' index has changed from ' + topQualityIndex[id][type] + ' to ' + newTopQualityIndex);\r\n            topQualityIndex[id][type] = newTopQualityIndex;\r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n    function schedule() {\r\n        if (isStopped || isFragmentProcessingInProgress ||\r\n            (playbackController.isPaused() && !settings.get().streaming.scheduleWhilePaused) ||\r\n            ((type === Constants.FRAGMENTED_TEXT || type === Constants.TEXT) && !textController.isTextEnabled()) ||\r\n            bufferController.getIsBufferingCompleted()) {\r\n            stop();\r\n            return;\r\n        }\r\n\r\n        validateExecutedFragmentRequest();\r\n\r\n        const isReplacement = replaceRequestArray.length > 0;\r\n        if (replacingBuffer || isNaN(lastInitQuality) || switchTrack || isReplacement ||\r\n            hasTopQualityChanged(type, streamInfo.id) ||\r\n            bufferLevelRule.execute(type, currentRepresentationInfo, hasVideoTrack)) {\r\n            const getNextFragment = function () {\r\n                if ((currentRepresentationInfo.quality !== lastInitQuality || switchTrack) && (!replacingBuffer)) {\r\n                    if (switchTrack) {\r\n                        logger.debug('Switch track for ' + type + ', representation id = ' + currentRepresentationInfo.id);\r\n                        replacingBuffer = mediaController.getSwitchMode(type) === Constants.TRACK_SWITCH_MODE_ALWAYS_REPLACE;\r\n                        if (replacingBuffer && bufferController.replaceBuffer) {\r\n                            bufferController.replaceBuffer();\r\n                        }\r\n                        switchTrack = false;\r\n                    } else {\r\n                        logger.debug('Quality has changed, get init request for representationid = ' + currentRepresentationInfo.id);\r\n                    }\r\n                    eventBus.trigger(Events.INIT_FRAGMENT_NEEDED,\r\n                        { representationId: currentRepresentationInfo.id, sender: instance },\r\n                        { streamId: streamInfo.id, mediaType: type }\r\n                    );\r\n                    lastInitQuality = currentRepresentationInfo.quality;\r\n                    checkPlaybackQuality = false;\r\n                } else {\r\n                    const replacement = replaceRequestArray.shift();\r\n\r\n                    if (replacement && replacement.isInitializationRequest()) {\r\n                        // To be sure the specific init segment had not already been loaded\r\n                        eventBus.trigger(Events.INIT_FRAGMENT_NEEDED,\r\n                            { representationId: replacement.representationId, sender: instance },\r\n                            { streamId: streamInfo.id, mediaType: type }\r\n                        );\r\n                        checkPlaybackQuality = false;\r\n                    } else {\r\n                        eventBus.trigger(Events.MEDIA_FRAGMENT_NEEDED,\r\n                            { seekTarget: seekTarget, replacement: replacement },\r\n                            { streamId: streamInfo.id, mediaType: type }\r\n                        );\r\n                        checkPlaybackQuality = true;\r\n                    }\r\n                }\r\n            };\r\n\r\n            setFragmentProcessState(true);\r\n            if (!isReplacement && checkPlaybackQuality) {\r\n                abrController.checkPlaybackQuality(type);\r\n            }\r\n\r\n            getNextFragment();\r\n\r\n        } else {\r\n            startScheduleTimer(500);\r\n        }\r\n    }\r\n\r\n    function validateExecutedFragmentRequest() {\r\n        // Validate that the fragment request executed and appended into the source buffer is as\r\n        // good of quality as the current quality and is the correct media track.\r\n        const time = playbackController.getTime();\r\n        let safeBufferLevel = 1.5;\r\n\r\n        if (isNaN(currentRepresentationInfo.fragmentDuration)) { //fragmentDuration of representationInfo is not defined,\r\n            // call metrics function to have data in the latest scheduling info...\r\n            // if no metric, returns 0. In this case, rule will return false.\r\n            const schedulingInfo = dashMetrics.getCurrentSchedulingInfo(currentRepresentationInfo.mediaInfo.type);\r\n            safeBufferLevel = schedulingInfo ? schedulingInfo.duration * 1.5 : 1.5;\r\n        }\r\n        const request = fragmentModel.getRequests({\r\n            state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\r\n            time: time + safeBufferLevel,\r\n            threshold: 0\r\n        })[0];\r\n\r\n        if (request && replaceRequestArray.indexOf(request) === -1 && !adapter.getIsTextTrack(mimeType)) {\r\n            const fastSwitchModeEnabled = settings.get().streaming.fastSwitchEnabled;\r\n            const bufferLevel = bufferController.getBufferLevel();\r\n            const abandonmentState = abrController.getAbandonmentStateFor(type);\r\n\r\n            // Only replace on track switch when NEVER_REPLACE\r\n            const trackChanged = !mediaController.isCurrentTrack(request.mediaInfo) && mediaController.getSwitchMode(request.mediaInfo.type) === Constants.TRACK_SWITCH_MODE_NEVER_REPLACE;\r\n            const qualityChanged = request.quality < currentRepresentationInfo.quality;\r\n\r\n            if (fastSwitchModeEnabled && (trackChanged || qualityChanged) && bufferLevel >= safeBufferLevel && abandonmentState !== MetricsConstants.ABANDON_LOAD) {\r\n                replaceRequest(request);\r\n                isReplacementRequest = true;\r\n                logger.debug('Reloading outdated fragment at index: ', request.index);\r\n            } else if (request.quality > currentRepresentationInfo.quality && !replacingBuffer) {\r\n                // The buffer has better quality it in then what we would request so set append point to end of buffer!!\r\n                setSeekTarget(playbackController.getTime() + bufferLevel);\r\n            }\r\n        }\r\n    }\r\n\r\n    function startScheduleTimer(value) {\r\n        clearTimeout(scheduleTimeout);\r\n\r\n        scheduleTimeout = setTimeout(schedule, value);\r\n    }\r\n\r\n    function setFragmentProcessState (state) {\r\n        if (isFragmentProcessingInProgress !== state ) {\r\n            isFragmentProcessingInProgress = state;\r\n        } else {\r\n            logger.debug('isFragmentProcessingInProgress is already equal to', state);\r\n        }\r\n    }\r\n\r\n    function processInitRequest(request) {\r\n        if (request) {\r\n            setFragmentProcessState(true);\r\n            fragmentModel.executeRequest(request);\r\n        }\r\n    }\r\n\r\n    function processMediaRequest(request) {\r\n        if (request) {\r\n            logger.debug('Next fragment request url is ' + request.url);\r\n            fragmentModel.executeRequest(request);\r\n        } else { // Use case - Playing at the bleeding live edge and frag is not available yet. Cycle back around.\r\n            if (playbackController.getIsDynamic()) {\r\n                logger.debug('Next fragment seems to be at the bleeding live edge and is not available yet. Rescheduling.');\r\n            }\r\n            setFragmentProcessState(false);\r\n            startScheduleTimer(settings.get().streaming.lowLatencyEnabled ? 100 : 500);\r\n        }\r\n    }\r\n\r\n    function switchTrackAsked() {\r\n        switchTrack = true;\r\n    }\r\n\r\n    function replaceRequest(request) {\r\n        replaceRequestArray.push(request);\r\n    }\r\n\r\n    function completeQualityChange(trigger) {\r\n        if (playbackController && fragmentModel) {\r\n            const item = fragmentModel.getRequests({\r\n                state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\r\n                time: playbackController.getTime(),\r\n                threshold: 0\r\n            })[0];\r\n            if (item && playbackController.getTime() >= item.startTime) {\r\n                if ((!lastFragmentRequest.mediaInfo || (item.mediaInfo.type === lastFragmentRequest.mediaInfo.type && item.mediaInfo.id !== lastFragmentRequest.mediaInfo.id)) && trigger) {\r\n                    eventBus.trigger(Events.TRACK_CHANGE_RENDERED, {\r\n                        mediaType: type,\r\n                        oldMediaInfo: lastFragmentRequest.mediaInfo,\r\n                        newMediaInfo: item.mediaInfo\r\n                    });\r\n                }\r\n                if ((item.quality !== lastFragmentRequest.quality || item.adaptationIndex !== lastFragmentRequest.adaptationIndex) && trigger) {\r\n                    eventBus.trigger(Events.QUALITY_CHANGE_RENDERED, {\r\n                        mediaType: type,\r\n                        oldQuality: lastFragmentRequest.quality,\r\n                        newQuality: item.quality\r\n                    });\r\n                }\r\n                lastFragmentRequest = {\r\n                    mediaInfo: item.mediaInfo,\r\n                    quality: item.quality,\r\n                    adaptationIndex: item.adaptationIndex\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    function onStreamCompleted() {\r\n        stop();\r\n        setFragmentProcessState(false);\r\n        logger.info(`Stream ${streamInfo.id} is complete`);\r\n    }\r\n\r\n    function onFragmentLoadingCompleted(e) {\r\n        if (e.request.mediaInfo.streamInfo.id !== streamInfo.id || e.request.mediaType !== type) return;\r\n\r\n        logger.info('OnFragmentLoadingCompleted - Url:', e.request ? e.request.url : 'undefined', e.request.range ? ', Range:' + e.request.range : '');\r\n\r\n        if (adapter.getIsTextTrack(mimeType)) {\r\n            setFragmentProcessState(false);\r\n        }\r\n\r\n        if (e.error && e.request.serviceLocation && !isStopped) {\r\n            replaceRequest(e.request);\r\n            setFragmentProcessState(false);\r\n            startScheduleTimer(0);\r\n        }\r\n\r\n        if (replacingBuffer) {\r\n            mediaRequest = e.request;\r\n        }\r\n    }\r\n\r\n    function onPlaybackTimeUpdated() {\r\n        completeQualityChange(true);\r\n    }\r\n\r\n    function onBytesAppended(e) {\r\n        if (replacingBuffer && !isNaN(e.startTime)) {\r\n            replacingBuffer = false;\r\n            fragmentModel.addExecutedRequest(mediaRequest);\r\n        }\r\n\r\n        setFragmentProcessState(false);\r\n        if (isReplacementRequest && !isNaN(e.startTime)) {\r\n            //replace requests process is in progress, call schedule in n seconds.\r\n            //it is done in order to not add a fragment at the new quality at the end of the buffer before replace process is over.\r\n            //Indeed, if schedule is called too early, the executed request tested is the same that the one tested during previous schedule (at the new quality).\r\n            const currentTime = playbackController.getTime();\r\n            const fragEndTime = e.startTime + currentRepresentationInfo.fragmentDuration;\r\n            const safeBufferLevel = currentRepresentationInfo.fragmentDuration * 1.5;\r\n            if ((currentTime + safeBufferLevel) >= fragEndTime) {\r\n                startScheduleTimer(0);\r\n            } else {\r\n                startScheduleTimer((fragEndTime - (currentTime + safeBufferLevel)) * 1000);\r\n            }\r\n            isReplacementRequest = false;\r\n        } else {\r\n            startScheduleTimer(0);\r\n        }\r\n    }\r\n\r\n    function onFragmentLoadingAbandoned(e) {\r\n        logger.info('onFragmentLoadingAbandoned request: ' + e.request.url + ' has been aborted');\r\n        if (!playbackController.isSeeking() && !switchTrack) {\r\n            logger.info('onFragmentLoadingAbandoned request: ' + e.request.url + ' has to be downloaded again, origin is not seeking process or switch track call');\r\n            replaceRequest(e.request);\r\n        }\r\n        setFragmentProcessState(false);\r\n        startScheduleTimer(0);\r\n    }\r\n\r\n    function onDataUpdateStarted(/*e*/) {\r\n        // stop();\r\n    }\r\n\r\n    function onBufferingCompleted(/*e*/) {\r\n        stop();\r\n    }\r\n\r\n    function onBufferCleared(e) {\r\n        if (replacingBuffer && settings.get().streaming.flushBufferAtTrackSwitch) {\r\n            // For some devices (like chromecast) it is necessary to seek the video element to reset the internal decoding buffer,\r\n            // otherwise audio track switch will be effective only once after previous buffered track is consumed\r\n            playbackController.seek(playbackController.getTime() + 0.001, false, true);\r\n        }\r\n\r\n        // (Re)start schedule once buffer has been pruned after a QuotaExceededError\r\n        if (e.hasEnoughSpaceToAppend && e.quotaExceeded) {\r\n            start();\r\n        }\r\n    }\r\n\r\n    function onQuotaExceeded(/*e*/) {\r\n        // Stop scheduler (will be restarted once buffer is pruned)\r\n        stop();\r\n        setFragmentProcessState(false);\r\n    }\r\n\r\n    function onURLResolutionFailed() {\r\n        fragmentModel.abortRequests();\r\n        stop();\r\n    }\r\n\r\n    function onPlaybackStarted() {\r\n        if (isStopped || !settings.get().streaming.scheduleWhilePaused) {\r\n            start();\r\n        }\r\n    }\r\n\r\n    function onPlaybackSeeking(e) {\r\n        setSeekTarget(e.seekTime);\r\n        setTimeToLoadDelay(0);\r\n\r\n        if (isStopped) {\r\n            start();\r\n        }\r\n\r\n        const latency = currentRepresentationInfo.DVRWindow && playbackController ? currentRepresentationInfo.DVRWindow.end - playbackController.getTime() : NaN;\r\n        dashMetrics.updateManifestUpdateInfo({\r\n            latency: latency\r\n        });\r\n\r\n        if (!isFragmentProcessingInProgress) {\r\n            // No pending request, request next segment at seek target\r\n            startScheduleTimer(0);\r\n        } else {\r\n            // Abort current request\r\n            fragmentModel.abortRequests();\r\n        }\r\n    }\r\n\r\n    function onPlaybackRateChanged(e) {\r\n        dashMetrics.updatePlayListTraceMetrics({playbackspeed: e.playbackRate.toString()});\r\n    }\r\n\r\n    function setSeekTarget(value) {\r\n        seekTarget = value;\r\n    }\r\n\r\n    function setTimeToLoadDelay(value) {\r\n        timeToLoadDelay = value;\r\n    }\r\n\r\n    function getTimeToLoadDelay() {\r\n        return timeToLoadDelay;\r\n    }\r\n\r\n    function getBufferTarget() {\r\n        return bufferLevelRule.getBufferTarget(type, currentRepresentationInfo, hasVideoTrack);\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        checkPlaybackQuality = true;\r\n        isFragmentProcessingInProgress = false;\r\n        timeToLoadDelay = 0;\r\n        seekTarget = NaN;\r\n        initialRequest = true;\r\n        lastInitQuality = NaN;\r\n        lastFragmentRequest = {\r\n            mediaInfo: undefined,\r\n            quality: NaN,\r\n            adaptationIndex: NaN\r\n        };\r\n        topQualityIndex = {};\r\n        replaceRequestArray = [];\r\n        isStopped = true;\r\n        switchTrack = false;\r\n        replacingBuffer = false;\r\n        mediaRequest = null;\r\n        isReplacementRequest = false;\r\n    }\r\n\r\n    function reset() {\r\n        //eventBus.off(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\r\n        eventBus.off(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\r\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\r\n        eventBus.off(Events.STREAM_COMPLETED, onStreamCompleted, this);\r\n        eventBus.off(Events.BUFFER_CLEARED, onBufferCleared, this);\r\n        eventBus.off(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);\r\n        eventBus.off(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\r\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\r\n        eventBus.off(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\r\n        eventBus.off(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\r\n        eventBus.off(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\r\n        eventBus.off(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\r\n        eventBus.off(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\r\n        eventBus.off(Events.BUFFERING_COMPLETED, onBufferingCompleted, this);\r\n\r\n        stop();\r\n        completeQualityChange(false);\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function getPlaybackController() {\r\n        return playbackController;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getType: getType,\r\n        getStreamId: getStreamId,\r\n        setCurrentRepresentation: setCurrentRepresentation,\r\n        setSeekTarget: setSeekTarget,\r\n        setTimeToLoadDelay: setTimeToLoadDelay,\r\n        getTimeToLoadDelay: getTimeToLoadDelay,\r\n        switchTrackAsked: switchTrackAsked,\r\n        isStarted: isStarted,\r\n        start: start,\r\n        stop: stop,\r\n        reset: reset,\r\n        getBufferTarget: getBufferTarget,\r\n        processInitRequest: processInitRequest,\r\n        processMediaRequest: processMediaRequest,\r\n        getPlaybackController\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nScheduleController.__dashjs_factory_name = 'ScheduleController';\r\nexport default FactoryMaker.getClassFactory(ScheduleController);\r\n"]}