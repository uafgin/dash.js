{"version":3,"sources":["../../../../../src/streaming/controllers/BlacklistController.js"],"names":["BlackListController","config","instance","blacklist","eventBus","context","getInstance","updateEventName","addBlacklistEventName","contains","query","length","indexOf","add","entry","push","trigger","onAddBlackList","e","setup","on","reset","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,qD,yDACA,6C,oIAhCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCA,QAASA,oBAAT,CAA6BC,MAA7B,CAAqC,CAEjCA,OAASA,QAAU,EAAnB,CACA,GAAIC,gBAAJ,CACA,GAAIC,WAAY,EAAhB,CAEA,GAAMC,UAAW,uBAAS,KAAKC,OAAd,EAAuBC,WAAvB,EAAjB,CACA,GAAMC,iBAAkBN,OAAOM,eAA/B,CACA,GAAMC,uBAAwBP,OAAOO,qBAArC,CAEA,QAASC,SAAT,CAAkBC,KAAlB,CAAyB,CACrB,GAAI,CAACP,UAAUQ,MAAX,EAAqB,CAACD,KAAtB,EAA+B,CAACA,MAAMC,MAA1C,CAAkD,CAC9C,MAAO,MAAP,CACH,CAED,MAAQR,WAAUS,OAAV,CAAkBF,KAAlB,IAA6B,CAAC,CAAtC,CACH,CAED,QAASG,IAAT,CAAaC,KAAb,CAAoB,CAChB,GAAIX,UAAUS,OAAV,CAAkBE,KAAlB,IAA6B,CAAC,CAAlC,CAAqC,CACjC,OACH,CAEDX,UAAUY,IAAV,CAAeD,KAAf,EAEAV,SAASY,OAAT,CAAiBT,eAAjB,CAAkC,CAAEO,MAAOA,KAAT,CAAlC,EACH,CAED,QAASG,eAAT,CAAwBC,CAAxB,CAA2B,CACvBL,IAAIK,EAAEJ,KAAN,EACH,CAED,QAASK,MAAT,EAAiB,CACb,GAAIX,qBAAJ,CAA2B,CACvBJ,SAASgB,EAAT,CAAYZ,qBAAZ,CAAmCS,cAAnC,CAAmDf,QAAnD,EACH,CACJ,CAED,QAASmB,MAAT,EAAiB,CACblB,UAAY,EAAZ,CACH,CAEDD,SAAW,CACPW,IAAKA,GADE,CAEPJ,SAAUA,QAFH,CAGPY,MAAOA,KAHA,CAAX,CAMAF,QACA,MAAOjB,SAAP,CACH,CAEDF,oBAAoBsB,qBAApB,CAA4C,qBAA5C,C,gBACeC,uBAAaC,eAAb,CAA6BxB,mBAA7B,C","file":"BlacklistController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport EventBus from '../../core/EventBus';\r\n\r\nfunction BlackListController(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let blacklist = [];\r\n\r\n    const eventBus = EventBus(this.context).getInstance();\r\n    const updateEventName = config.updateEventName;\r\n    const addBlacklistEventName = config.addBlacklistEventName;\r\n\r\n    function contains(query) {\r\n        if (!blacklist.length || !query || !query.length) {\r\n            return false;\r\n        }\r\n\r\n        return (blacklist.indexOf(query) !== -1);\r\n    }\r\n\r\n    function add(entry) {\r\n        if (blacklist.indexOf(entry) !== -1) {\r\n            return;\r\n        }\r\n\r\n        blacklist.push(entry);\r\n\r\n        eventBus.trigger(updateEventName, { entry: entry });\r\n    }\r\n\r\n    function onAddBlackList(e) {\r\n        add(e.entry);\r\n    }\r\n\r\n    function setup() {\r\n        if (addBlacklistEventName) {\r\n            eventBus.on(addBlacklistEventName, onAddBlackList, instance);\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        blacklist = [];\r\n    }\r\n\r\n    instance = {\r\n        add: add,\r\n        contains: contains,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nBlackListController.__dashjs_factory_name = 'BlackListController';\r\nexport default FactoryMaker.getClassFactory(BlackListController);\r\n"]}