{"version":3,"sources":["../../../../../src/streaming/text/TextSourceBuffer.js"],"names":["TextSourceBuffer","context","eventBus","getInstance","embeddedInitialized","instance","logger","boxParser","errHandler","adapter","manifestModel","mediaController","parser","vttParser","ttmlParser","mediaInfos","textTracks","fragmentedFragmentModel","initializationSegmentReceived","timescale","fragmentedTracks","videoModel","streamController","firstFragmentedSubtitleStart","currFragmentedTrackIdx","embeddedTracks","embeddedTimescale","embeddedLastSequenceNumber","embeddedCea608FieldParsers","embeddedTextHtmlRender","mseTimeOffset","setup","getLogger","resetInitialSettings","resetFragmented","NaN","initialize","mimeType","streamInfo","mediaInfoArr","fragmentModel","initEmbedded","setConfig","addMediaInfos","isFragmented","getIsTextTrack","concat","buffered","create","getTracksFor","Constants","FRAGMENTED_TEXT","currFragTrack","getCurrentTrackFor","i","length","setCurrentFragmentedTrackIdx","createTextTrackFromMediaInfo","abort","deleteAllTextTracks","reset","onVideoChunkReceived","e","chunk","mediaInfo","embeddedCaptions","append","bytes","streamProcessors","getActiveStreamProcessors","getType","getRepresentationInfo","MSETimeOffset","on","Events","VIDEO_CHUNK_RECEIVED","BUFFER_CLEARED","onVideoBufferCleared","resetEmbedded","off","addEmbeddedTrack","id","CC1","CC3","push","warn","config","getConfig","idx","captionData","textTrackInfo","TextTrackInfo","trackKindMap","subtitle","caption","getKind","kind","roles","checkTTML","ttml","codec","search","STPP","TTML","lang","labels","index","isTTML","defaultTrack","getIsDefault","isEmbedded","accessibility","totalNrTracks","addTextTrack","result","sampleList","j","k","samplesInfo","ccContent","mediaType","type","codecType","error","segmentType","getMediaTimescaleFromMoov","getSamplesInfo","cts","start","getParser","sample","sampleStart","sampleRelStart","add","duration","dataView","DataView","offset","subSizes","ISOBoxer","Utils","dataViewToString","UTF8","images","subOffset","inData","Uint8Array","raw","String","fromCharCode","apply","manifest","getValue","offsetTime","ttmlTimeIsRelative","parse","addCaptions","removeExecutedRequestsBeforeTime","remove","message","captionArray","sampleData","slice","size","sampleBoxes","parseBuffer","boxes","box1","debug","box2","cue_text","start_time","end_time","end","data","styles","TEXT","byteLength","getCurrentTrackIdx","DashJSError","Errors","TIMED_TEXT_ERROR_ID_PARSE_CODE","TIMED_TEXT_ERROR_MESSAGE_PARSE","VIDEO","HTTPRequest","INIT_SEGMENT_TYPE","makeCueAdderForIndex","self","trackIndex","newCue","startTime","endTime","captionScreen","captionsArray","getTTMLRenderingDiv","createHTMLCaptionsFromScreen","getElement","text","getDisplayText","sequenceNumber","lastSequenceNumber","field","handler","trackIdx","getTrackIdxForId","cea608parser","Cea608Parser","numSequences","allCcData","extractCea608Data","fieldNr","ccData","fields","fieldParser","addData","samples","splits","cea608Ranges","findCea608Nalus","lastSampleTime","extractCea608DataFromRange","forEach","sortField","sort","a","b","isDefault","substring","VTT","undefined","track","deleteCuesFromTrackIdx","from","to","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"sEA8BA,iD,mDACA,sDACA,kD,2DACA,6C,mDACA,2D,iEACA,qD,yDACA,uC,2CACA,wC,qDACA,gE,6EACA,6C,2DACA,8D,yDACA,6C,iDACA,gD,6CACA,8C,uDACA,gD,gIAEA,QAASA,iBAAT,EAA4B,CAExB,GAAMC,SAAU,KAAKA,OAArB,CACA,GAAMC,UAAW,uBAASD,OAAT,EAAkBE,WAAlB,EAAjB,CACA,GAAIC,qBAAsB,KAA1B,CAEA,GAAIC,gBAAJ,CACIC,aADJ,CAEIC,gBAFJ,CAGIC,iBAHJ,CAIIC,cAJJ,CAKIC,oBALJ,CAMIC,sBANJ,CAOIC,aAPJ,CAQIC,gBARJ,CASIC,iBATJ,CAUIC,iBAVJ,CAWIC,iBAXJ,CAYIC,8BAZJ,CAaIC,oCAbJ,CAcIC,gBAdJ,CAeIC,uBAfJ,CAgBIC,iBAhBJ,CAiBIC,uBAjBJ,CAkBIC,mCAlBJ,CAmBIC,6BAnBJ,CAoBIC,qBApBJ,CAqBIC,wBArBJ,CAsBIC,iCAtBJ,CAuBIC,iCAvBJ,CAwBIC,6BAxBJ,CAyBIC,oBAzBJ,CA2BA,QAASC,MAAT,EAAiB,CACbzB,OAAS,oBAAML,OAAN,EAAeE,WAAf,GAA6B6B,SAA7B,CAAuC3B,QAAvC,CAAT,CAEA4B,uBACH,CAED,QAASC,gBAAT,EAA4B,CACxBjB,wBAA0B,IAA1B,CACAE,UAAYgB,GAAZ,CACAf,iBAAmB,EAAnB,CACAG,6BAA+B,IAA/B,CACAL,8BAAgC,KAAhC,CACH,CAED,QAASe,qBAAT,EAAgC,CAC5BC,kBAEAnB,WAAa,EAAb,CACAH,OAAS,IAAT,CACH,CAED,QAASwB,WAAT,CAAoBC,QAApB,CAA8BC,UAA9B,CAA0CC,YAA1C,CAAwDC,aAAxD,CAAuE,CACnE,GAAI,CAACpC,mBAAL,CAA0B,CACtBqC,eACH,CAEDzB,WAAW0B,SAAX,CAAqB,CACjBrB,WAAYA,UADK,CAArB,EAGAL,WAAWoB,UAAX,GAEA,GAAI,CAAC7B,SAAL,CAAgB,CACZA,UAAY,wBAAUN,OAAV,EAAmBE,WAAnB,EAAZ,CACH,CAEDwC,cAAcN,QAAd,CAAwBC,UAAxB,CAAoCC,YAApC,CAAkDC,aAAlD,EACH,CAED,QAASG,cAAT,CAAuBN,QAAvB,CAAiCC,UAAjC,CAA6CC,YAA7C,CAA2DC,aAA3D,CAA0E,CACtE,GAAMI,cAAe,CAACnC,QAAQoC,cAAR,CAAuBR,QAAvB,CAAtB,CAEAtB,WAAaA,WAAW+B,MAAX,CAAkBP,YAAlB,CAAb,CAEA,GAAIK,YAAJ,CAAkB,CACd3B,wBAA0BuB,aAA1B,CACAnC,SAAS0C,QAAT,CAAoB,+BAAiB9C,OAAjB,EAA0B+C,MAA1B,EAApB,CACA5B,iBAAmBT,gBAAgBsC,YAAhB,CAA6BC,oBAAUC,eAAvC,CAAwDb,UAAxD,CAAnB,CACA,GAAMc,eAAgBzC,gBAAgB0C,kBAAhB,CAAmCH,oBAAUC,eAA7C,CAA8Db,UAA9D,CAAtB,CACA,IAAK,GAAIgB,GAAI,CAAb,CAAgBA,EAAIlC,iBAAiBmC,MAArC,CAA6CD,GAA7C,CAAkD,CAC9C,GAAIlC,iBAAiBkC,CAAjB,IAAwBF,aAA5B,CAA2C,CACvCI,6BAA6BF,CAA7B,EACA,MACH,CACJ,CACJ,CAED,IAAK,GAAIA,IAAI,CAAb,CAAgBA,GAAIvC,WAAWwC,MAA/B,CAAuCD,IAAvC,CAA4C,CACxCG,6BAA6B,IAA7B,CAAmC1C,WAAWuC,EAAX,CAAnC,EACH,CACJ,CAED,QAASI,MAAT,EAAiB,CACb1C,WAAW2C,mBAAX,GACAzB,kBACA3B,UAAY,IAAZ,CACAQ,WAAa,EAAb,CACH,CAED,QAAS6C,MAAT,EAAiB,CACb3B,uBAEAX,iBAAmB,IAAnB,CACAD,WAAa,IAAb,CACAL,WAAa,IAAb,CACH,CAED,QAAS6C,qBAAT,CAA8BC,CAA9B,CAAiC,CAC7B,GAAMC,OAAQD,EAAEC,KAAhB,CAEA,GAAIA,MAAMC,SAAN,CAAgBC,gBAApB,CAAsC,CAClCC,OAAOH,MAAMI,KAAb,CAAoBJ,KAApB,EACH,CACJ,CAED,QAAStB,aAAT,EAAwB,CACpBhB,eAAiB,EAAjB,CACAT,WAAa,yBAAWf,OAAX,EAAoBE,WAApB,EAAb,CACAa,WAAW0B,SAAX,CAAqB,CACjBrB,WAAYA,UADK,CAArB,EAGAL,WAAWoB,UAAX,GACA7B,UAAY,wBAAUN,OAAV,EAAmBE,WAAnB,EAAZ,CACAqB,uBAAyB,IAAzB,CACAE,kBAAoB,CAApB,CACAE,2BAA6B,EAA7B,CACAD,2BAA6B,IAA7B,CACAvB,oBAAsB,IAAtB,CACAyB,uBAAyB,qCAAuB5B,OAAvB,EAAgCE,WAAhC,EAAzB,CAEA,GAAMiE,kBAAmB9C,iBAAiB+C,yBAAjB,EAAzB,CACA,IAAK,GAAMf,EAAX,GAAgBc,iBAAhB,CAAkC,CAC9B,GAAIA,iBAAiBd,CAAjB,EAAoBgB,OAApB,KAAkC,OAAtC,CAA+C,CAC3CxC,cAAgBsC,iBAAiBd,CAAjB,EAAoBiB,qBAApB,GAA4CC,aAA5D,CACA,MACH,CACJ,CAEDtE,SAASuE,EAAT,CAAYC,iBAAOC,oBAAnB,CAAyCd,oBAAzC,CAA+D,IAA/D,EACA3D,SAASuE,EAAT,CAAYC,iBAAOE,cAAnB,CAAmCC,oBAAnC,CAAyD,IAAzD,EACH,CAED,QAASC,cAAT,EAAyB,CACrB5E,SAAS6E,GAAT,CAAaL,iBAAOC,oBAApB,CAA0Cd,oBAA1C,CAAgE,IAAhE,EACA3D,SAAS6E,GAAT,CAAaL,iBAAOE,cAApB,CAAoCC,oBAApC,CAA0D,IAA1D,EACA,GAAI7D,UAAJ,CAAgB,CACZA,WAAW2C,mBAAX,GACH,CACDvD,oBAAsB,KAAtB,CACAqB,eAAiB,EAAjB,CACAG,2BAA6B,CAAC,IAAD,CAAO,IAAP,CAA7B,CACAD,2BAA6B,IAA7B,CACH,CAED,QAASqD,iBAAT,CAA0BhB,SAA1B,CAAqC,CACjC,GAAI,CAAC5D,mBAAL,CAA0B,CACtBqC,eACH,CACD,GAAIuB,SAAJ,CAAe,CACX,GAAIA,UAAUiB,EAAV,GAAiB/B,oBAAUgC,GAA3B,EAAkClB,UAAUiB,EAAV,GAAiB/B,oBAAUiC,GAAjE,CAAsE,CAClE,IAAK,GAAI7B,GAAI,CAAb,CAAgBA,EAAI7B,eAAe8B,MAAnC,CAA2CD,GAA3C,CAAgD,CAC5C,GAAI7B,eAAe6B,CAAf,EAAkB2B,EAAlB,GAAyBjB,UAAUiB,EAAvC,CAA2C,CACvC,OACH,CACJ,CACDxD,eAAe2D,IAAf,CAAoBpB,SAApB,EACH,CAPD,IAOO,CACH1D,OAAO+E,IAAP,CAAY,kBAAoBrB,UAAUiB,EAA9B,CAAmC,iBAA/C,EACH,CACJ,CACJ,CAED,QAASvC,UAAT,CAAmB4C,MAAnB,CAA2B,CACvB,GAAI,CAACA,MAAL,CAAa,CACT,OACH,CACD,GAAIA,OAAO9E,UAAX,CAAuB,CACnBA,WAAa8E,OAAO9E,UAApB,CACH,CACD,GAAI8E,OAAO7E,OAAX,CAAoB,CAChBA,QAAU6E,OAAO7E,OAAjB,CACH,CACD,GAAI6E,OAAO5E,aAAX,CAA0B,CACtBA,cAAgB4E,OAAO5E,aAAvB,CACH,CACD,GAAI4E,OAAO3E,eAAX,CAA4B,CACxBA,gBAAkB2E,OAAO3E,eAAzB,CACH,CACD,GAAI2E,OAAOjE,UAAX,CAAuB,CACnBA,WAAaiE,OAAOjE,UAApB,CACH,CACD,GAAIiE,OAAOhE,gBAAX,CAA6B,CACzBA,iBAAmBgE,OAAOhE,gBAA1B,CACH,CACD,GAAIgE,OAAOtE,UAAX,CAAuB,CACnBA,WAAasE,OAAOtE,UAApB,CACH,CACD,GAAIsE,OAAOzE,SAAX,CAAsB,CAClBA,UAAYyE,OAAOzE,SAAnB,CACH,CACD,GAAIyE,OAAOxE,UAAX,CAAuB,CACnBA,WAAawE,OAAOxE,UAApB,CACH,CACJ,CAED,QAASyE,UAAT,EAAqB,CACjB,GAAMD,QAAS,CACX9C,cAAevB,uBADJ,CAEXG,iBAAkBA,gBAFP,CAGXC,WAAYA,UAHD,CAAf,CAMA,MAAOiE,OAAP,CACH,CAED,QAAS9B,6BAAT,CAAsCgC,GAAtC,CAA2C,CACvChE,uBAAyBgE,GAAzB,CACH,CAED,QAAS/B,6BAAT,CAAsCgC,WAAtC,CAAmDzB,SAAnD,CAA8D,CAC1D,GAAM0B,eAAgB,GAAIC,wBAAJ,EAAtB,CACA,GAAMC,cAAe,CAAEC,SAAU,WAAZ,CAAyBC,QAAS,UAAlC,CAArB,CAAqE;AACrE,GAAMC,SAAU,QAAVA,QAAU,EAAY,CACxB,GAAIC,MAAQhC,UAAUiC,KAAV,CAAgB1C,MAAhB,CAAyB,CAA1B,CAA+BqC,aAAa5B,UAAUiC,KAAV,CAAgB,CAAhB,CAAb,CAA/B,CAAkEL,aAAaE,OAA1F,CACAE,KAAQA,OAASJ,aAAaE,OAAtB,EAAiCE,OAASJ,aAAaC,QAAxD,CAAoEG,IAApE,CAA2EJ,aAAaE,OAA/F,CACA,MAAOE,KAAP,CACH,CAJD,CAMA,GAAME,WAAY,QAAZA,UAAY,EAAY,CAC1B,GAAIC,MAAO,KAAX,CACA,GAAInC,UAAUoC,KAAV,EAAmBpC,UAAUoC,KAAV,CAAgBC,MAAhB,CAAuBnD,oBAAUoD,IAAjC,GAA0C,CAAjE,CAAoE,CAChEH,KAAO,IAAP,CACH,CACD,GAAInC,UAAU3B,QAAV,EAAsB2B,UAAU3B,QAAV,CAAmBgE,MAAnB,CAA0BnD,oBAAUqD,IAApC,GAA6C,CAAvE,CAA0E,CACtEJ,KAAO,IAAP,CACH,CACD,MAAOA,KAAP,CACH,CATD,CAWAT,cAAcD,WAAd,CAA4BA,WAA5B,CACAC,cAAcc,IAAd,CAAqBxC,UAAUwC,IAA/B,CACAd,cAAce,MAAd,CAAuBzC,UAAUyC,MAAjC,CACAf,cAAcT,EAAd,CAAmBjB,UAAUiB,EAAV,CAAejB,UAAUiB,EAAzB,CAA8BjB,UAAU0C,KAA3D,CAAkE;AAClEhB,cAAcgB,KAAd,CAAsB1C,UAAU0C,KAAhC,CAAuC;AACvChB,cAAciB,MAAd,CAAuBT,WAAvB,CACAR,cAAckB,YAAd,CAA6BC,aAAa7C,SAAb,CAA7B,CACA0B,cAAc9C,YAAd,CAA6B,CAACnC,QAAQoC,cAAR,CAAuBmB,UAAU3B,QAAjC,CAA9B,CACAqD,cAAcoB,UAAd,CAA2B9C,UAAU8C,UAAV,CAAuB,IAAvB,CAA8B,KAAzD,CACApB,cAAcM,IAAd,CAAqBD,SAArB,CACAL,cAAcO,KAAd,CAAsBjC,UAAUiC,KAAhC,CACAP,cAAcqB,aAAd,CAA8B/C,UAAU+C,aAAxC,CACA,GAAMC,eAAgB,CAACjG,WAAaA,WAAWwC,MAAxB,CAAiC,CAAlC,EAAuC9B,eAAe8B,MAA5E,CACAvC,WAAWiG,YAAX,CAAwBvB,aAAxB,CAAuCsB,aAAvC,EACH,CAED,QAAS9C,OAAT,CAAgBC,KAAhB,CAAuBJ,KAAvB,CAA8B,CAC1B,GAAImD,cAAJ,CACIC,iBADJ,CAEI7D,QAFJ,CAEO8D,QAFP,CAEUC,QAFV,CAGIC,kBAHJ,CAIIC,gBAJJ,CAKA,GAAMvD,WAAYD,MAAMC,SAAxB,CACA,GAAMwD,WAAYxD,UAAUyD,IAA5B,CACA,GAAMpF,UAAW2B,UAAU3B,QAA3B,CACA,GAAMqF,WAAY1D,UAAUoC,KAAV,EAAmB/D,QAArC,CACA,GAAI,CAACqF,SAAL,CAAgB,CACZpH,OAAOqH,KAAP,CAAa,sBAAb,EACA,OACH,CAED,GAAIH,YAActE,oBAAUC,eAA5B,CAA6C,CACzC,GAAI,CAACjC,6BAAD,EAAkC6C,MAAM6D,WAAN,GAAsB,uBAA5D,CAAqF,CACjF1G,8BAAgC,IAAhC,CACAC,UAAYZ,UAAUsH,yBAAV,CAAoC1D,KAApC,CAAZ,CACH,CAHD,IAGO,CACH,GAAI,CAACjD,6BAAL,CAAoC,CAChC,OACH,CACDoG,YAAc/G,UAAUuH,cAAV,CAAyB3D,KAAzB,CAAd,CACAgD,WAAaG,YAAYH,UAAzB,CACA,GAAI5F,+BAAiC,IAAjC,EAAyC4F,WAAW5D,MAAX,CAAoB,CAAjE,CAAoE,CAChEhC,6BAA+B4F,WAAW,CAAX,EAAcY,GAAd,CAAoBhE,MAAMiE,KAAN,CAAc7G,SAAjE,CACH,CACD,GAAIuG,UAAUrB,MAAV,CAAiBnD,oBAAUoD,IAA3B,GAAoC,CAAxC,CAA2C,CACvC1F,OAASA,SAAW,IAAX,CAAkBA,MAAlB,CAA2BqH,UAAUP,SAAV,CAApC,CACA,IAAKpE,EAAI,CAAT,CAAYA,EAAI6D,WAAW5D,MAA3B,CAAmCD,GAAnC,CAAwC,CACpC,GAAM4E,QAASf,WAAW7D,CAAX,CAAf,CACA,GAAM6E,aAAcD,OAAOH,GAA3B,CACA,GAAMK,gBAAiBD,YAAc5G,4BAArC,CACA,KAAKwB,QAAL,CAAcsF,GAAd,CAAkBD,eAAiBjH,SAAnC,CAA8C,CAACiH,eAAiBF,OAAOI,QAAzB,EAAqCnH,SAAnF,EACA,GAAMoH,UAAW,GAAIC,SAAJ,CAAarE,KAAb,CAAoB+D,OAAOO,MAA3B,CAAmCP,OAAOQ,QAAP,CAAgB,CAAhB,CAAnC,CAAjB,CACAnB,UAAYoB,wBAASC,KAAT,CAAeC,gBAAf,CAAgCN,QAAhC,CAA0CrF,oBAAU4F,IAApD,CAAZ,CACA,GAAMC,QAAS,EAAf,CACA,GAAIC,WAAYd,OAAOO,MAAP,CAAgBP,OAAOQ,QAAP,CAAgB,CAAhB,CAAhC,CACA,IAAKtB,EAAI,CAAT,CAAYA,EAAIc,OAAOQ,QAAP,CAAgBnF,MAAhC,CAAwC6D,GAAxC,CAA6C,CACzC,GAAM6B,QAAS,GAAIC,WAAJ,CAAe/E,KAAf,CAAsB6E,SAAtB,CAAiCd,OAAOQ,QAAP,CAAgBtB,CAAhB,CAAjC,CAAf,CACA,GAAM+B,KAAMC,OAAOC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,CAAgCL,MAAhC,CAAZ,CACAF,OAAO3D,IAAP,CAAY+D,GAAZ,EACAH,WAAad,OAAOQ,QAAP,CAAgBtB,CAAhB,CAAb,CACH,CACD,GAAI,CACA;AACA,GAAMmC,UAAW7I,cAAc8I,QAAd,EAAjB,CACA,GAAMC,YAAaF,SAASG,kBAAT,CAA8BvB,YAAchH,SAA5C,CAAwD,CAA3E,CACA+F,OAAStG,OAAO+I,KAAP,CAAapC,SAAb,CAAwBkC,UAAxB,CAAoCtB,YAAchH,SAAlD,CAA6D,CAACgH,YAAcD,OAAOI,QAAtB,EAAkCnH,SAA/F,CAA0G4H,MAA1G,CAAT,CACA/H,WAAW4I,WAAX,CAAuBpI,sBAAvB,CAA+CD,6BAA+BJ,SAA9E,CAAyF+F,MAAzF,EACH,CAAC,MAAOpD,CAAP,CAAU,CACR7C,wBAAwB4I,gCAAxB,GACA,KAAKC,MAAL,GACAxJ,OAAOqH,KAAP,CAAa,sBAAwB7D,EAAEiG,OAAvC,EACH,CACJ,CACJ,CA7BD,IA6BO,CACH;AACA,GAAMC,cAAe,EAArB,CACA,IAAK1G,EAAI,CAAT,CAAaA,EAAI6D,WAAW5D,MAA5B,CAAoCD,GAApC,CAAyC,CACrC,GAAM4E,SAASf,WAAW7D,CAAX,CAAf,CACA4E,QAAOH,GAAP,EAAcxG,4BAAd,CACA,KAAKwB,QAAL,CAAcsF,GAAd,CAAkBH,QAAOH,GAAP,CAAa5G,SAA/B,CAA0C,CAAC+G,QAAOH,GAAP,CAAaG,QAAOI,QAArB,EAAiCnH,SAA3E,EACA,GAAM8I,YAAa9F,MAAM+F,KAAN,CAAYhC,QAAOO,MAAnB,CAA2BP,QAAOO,MAAP,CAAgBP,QAAOiC,IAAlD,CAAnB,CACA;AACA,GAAMC,aAAczB,wBAAS0B,WAAT,CAAqBJ,UAArB,CAApB,CAEA,IAAK7C,EAAI,CAAT,CAAaA,EAAIgD,YAAYE,KAAZ,CAAkB/G,MAAnC,CAA2C6D,GAA3C,CAAgD,CAC5C,GAAMmD,MAAOH,YAAYE,KAAZ,CAAkBlD,CAAlB,CAAb,CACA9G,OAAOkK,KAAP,CAAa,aAAeD,KAAK9C,IAAjC,EACA,GAAI8C,KAAK9C,IAAL,GAAc,MAAlB,CAA0B,CACtB,SAAU;AACb,CACD,GAAI8C,KAAK9C,IAAL,GAAc,MAAlB,CAA0B,CACtBnH,OAAOkK,KAAP,CAAa,2BAA6BD,KAAKD,KAAL,CAAW/G,MAArD,EACA,IAAK8D,EAAI,CAAT,CAAaA,EAAIkD,KAAKD,KAAL,CAAW/G,MAA5B,CAAoC8D,GAApC,CAAyC,CACrC,GAAMoD,MAAOF,KAAKD,KAAL,CAAWjD,CAAX,CAAb,CACA/G,OAAOkK,KAAP,CAAa,aAAeC,KAAKhD,IAAjC,EACA,GAAIgD,KAAKhD,IAAL,GAAc,MAAlB,CAA0B,CACtB,GAAMiD,UAAWD,KAAKC,QAAtB,CACApK,OAAOkK,KAAP,CAAa,kBAAoBE,QAAjC,EACA,GAAMC,YAAazC,QAAOH,GAAP,CAAa5G,SAAhC,CACA,GAAMyJ,UAAW,CAAC1C,QAAOH,GAAP,CAAaG,QAAOI,QAArB,EAAiCnH,SAAlD,CACA6I,aAAa5E,IAAb,CAAkB,CACd4C,MAAO2C,UADO,CAEdE,IAAKD,QAFS,CAGdE,KAAMJ,QAHQ,CAIdK,OAAQ,EAJM,CAAlB,EAMAzK,OAAOkK,KAAP,CAAa,OAASG,UAAT,CAAsB,GAAtB,CAA4BC,QAA5B,CAAuC,KAAvC,CAA+CF,QAA5D,EACH,CACJ,CACJ,CACJ,CACJ,CACD,GAAIV,aAAazG,MAAb,CAAsB,CAA1B,CAA6B,CACzBvC,WAAW4I,WAAX,CAAuBpI,sBAAvB,CAA+C,CAA/C,CAAkDwI,YAAlD,EACH,CACJ,CACJ,CACJ,CAtFD,IAsFO,IAAIxC,YAActE,oBAAU8H,IAA5B,CAAkC,CACrC,GAAMzC,WAAW,GAAIC,SAAJ,CAAarE,KAAb,CAAoB,CAApB,CAAuBA,MAAM8G,UAA7B,CAAjB,CACA1D,UAAYoB,wBAASC,KAAT,CAAeC,gBAAf,CAAgCN,SAAhC,CAA0CrF,oBAAU4F,IAApD,CAAZ,CAEA,GAAI,CACA5B,OAASe,UAAUP,SAAV,EAAqBiC,KAArB,CAA2BpC,SAA3B,CAAsC,CAAtC,CAAT,CACAvG,WAAW4I,WAAX,CAAuB5I,WAAWkK,kBAAX,EAAvB,CAAwD,CAAxD,CAA2DhE,MAA3D,EACH,CAAC,MAAOpD,CAAP,CAAU,CACRtD,WAAWmH,KAAX,CAAiB,GAAIwD,sBAAJ,CAAgBC,iBAAOC,8BAAvB,CAAuDD,iBAAOE,8BAAP,CAAwCxH,EAAEiG,OAAjG,CAA0GxC,SAA1G,CAAjB,EACH,CACJ,CAVM,IAUA,IAAIC,YAActE,oBAAUqI,KAA5B,CAAmC,CAAE;AACxC,GAAIxH,MAAM6D,WAAN,GAAsB4D,yBAAYC,iBAAtC,CAAyD,CACrD,GAAI/J,oBAAsB,CAA1B,CAA6B,CACzBA,kBAAoBnB,UAAUsH,yBAAV,CAAoC1D,KAApC,CAApB,CACA,IAAKb,EAAI,CAAT,CAAYA,EAAI7B,eAAe8B,MAA/B,CAAuCD,GAAvC,CAA4C,CACxCG,6BAA6B,IAA7B,CAAmChC,eAAe6B,CAAf,CAAnC,EACH,CACJ,CACJ,CAPD,IAOO,CAAE;AACL,GAAI5B,oBAAsB,CAA1B,CAA6B,CACzBpB,OAAO+E,IAAP,CAAY,iDAAZ,EACA,OACH,CACD,GAAMqG,sBAAuB,QAAvBA,qBAAuB,CAAUC,IAAV,CAAgBC,UAAhB,CAA4B,CACrD,QAASC,OAAT,CAAgBC,SAAhB,CAA2BC,OAA3B,CAAoCC,aAApC,CAAmD,CAC/C,GAAIC,eAAgB,IAApB,CACA,GAAI5K,WAAW6K,mBAAX,EAAJ,CAAsC,CAClCD,cAAgBpK,uBAAuBsK,4BAAvB,CAAoD9K,WAAW+K,UAAX,EAApD,CAA6EN,SAA7E,CAAwFC,OAAxF,CAAiGC,aAAjG,CAAhB,CACH,CAFD,IAEO,CACH,GAAMK,MAAOL,cAAcM,cAAd,EAAb,CACAL,cAAgB,CAAC,CACbjE,MAAO8D,SADM,CAEbjB,IAAKkB,OAFQ,CAGbjB,KAAMuB,IAHO,CAIbtB,OAAQ,EAJK,CAAD,CAAhB,CAMH,CACD,GAAIkB,aAAJ,CAAmB,CACfjL,WAAW4I,WAAX,CAAuBgC,UAAvB,CAAmC,CAAnC,CAAsCK,aAAtC,EACH,CACJ,CACD,MAAOJ,OAAP,CACH,CAnBD,CAqBAvE,YAAc/G,UAAUuH,cAAV,CAAyB3D,KAAzB,CAAd,CAEA,GAAMoI,gBAAiBjF,YAAYkF,kBAAnC,CAEA,GAAI,CAAC5K,2BAA2B,CAA3B,CAAD,EAAkC,CAACA,2BAA2B,CAA3B,CAAvC,CAAsE,CAClE;AACA,GAAI6K,aAAJ,CAAWC,cAAX,CAAoBC,eAApB,CACA,IAAKrJ,EAAI,CAAT,CAAYA,EAAI7B,eAAe8B,MAA/B,CAAuCD,GAAvC,CAA4C,CACxC,GAAI7B,eAAe6B,CAAf,EAAkB2B,EAAlB,GAAyB/B,oBAAUgC,GAAvC,CAA4C,CACxCuH,MAAQ,CAAR,CACAE,SAAW3L,WAAW4L,gBAAX,CAA4B1J,oBAAUgC,GAAtC,CAAX,CACH,CAHD,IAGO,IAAIzD,eAAe6B,CAAf,EAAkB2B,EAAlB,GAAyB/B,oBAAUiC,GAAvC,CAA4C,CAC/CsH,MAAQ,CAAR,CACAE,SAAW3L,WAAW4L,gBAAX,CAA4B1J,oBAAUiC,GAAtC,CAAX,CACH,CACD,GAAIwH,WAAa,CAAC,CAAlB,CAAqB,CACjBrM,OAAO+E,IAAP,CAAY,sCAAZ,EACA,OACH,CACDqH,QAAUhB,qBAAqB,IAArB,CAA2BiB,QAA3B,CAAV,CACA/K,2BAA2B0B,CAA3B,EAAgC,GAAIuJ,wBAAaC,YAAjB,CAA8BxJ,EAAI,CAAlC,CAAqC,CACjE,SAAUoJ,OADuD,CAArC,CAE7B,IAF6B,CAAhC,CAGH,CACJ,CAED,GAAIhL,iBAAJ,CAAuB,CACnB,GAAIC,6BAA+B,IAA/B,EAAuC4K,iBAAmB5K,2BAA6B2F,YAAYyF,YAAvG,CAAqH,CACjH,IAAKzJ,EAAI,CAAT,CAAYA,EAAI1B,2BAA2B2B,MAA3C,CAAmDD,GAAnD,CAAwD,CACpD,GAAI1B,2BAA2B0B,CAA3B,CAAJ,CAAmC,CAC/B1B,2BAA2B0B,CAA3B,EAA8BM,KAA9B,GACH,CACJ,CACJ,CAED,GAAMoJ,WAAYC,kBAAkB9I,KAAlB,CAAyBmD,YAAYH,UAArC,CAAlB,CAEA,IAAK,GAAI+F,SAAU,CAAnB,CAAsBA,QAAUtL,2BAA2B2B,MAA3D,CAAmE2J,SAAnE,CAA8E,CAC1E,GAAMC,QAASH,UAAUI,MAAV,CAAiBF,OAAjB,CAAf,CACA,GAAMG,aAAczL,2BAA2BsL,OAA3B,CAApB,CACA,GAAIG,WAAJ,CAAiB,CACb,IAAK/J,EAAI,CAAT,CAAYA,EAAI6J,OAAO5J,MAAvB,CAA+BD,GAA/B,CAAoC,CAChC+J,YAAYC,OAAZ,CAAoBH,OAAO7J,CAAP,EAAU,CAAV,EAAe5B,iBAAnC,CAAsDyL,OAAO7J,CAAP,EAAU,CAAV,CAAtD,EACH,CACJ,CACJ,CACD3B,2BAA6B4K,cAA7B,CACH,CACJ,CACJ,CACJ,CACD;;;;;OAMA,QAASU,kBAAT,CAA2BnC,IAA3B,CAAiCyC,OAAjC,CAA0C,CACtC,GAAIA,QAAQhK,MAAR,GAAmB,CAAvB,CAA0B,CACtB,MAAO,KAAP,CACH,CAED,GAAMyJ,WAAY,CACdQ,OAAQ,EADM,CAEdJ,OAAQ,CAAC,EAAD,CAAK,EAAL,CAFM,CAAlB,CAIA,GAAMjE,KAAM,GAAIX,SAAJ,CAAasC,IAAb,CAAZ,CACA,IAAK,GAAIxH,GAAI,CAAb,CAAgBA,EAAIiK,QAAQhK,MAA5B,CAAoCD,GAApC,CAAyC,CACrC,GAAM4E,QAASqF,QAAQjK,CAAR,CAAf,CACA,GAAMmK,cAAeZ,uBAAaa,eAAb,CAA6BvE,GAA7B,CAAkCjB,OAAOO,MAAzC,CAAiDP,OAAOiC,IAAxD,CAArB,CACA,GAAIwD,gBAAiB,IAArB,CACA,GAAInI,KAAM,CAAV,CACA,IAAK,GAAI4B,GAAI,CAAb,CAAgBA,EAAIqG,aAAalK,MAAjC,CAAyC6D,GAAzC,CAA8C,CAC1C,GAAM+F,QAASN,uBAAae,0BAAb,CAAwCzE,GAAxC,CAA6CsE,aAAarG,CAAb,CAA7C,CAAf,CACA,IAAK,GAAIC,GAAI,CAAb,CAAgBA,EAAI,CAApB,CAAuBA,GAAvB,CAA4B,CACxB,GAAI8F,OAAO9F,CAAP,EAAU9D,MAAV,CAAmB,CAAvB,CAA0B,CACtB,GAAI2E,OAAOH,GAAP,GAAe4F,cAAnB,CAAmC,CAC/BnI,IAAM,CAAN,CACH,CAFD,IAEO,CACHA,KAAO,CAAP,CACH,CACDwH,UAAUI,MAAV,CAAiB/F,CAAjB,EAAoBjC,IAApB,CAAyB,CAAC8C,OAAOH,GAAP,CAAcjG,cAAgBJ,iBAA/B,CAAmDyL,OAAO9F,CAAP,CAAnD,CAA8D7B,GAA9D,CAAzB,EACAmI,eAAiBzF,OAAOH,GAAxB,CACH,CACJ,CACJ,CACJ,CAED;AACA;AACA;AACAiF,UAAUI,MAAV,CAAiBS,OAAjB,CAAyB,QAASC,UAAT,CAAmBrB,KAAnB,CAA0B,CAC/CA,MAAMsB,IAAN,CAAW,SAAUC,CAAV,CAAaC,CAAb,CAAgB,CACvB,GAAID,EAAE,CAAF,IAASC,EAAE,CAAF,CAAb,CAAmB,CACf,MAAOD,GAAE,CAAF,EAAOC,EAAE,CAAF,CAAd,CACH,CACD,MAAOD,GAAE,CAAF,EAAOC,EAAE,CAAF,CAAd,CACH,CALD,EAMH,CAPD,EASA,MAAOjB,UAAP,CACH,CAED,QAASnG,aAAT,CAAsB7C,SAAtB,CAAiC,CAC7B;AACA;AACA;AACA,GAAIkK,WAAY,KAAhB,CACA,GAAIzM,eAAe8B,MAAf,CAAwB,CAAxB,EAA6BS,UAAU8C,UAA3C,CAAuD,CACnDoH,UAAalK,UAAUiB,EAAV,EAAgBjB,UAAUiB,EAAV,GAAiB/B,oBAAUgC,GAAxD,CAA8D;AACjE,CAFD,IAEO,IAAIzD,eAAe8B,MAAf,GAA0B,CAA9B,CAAiC,CACpC,GAAIS,UAAUiB,EAAV,EAAgB,MAAOjB,WAAUiB,EAAjB,GAAwB,QAAxC,EAAoDjB,UAAUiB,EAAV,CAAakJ,SAAb,CAAuB,CAAvB,CAA0B,CAA1B,IAAiC,IAAzF,CAA+F,CAAE;AAC7FD,UAAY,IAAZ,CACH,CACJ,CAJM,IAIA,IAAIzM,eAAe8B,MAAf,GAA0B,CAA9B,CAAiC,CACpC2K,UAAalK,UAAU0C,KAAV,GAAoB3F,WAAW,CAAX,EAAc2F,KAA/C,CACH,CACD,MAAOwH,UAAP,CACH,CAED,QAASjG,UAAT,CAAmBP,SAAnB,CAA8B,CAC1B,GAAI9G,cAAJ,CACA,GAAI8G,UAAUrB,MAAV,CAAiBnD,oBAAUkL,GAA3B,GAAmC,CAAvC,CAA0C,CACtCxN,OAASC,SAAT,CACH,CAFD,IAEO,IAAI6G,UAAUrB,MAAV,CAAiBnD,oBAAUqD,IAA3B,GAAoC,CAApC,EAAyCmB,UAAUrB,MAAV,CAAiBnD,oBAAUoD,IAA3B,GAAoC,CAAjF,CAAoF,CACvF1F,OAASE,UAAT,CACH,CACD,MAAOF,OAAP,CACH,CAED,QAASkJ,OAAT,CAAgB9B,KAAhB,CAAuB6C,GAAvB,CAA4B,CACxB;AACA,GAAK7C,QAAUqG,SAAX,EAA0BrG,QAAU6C,GAAxC,CAA8C,CAC1C7C,MAAQ,KAAKjF,QAAL,CAAciF,KAAd,CAAoB,CAApB,CAAR,CACA6C,IAAM,KAAK9H,QAAL,CAAc8H,GAAd,CAAkB,KAAK9H,QAAL,CAAcQ,MAAd,CAAuB,CAAzC,CAAN,CACH,CACD,KAAKR,QAAL,CAAc+G,MAAd,CAAqB9B,KAArB,CAA4B6C,GAA5B,EACH,CAED,QAAShG,qBAAT,CAA8Bf,CAA9B,CAAiC,CAC7BrC,eAAeoM,OAAf,CAAuB,SAAUS,KAAV,CAAiB,CACpC,GAAM3B,UAAW3L,WAAW4L,gBAAX,CAA4B0B,MAAMrJ,EAAlC,CAAjB,CACA,GAAI0H,UAAY,CAAhB,CAAmB,CACf3L,WAAWuN,sBAAX,CAAkC5B,QAAlC,CAA4C7I,EAAE0K,IAA9C,CAAoD1K,EAAE2K,EAAtD,EACH,CACJ,CALD,EAMH,CAEDpO,SAAW,CACP+B,WAAYA,UADL,CAEP8B,OAAQA,MAFD,CAGPR,MAAOA,KAHA,CAIPsB,iBAAkBA,gBAJX,CAKPF,cAAeA,aALR,CAMPpC,UAAWA,SANJ,CAOP6C,UAAWA,SAPJ,CAQP/B,6BAA8BA,4BARvB,CASPsG,OAAQA,MATD,CAUPlG,MAAOA,KAVA,CAAX,CAaA7B,QAEA,MAAO1B,SAAP,CACH,CApmBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsmBAL,iBAAiB0O,qBAAjB,CAAyC,kBAAzC,C,gBACeC,uBAAaC,mBAAb,CAAiC5O,gBAAjC,C","file":"TextSourceBuffer.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport { HTTPRequest } from '../vo/metrics/HTTPRequest';\r\nimport TextTrackInfo from '../vo/TextTrackInfo';\r\nimport BoxParser from '../utils/BoxParser';\r\nimport CustomTimeRanges from '../utils/CustomTimeRanges';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport TextTracks from './TextTracks';\r\nimport EmbeddedTextHtmlRender from './EmbeddedTextHtmlRender';\r\nimport ISOBoxer from 'codem-isoboxer';\r\nimport cea608parser from '../../../externals/cea608-parser';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport DashJSError from '../vo/DashJSError';\r\nimport Errors from '../../core/errors/Errors';\r\n\r\nfunction TextSourceBuffer() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    let embeddedInitialized = false;\r\n\r\n    let instance,\r\n        logger,\r\n        boxParser,\r\n        errHandler,\r\n        adapter,\r\n        manifestModel,\r\n        mediaController,\r\n        parser,\r\n        vttParser,\r\n        ttmlParser,\r\n        mediaInfos,\r\n        textTracks,\r\n        fragmentedFragmentModel,\r\n        initializationSegmentReceived,\r\n        timescale,\r\n        fragmentedTracks,\r\n        videoModel,\r\n        streamController,\r\n        firstFragmentedSubtitleStart,\r\n        currFragmentedTrackIdx,\r\n        embeddedTracks,\r\n        embeddedTimescale,\r\n        embeddedLastSequenceNumber,\r\n        embeddedCea608FieldParsers,\r\n        embeddedTextHtmlRender,\r\n        mseTimeOffset;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function resetFragmented () {\r\n        fragmentedFragmentModel = null;\r\n        timescale = NaN;\r\n        fragmentedTracks = [];\r\n        firstFragmentedSubtitleStart = null;\r\n        initializationSegmentReceived = false;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        resetFragmented();\r\n\r\n        mediaInfos = [];\r\n        parser = null;\r\n    }\r\n\r\n    function initialize(mimeType, streamInfo, mediaInfoArr, fragmentModel) {\r\n        if (!embeddedInitialized) {\r\n            initEmbedded();\r\n        }\r\n\r\n        textTracks.setConfig({\r\n            videoModel: videoModel\r\n        });\r\n        textTracks.initialize();\r\n\r\n        if (!boxParser) {\r\n            boxParser = BoxParser(context).getInstance();\r\n        }\r\n\r\n        addMediaInfos(mimeType, streamInfo, mediaInfoArr, fragmentModel);\r\n    }\r\n\r\n    function addMediaInfos(mimeType, streamInfo, mediaInfoArr, fragmentModel) {\r\n        const isFragmented = !adapter.getIsTextTrack(mimeType);\r\n\r\n        mediaInfos = mediaInfos.concat(mediaInfoArr);\r\n\r\n        if (isFragmented) {\r\n            fragmentedFragmentModel = fragmentModel;\r\n            instance.buffered = CustomTimeRanges(context).create();\r\n            fragmentedTracks = mediaController.getTracksFor(Constants.FRAGMENTED_TEXT, streamInfo);\r\n            const currFragTrack = mediaController.getCurrentTrackFor(Constants.FRAGMENTED_TEXT, streamInfo);\r\n            for (let i = 0; i < fragmentedTracks.length; i++) {\r\n                if (fragmentedTracks[i] === currFragTrack) {\r\n                    setCurrentFragmentedTrackIdx(i);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < mediaInfos.length; i++) {\r\n            createTextTrackFromMediaInfo(null, mediaInfos[i]);\r\n        }\r\n    }\r\n\r\n    function abort() {\r\n        textTracks.deleteAllTextTracks();\r\n        resetFragmented();\r\n        boxParser = null;\r\n        mediaInfos = [];\r\n    }\r\n\r\n    function reset() {\r\n        resetInitialSettings();\r\n\r\n        streamController = null;\r\n        videoModel = null;\r\n        textTracks = null;\r\n    }\r\n\r\n    function onVideoChunkReceived(e) {\r\n        const chunk = e.chunk;\r\n\r\n        if (chunk.mediaInfo.embeddedCaptions) {\r\n            append(chunk.bytes, chunk);\r\n        }\r\n    }\r\n\r\n    function initEmbedded() {\r\n        embeddedTracks = [];\r\n        textTracks = TextTracks(context).getInstance();\r\n        textTracks.setConfig({\r\n            videoModel: videoModel\r\n        });\r\n        textTracks.initialize();\r\n        boxParser = BoxParser(context).getInstance();\r\n        currFragmentedTrackIdx = null;\r\n        embeddedTimescale = 0;\r\n        embeddedCea608FieldParsers = [];\r\n        embeddedLastSequenceNumber = null;\r\n        embeddedInitialized = true;\r\n        embeddedTextHtmlRender = EmbeddedTextHtmlRender(context).getInstance();\r\n\r\n        const streamProcessors = streamController.getActiveStreamProcessors();\r\n        for (const i in streamProcessors) {\r\n            if (streamProcessors[i].getType() === 'video') {\r\n                mseTimeOffset = streamProcessors[i].getRepresentationInfo().MSETimeOffset;\r\n                break;\r\n            }\r\n        }\r\n\r\n        eventBus.on(Events.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);\r\n        eventBus.on(Events.BUFFER_CLEARED, onVideoBufferCleared, this);\r\n    }\r\n\r\n    function resetEmbedded() {\r\n        eventBus.off(Events.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);\r\n        eventBus.off(Events.BUFFER_CLEARED, onVideoBufferCleared, this);\r\n        if (textTracks) {\r\n            textTracks.deleteAllTextTracks();\r\n        }\r\n        embeddedInitialized = false;\r\n        embeddedTracks = [];\r\n        embeddedCea608FieldParsers = [null, null];\r\n        embeddedLastSequenceNumber = null;\r\n    }\r\n\r\n    function addEmbeddedTrack(mediaInfo) {\r\n        if (!embeddedInitialized) {\r\n            initEmbedded();\r\n        }\r\n        if (mediaInfo) {\r\n            if (mediaInfo.id === Constants.CC1 || mediaInfo.id === Constants.CC3) {\r\n                for (let i = 0; i < embeddedTracks.length; i++) {\r\n                    if (embeddedTracks[i].id === mediaInfo.id) {\r\n                        return;\r\n                    }\r\n                }\r\n                embeddedTracks.push(mediaInfo);\r\n            } else {\r\n                logger.warn('Embedded track ' + mediaInfo.id + ' not supported!');\r\n            }\r\n        }\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) {\r\n            return;\r\n        }\r\n        if (config.errHandler) {\r\n            errHandler = config.errHandler;\r\n        }\r\n        if (config.adapter) {\r\n            adapter = config.adapter;\r\n        }\r\n        if (config.manifestModel) {\r\n            manifestModel = config.manifestModel;\r\n        }\r\n        if (config.mediaController) {\r\n            mediaController = config.mediaController;\r\n        }\r\n        if (config.videoModel) {\r\n            videoModel = config.videoModel;\r\n        }\r\n        if (config.streamController) {\r\n            streamController = config.streamController;\r\n        }\r\n        if (config.textTracks) {\r\n            textTracks = config.textTracks;\r\n        }\r\n        if (config.vttParser) {\r\n            vttParser = config.vttParser;\r\n        }\r\n        if (config.ttmlParser) {\r\n            ttmlParser = config.ttmlParser;\r\n        }\r\n    }\r\n\r\n    function getConfig() {\r\n        const config = {\r\n            fragmentModel: fragmentedFragmentModel,\r\n            fragmentedTracks: fragmentedTracks,\r\n            videoModel: videoModel\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    function setCurrentFragmentedTrackIdx(idx) {\r\n        currFragmentedTrackIdx = idx;\r\n    }\r\n\r\n    function createTextTrackFromMediaInfo(captionData, mediaInfo) {\r\n        const textTrackInfo = new TextTrackInfo();\r\n        const trackKindMap = { subtitle: 'subtitles', caption: 'captions' }; //Dash Spec has no \"s\" on end of KIND but HTML needs plural.\r\n        const getKind = function () {\r\n            let kind = (mediaInfo.roles.length > 0) ? trackKindMap[mediaInfo.roles[0]] : trackKindMap.caption;\r\n            kind = (kind === trackKindMap.caption || kind === trackKindMap.subtitle) ? kind : trackKindMap.caption;\r\n            return kind;\r\n        };\r\n\r\n        const checkTTML = function () {\r\n            let ttml = false;\r\n            if (mediaInfo.codec && mediaInfo.codec.search(Constants.STPP) >= 0) {\r\n                ttml = true;\r\n            }\r\n            if (mediaInfo.mimeType && mediaInfo.mimeType.search(Constants.TTML) >= 0) {\r\n                ttml = true;\r\n            }\r\n            return ttml;\r\n        };\r\n\r\n        textTrackInfo.captionData = captionData;\r\n        textTrackInfo.lang = mediaInfo.lang;\r\n        textTrackInfo.labels = mediaInfo.labels;\r\n        textTrackInfo.id = mediaInfo.id ? mediaInfo.id : mediaInfo.index; // AdaptationSet id (an unsigned int) as it's optional parameter, use mediaInfo.index\r\n        textTrackInfo.index = mediaInfo.index; // AdaptationSet index in manifest\r\n        textTrackInfo.isTTML = checkTTML();\r\n        textTrackInfo.defaultTrack = getIsDefault(mediaInfo);\r\n        textTrackInfo.isFragmented = !adapter.getIsTextTrack(mediaInfo.mimeType);\r\n        textTrackInfo.isEmbedded = mediaInfo.isEmbedded ? true : false;\r\n        textTrackInfo.kind = getKind();\r\n        textTrackInfo.roles = mediaInfo.roles;\r\n        textTrackInfo.accessibility = mediaInfo.accessibility;\r\n        const totalNrTracks = (mediaInfos ? mediaInfos.length : 0) + embeddedTracks.length;\r\n        textTracks.addTextTrack(textTrackInfo, totalNrTracks);\r\n    }\r\n\r\n    function append(bytes, chunk) {\r\n        let result,\r\n            sampleList,\r\n            i, j, k,\r\n            samplesInfo,\r\n            ccContent;\r\n        const mediaInfo = chunk.mediaInfo;\r\n        const mediaType = mediaInfo.type;\r\n        const mimeType = mediaInfo.mimeType;\r\n        const codecType = mediaInfo.codec || mimeType;\r\n        if (!codecType) {\r\n            logger.error('No text type defined');\r\n            return;\r\n        }\r\n\r\n        if (mediaType === Constants.FRAGMENTED_TEXT) {\r\n            if (!initializationSegmentReceived && chunk.segmentType === 'InitializationSegment') {\r\n                initializationSegmentReceived = true;\r\n                timescale = boxParser.getMediaTimescaleFromMoov(bytes);\r\n            } else {\r\n                if (!initializationSegmentReceived) {\r\n                    return;\r\n                }\r\n                samplesInfo = boxParser.getSamplesInfo(bytes);\r\n                sampleList = samplesInfo.sampleList;\r\n                if (firstFragmentedSubtitleStart === null && sampleList.length > 0) {\r\n                    firstFragmentedSubtitleStart = sampleList[0].cts - chunk.start * timescale;\r\n                }\r\n                if (codecType.search(Constants.STPP) >= 0) {\r\n                    parser = parser !== null ? parser : getParser(codecType);\r\n                    for (i = 0; i < sampleList.length; i++) {\r\n                        const sample = sampleList[i];\r\n                        const sampleStart = sample.cts;\r\n                        const sampleRelStart = sampleStart - firstFragmentedSubtitleStart;\r\n                        this.buffered.add(sampleRelStart / timescale, (sampleRelStart + sample.duration) / timescale);\r\n                        const dataView = new DataView(bytes, sample.offset, sample.subSizes[0]);\r\n                        ccContent = ISOBoxer.Utils.dataViewToString(dataView, Constants.UTF8);\r\n                        const images = [];\r\n                        let subOffset = sample.offset + sample.subSizes[0];\r\n                        for (j = 1; j < sample.subSizes.length; j++) {\r\n                            const inData = new Uint8Array(bytes, subOffset, sample.subSizes[j]);\r\n                            const raw = String.fromCharCode.apply(null, inData);\r\n                            images.push(raw);\r\n                            subOffset += sample.subSizes[j];\r\n                        }\r\n                        try {\r\n                            // Only used for Miscrosoft Smooth Streaming support - caption time is relative to sample time. In this case, we apply an offset.\r\n                            const manifest = manifestModel.getValue();\r\n                            const offsetTime = manifest.ttmlTimeIsRelative ? sampleStart / timescale : 0;\r\n                            result = parser.parse(ccContent, offsetTime, sampleStart / timescale, (sampleStart + sample.duration) / timescale, images);\r\n                            textTracks.addCaptions(currFragmentedTrackIdx, firstFragmentedSubtitleStart / timescale, result);\r\n                        } catch (e) {\r\n                            fragmentedFragmentModel.removeExecutedRequestsBeforeTime();\r\n                            this.remove();\r\n                            logger.error('TTML parser error: ' + e.message);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // WebVTT case\r\n                    const captionArray = [];\r\n                    for (i = 0 ; i < sampleList.length; i++) {\r\n                        const sample = sampleList[i];\r\n                        sample.cts -= firstFragmentedSubtitleStart;\r\n                        this.buffered.add(sample.cts / timescale, (sample.cts + sample.duration) / timescale);\r\n                        const sampleData = bytes.slice(sample.offset, sample.offset + sample.size);\r\n                        // There are boxes inside the sampleData, so we need a ISOBoxer to get at it.\r\n                        const sampleBoxes = ISOBoxer.parseBuffer(sampleData);\r\n\r\n                        for (j = 0 ; j < sampleBoxes.boxes.length; j++) {\r\n                            const box1 = sampleBoxes.boxes[j];\r\n                            logger.debug('VTT box1: ' + box1.type);\r\n                            if (box1.type === 'vtte') {\r\n                                continue; //Empty box\r\n                            }\r\n                            if (box1.type === 'vttc') {\r\n                                logger.debug('VTT vttc boxes.length = ' + box1.boxes.length);\r\n                                for (k = 0 ; k < box1.boxes.length; k++) {\r\n                                    const box2 = box1.boxes[k];\r\n                                    logger.debug('VTT box2: ' + box2.type);\r\n                                    if (box2.type === 'payl') {\r\n                                        const cue_text = box2.cue_text;\r\n                                        logger.debug('VTT cue_text = ' + cue_text);\r\n                                        const start_time = sample.cts / timescale;\r\n                                        const end_time = (sample.cts + sample.duration) / timescale;\r\n                                        captionArray.push({\r\n                                            start: start_time,\r\n                                            end: end_time,\r\n                                            data: cue_text,\r\n                                            styles: {}\r\n                                        });\r\n                                        logger.debug('VTT ' + start_time + '-' + end_time + ' : ' + cue_text);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (captionArray.length > 0) {\r\n                        textTracks.addCaptions(currFragmentedTrackIdx, 0, captionArray);\r\n                    }\r\n                }\r\n            }\r\n        } else if (mediaType === Constants.TEXT) {\r\n            const dataView = new DataView(bytes, 0, bytes.byteLength);\r\n            ccContent = ISOBoxer.Utils.dataViewToString(dataView, Constants.UTF8);\r\n\r\n            try {\r\n                result = getParser(codecType).parse(ccContent, 0);\r\n                textTracks.addCaptions(textTracks.getCurrentTrackIdx(), 0, result);\r\n            } catch (e) {\r\n                errHandler.error(new DashJSError(Errors.TIMED_TEXT_ERROR_ID_PARSE_CODE, Errors.TIMED_TEXT_ERROR_MESSAGE_PARSE + e.message, ccContent));\r\n            }\r\n        } else if (mediaType === Constants.VIDEO) { //embedded text\r\n            if (chunk.segmentType === HTTPRequest.INIT_SEGMENT_TYPE) {\r\n                if (embeddedTimescale === 0) {\r\n                    embeddedTimescale = boxParser.getMediaTimescaleFromMoov(bytes);\r\n                    for (i = 0; i < embeddedTracks.length; i++) {\r\n                        createTextTrackFromMediaInfo(null, embeddedTracks[i]);\r\n                    }\r\n                }\r\n            } else { // MediaSegment\r\n                if (embeddedTimescale === 0) {\r\n                    logger.warn('CEA-608: No timescale for embeddedTextTrack yet');\r\n                    return;\r\n                }\r\n                const makeCueAdderForIndex = function (self, trackIndex) {\r\n                    function newCue(startTime, endTime, captionScreen) {\r\n                        let captionsArray = null;\r\n                        if (videoModel.getTTMLRenderingDiv()) {\r\n                            captionsArray = embeddedTextHtmlRender.createHTMLCaptionsFromScreen(videoModel.getElement(), startTime, endTime, captionScreen);\r\n                        } else {\r\n                            const text = captionScreen.getDisplayText();\r\n                            captionsArray = [{\r\n                                start: startTime,\r\n                                end: endTime,\r\n                                data: text,\r\n                                styles: {}\r\n                            }];\r\n                        }\r\n                        if (captionsArray) {\r\n                            textTracks.addCaptions(trackIndex, 0, captionsArray);\r\n                        }\r\n                    }\r\n                    return newCue;\r\n                };\r\n\r\n                samplesInfo = boxParser.getSamplesInfo(bytes);\r\n\r\n                const sequenceNumber = samplesInfo.lastSequenceNumber;\r\n\r\n                if (!embeddedCea608FieldParsers[0] && !embeddedCea608FieldParsers[1]) {\r\n                    // Time to setup the CEA-608 parsing\r\n                    let field, handler, trackIdx;\r\n                    for (i = 0; i < embeddedTracks.length; i++) {\r\n                        if (embeddedTracks[i].id === Constants.CC1) {\r\n                            field = 0;\r\n                            trackIdx = textTracks.getTrackIdxForId(Constants.CC1);\r\n                        } else if (embeddedTracks[i].id === Constants.CC3) {\r\n                            field = 1;\r\n                            trackIdx = textTracks.getTrackIdxForId(Constants.CC3);\r\n                        }\r\n                        if (trackIdx === -1) {\r\n                            logger.warn('CEA-608: data before track is ready.');\r\n                            return;\r\n                        }\r\n                        handler = makeCueAdderForIndex(this, trackIdx);\r\n                        embeddedCea608FieldParsers[i] = new cea608parser.Cea608Parser(i + 1, {\r\n                            'newCue': handler\r\n                        }, null);\r\n                    }\r\n                }\r\n\r\n                if (embeddedTimescale) {\r\n                    if (embeddedLastSequenceNumber !== null && sequenceNumber !== embeddedLastSequenceNumber + samplesInfo.numSequences) {\r\n                        for (i = 0; i < embeddedCea608FieldParsers.length; i++) {\r\n                            if (embeddedCea608FieldParsers[i]) {\r\n                                embeddedCea608FieldParsers[i].reset();\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const allCcData = extractCea608Data(bytes, samplesInfo.sampleList);\r\n\r\n                    for (let fieldNr = 0; fieldNr < embeddedCea608FieldParsers.length; fieldNr++) {\r\n                        const ccData = allCcData.fields[fieldNr];\r\n                        const fieldParser = embeddedCea608FieldParsers[fieldNr];\r\n                        if (fieldParser) {\r\n                            for (i = 0; i < ccData.length; i++) {\r\n                                fieldParser.addData(ccData[i][0] / embeddedTimescale, ccData[i][1]);\r\n                            }\r\n                        }\r\n                    }\r\n                    embeddedLastSequenceNumber = sequenceNumber;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Extract CEA-608 data from a buffer of data.\r\n     * @param {ArrayBuffer} data\r\n     * @param {Array} samples cue information\r\n     * @returns {Object|null} ccData corresponding to one segment.\r\n     */\r\n    function extractCea608Data(data, samples) {\r\n        if (samples.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const allCcData = {\r\n            splits: [],\r\n            fields: [[], []]\r\n        };\r\n        const raw = new DataView(data);\r\n        for (let i = 0; i < samples.length; i++) {\r\n            const sample = samples[i];\r\n            const cea608Ranges = cea608parser.findCea608Nalus(raw, sample.offset, sample.size);\r\n            let lastSampleTime = null;\r\n            let idx = 0;\r\n            for (let j = 0; j < cea608Ranges.length; j++) {\r\n                const ccData = cea608parser.extractCea608DataFromRange(raw, cea608Ranges[j]);\r\n                for (let k = 0; k < 2; k++) {\r\n                    if (ccData[k].length > 0) {\r\n                        if (sample.cts !== lastSampleTime) {\r\n                            idx = 0;\r\n                        } else {\r\n                            idx += 1;\r\n                        }\r\n                        allCcData.fields[k].push([sample.cts + (mseTimeOffset * embeddedTimescale), ccData[k], idx]);\r\n                        lastSampleTime = sample.cts;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Sort by sampleTime ascending order\r\n        // If two packets have the same sampleTime, use them in the order\r\n        // they were received\r\n        allCcData.fields.forEach(function sortField(field) {\r\n            field.sort(function (a, b) {\r\n                if (a[0] === b[0]) {\r\n                    return a[2] - b[2];\r\n                }\r\n                return a[0] - b[0];\r\n            });\r\n        });\r\n\r\n        return allCcData;\r\n    }\r\n\r\n    function getIsDefault(mediaInfo) {\r\n        //TODO How to tag default. currently same order as listed in manifest.\r\n        // Is there a way to mark a text adaptation set as the default one? DASHIF meeting talk about using role which is being used for track KIND\r\n        // Eg subtitles etc. You can have multiple role tags per adaptation Not defined in the spec yet.\r\n        let isDefault = false;\r\n        if (embeddedTracks.length > 1 && mediaInfo.isEmbedded) {\r\n            isDefault = (mediaInfo.id && mediaInfo.id === Constants.CC1); // CC1 if both CC1 and CC3 exist\r\n        } else if (embeddedTracks.length === 1) {\r\n            if (mediaInfo.id && typeof mediaInfo.id === 'string' && mediaInfo.id.substring(0, 2) === 'CC') { // Either CC1 or CC3\r\n                isDefault = true;\r\n            }\r\n        } else if (embeddedTracks.length === 0) {\r\n            isDefault = (mediaInfo.index === mediaInfos[0].index);\r\n        }\r\n        return isDefault;\r\n    }\r\n\r\n    function getParser(codecType) {\r\n        let parser;\r\n        if (codecType.search(Constants.VTT) >= 0) {\r\n            parser = vttParser;\r\n        } else if (codecType.search(Constants.TTML) >= 0 || codecType.search(Constants.STPP) >= 0) {\r\n            parser = ttmlParser;\r\n        }\r\n        return parser;\r\n    }\r\n\r\n    function remove(start, end) {\r\n        //if start and end are not defined, remove all\r\n        if ((start === undefined) && (start === end)) {\r\n            start = this.buffered.start(0);\r\n            end = this.buffered.end(this.buffered.length - 1);\r\n        }\r\n        this.buffered.remove(start, end);\r\n    }\r\n\r\n    function onVideoBufferCleared(e) {\r\n        embeddedTracks.forEach(function (track) {\r\n            const trackIdx = textTracks.getTrackIdxForId(track.id);\r\n            if (trackIdx >= 0) {\r\n                textTracks.deleteCuesFromTrackIdx(trackIdx, e.from, e.to);\r\n            }\r\n        });\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        append: append,\r\n        abort: abort,\r\n        addEmbeddedTrack: addEmbeddedTrack,\r\n        resetEmbedded: resetEmbedded,\r\n        setConfig: setConfig,\r\n        getConfig: getConfig,\r\n        setCurrentFragmentedTrackIdx: setCurrentFragmentedTrackIdx,\r\n        remove: remove,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nTextSourceBuffer.__dashjs_factory_name = 'TextSourceBuffer';\r\nexport default FactoryMaker.getSingletonFactory(TextSourceBuffer);\r\n"]}