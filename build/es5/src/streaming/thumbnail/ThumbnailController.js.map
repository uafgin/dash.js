{"version":3,"sources":["../../../../../src/streaming/thumbnail/ThumbnailController.js"],"names":["ThumbnailController","config","context","streamInfo","instance","thumbnailTracks","setup","reset","create","adapter","baseURLController","timelineConverter","debug","eventBus","events","dashConstants","getStreamId","id","provideThumbnail","time","callback","track","getCurrentTrack","offset","request","segmentDuration","undefined","isNaN","getThumbnailRequestForTime","duration","thumbIndex","Math","floor","tilesHor","tilesVert","thumbnail","Thumbnail","width","widthPerTile","height","heightPerTile","x","y","readThumbnail","url","seq","buildUrlFromTemplate","NaN","seqIdx","startNumber","templateUrl","timescale","bandwidth","setTrackByIndex","index","getCurrentTrackIndex","getBitrateList","tracks","getTracks","i","map","t","bitrateInfo","BitrateInfo","mediaType","Constants","IMAGE","qualityIndex","bitrate","provide","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"ThumbnailController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../constants/Constants';\r\nimport Thumbnail from '../vo/Thumbnail';\r\nimport ThumbnailTracks from './ThumbnailTracks';\r\nimport BitrateInfo from '../vo/BitrateInfo';\r\nimport { replaceTokenForTemplate, unescapeDollarsInTemplate } from '../../dash/utils/SegmentsUtils';\r\n\r\nfunction ThumbnailController(config) {\r\n\r\n    const context = this.context;\r\n    const streamInfo = config.streamInfo;\r\n\r\n    let instance,\r\n        thumbnailTracks;\r\n\r\n    function setup() {\r\n        reset();\r\n        thumbnailTracks = ThumbnailTracks(context).create({\r\n            streamInfo: streamInfo,\r\n            adapter: config.adapter,\r\n            baseURLController: config.baseURLController,\r\n            timelineConverter: config.timelineConverter,\r\n            debug: config.debug,\r\n            eventBus: config.eventBus,\r\n            events: config.events,\r\n            dashConstants: config.dashConstants\r\n        });\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function provideThumbnail(time, callback) {\r\n\r\n        if (typeof callback !== 'function') {\r\n            return;\r\n        }\r\n        const track = thumbnailTracks.getCurrentTrack();\r\n        let offset,\r\n            request;\r\n        if (!track || track.segmentDuration <= 0 || time === undefined || time === null) {\r\n            callback(null);\r\n            return;\r\n        }\r\n\r\n        // Calculate index of the sprite given a time\r\n        if (isNaN(track.segmentDuration)) {\r\n            request = thumbnailTracks.getThumbnailRequestForTime(time);\r\n            if (request) {\r\n                track.segmentDuration = request.duration;\r\n            }\r\n        }\r\n\r\n        offset = time % track.segmentDuration;\r\n\r\n        const thumbIndex = Math.floor((offset * track.tilesHor * track.tilesVert) / track.segmentDuration);\r\n        // Create and return the thumbnail\r\n        const thumbnail = new Thumbnail();\r\n\r\n        thumbnail.width = Math.floor(track.widthPerTile);\r\n        thumbnail.height = Math.floor(track.heightPerTile);\r\n        thumbnail.x = Math.floor(thumbIndex % track.tilesHor) * track.widthPerTile;\r\n        thumbnail.y = Math.floor(thumbIndex / track.tilesHor) * track.heightPerTile;\r\n\r\n        if ('readThumbnail' in track) {\r\n            return track.readThumbnail(time, (url) => {\r\n                thumbnail.url = url;\r\n                callback(thumbnail);\r\n            });\r\n        } else {\r\n            if (!request) {\r\n                const seq = Math.floor(time / track.segmentDuration);\r\n                thumbnail.url = buildUrlFromTemplate(track, seq);\r\n            } else {\r\n                thumbnail.url = request.url;\r\n                track.segmentDuration = NaN;\r\n            }\r\n            callback(thumbnail);\r\n        }\r\n    }\r\n\r\n    function buildUrlFromTemplate(track, seq) {\r\n        const seqIdx = seq + track.startNumber;\r\n        let url = replaceTokenForTemplate(track.templateUrl, 'Number', seqIdx);\r\n        url = replaceTokenForTemplate(url, 'Time', (seqIdx - 1) * track.segmentDuration * track.timescale);\r\n        url = replaceTokenForTemplate(url, 'Bandwidth', track.bandwidth);\r\n        return unescapeDollarsInTemplate(url);\r\n    }\r\n\r\n    function setTrackByIndex(index) {\r\n        thumbnailTracks.setTrackByIndex(index);\r\n    }\r\n\r\n    function getCurrentTrackIndex() {\r\n        return thumbnailTracks.getCurrentTrackIndex();\r\n    }\r\n\r\n    function getBitrateList() {\r\n        const tracks = thumbnailTracks.getTracks();\r\n        let i = 0;\r\n\r\n        return tracks.map((t) => {\r\n            const bitrateInfo = new BitrateInfo();\r\n            bitrateInfo.mediaType = Constants.IMAGE;\r\n            bitrateInfo.qualityIndex = i++;\r\n            bitrateInfo.bitrate = t.bitrate;\r\n            bitrateInfo.width = t.width;\r\n            bitrateInfo.height = t.height;\r\n            return bitrateInfo;\r\n        });\r\n    }\r\n\r\n    function reset() {\r\n        if (thumbnailTracks) {\r\n            thumbnailTracks.reset();\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getStreamId: getStreamId,\r\n        provide: provideThumbnail,\r\n        setTrackByIndex: setTrackByIndex,\r\n        getCurrentTrackIndex: getCurrentTrackIndex,\r\n        getBitrateList: getBitrateList,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nThumbnailController.__dashjs_factory_name = 'ThumbnailController';\r\nexport default FactoryMaker.getClassFactory(ThumbnailController);\r\n"]}