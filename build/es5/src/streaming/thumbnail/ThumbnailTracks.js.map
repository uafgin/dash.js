{"version":3,"sources":["../../../../../src/streaming/thumbnail/ThumbnailTracks.js"],"names":["THUMBNAILS_SCHEME_ID_URIS","ThumbnailTracks","config","context","adapter","baseURLController","streamInfo","timelineConverter","debug","eventBus","events","dashConstants","urlUtils","getInstance","instance","tracks","indexHandler","currentTrackIndex","mediaInfo","loader","boxParser","initialize","reset","create","getIsDynamic","addTracks","normalizeSegments","fragments","representation","segments","count","i","len","s","seg","length","startTime","duration","timescale","media","mediaRange","push","getMediaInfoForType","Constants","IMAGE","voReps","getVoRepresentations","forEach","rep","segmentInfoType","DashConstants","SEGMENT_TEMPLATE","segmentDuration","SEGMENT_TIMELINE","createTrack","SEGMENT_BASE","sort","a","b","bitrate","useSegmentBase","track","ThumbnailTrackInfo","id","bandwidth","width","height","tilesHor","tilesVert","essentialProperties","p","indexOf","schemeIdUri","value","vars","split","isNaN","parseInt","trigger","Events","SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED","streamId","mediaType","mimeType","callback","cache","readThumbnail","time","cached","some","el","start","end","url","ss","mediaStartTime","baseURL","resolve","path","load","method","request","range","responseType","onload","e","info","getSamplesInfo","target","response","blob","Blob","slice","sampleList","offset","size","type","imageUrl","window","URL","createObjectURL","startNumber","templateUrl","buildTemplateUrl","widthPerTile","heightPerTile","isRelative","getTracks","getCurrentTrackIndex","getCurrentTrack","setTrackByIndex","index","getThumbnailRequestForTime","currentVoRep","getSegmentRequestForTime","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"ThumbnailTracks.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport DashConstants from '../../dash/constants/DashConstants';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport ThumbnailTrackInfo from '../vo/ThumbnailTrackInfo';\r\nimport URLUtils from '../../streaming/utils/URLUtils';\r\nimport { replaceIDForTemplate, getTimeBasedSegment } from '../../dash/utils/SegmentsUtils';\r\nimport Events from '../../core/events/Events';\r\nimport BoxParser from '../../streaming/utils/BoxParser';\r\nimport XHRLoader from '../../streaming/net/XHRLoader';\r\nimport DashHandler from '../../dash/DashHandler';\r\n\r\nexport const THUMBNAILS_SCHEME_ID_URIS = ['http://dashif.org/thumbnail_tile',\r\n                                   'http://dashif.org/guidelines/thumbnail_tile'];\r\n\r\nfunction ThumbnailTracks(config) {\r\n    const context = this.context;\r\n    const adapter = config.adapter;\r\n    const baseURLController = config.baseURLController;\r\n    const streamInfo = config.streamInfo;\r\n    const timelineConverter = config.timelineConverter;\r\n    const debug = config.debug;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const dashConstants = config.dashConstants;\r\n\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    let instance,\r\n        tracks,\r\n        indexHandler,\r\n        currentTrackIndex,\r\n        mediaInfo,\r\n        loader,\r\n        boxParser;\r\n\r\n    function initialize() {\r\n        reset();\r\n        loader = XHRLoader(context).create({});\r\n        boxParser = BoxParser(context).getInstance();\r\n\r\n        indexHandler = DashHandler(context).create({\r\n            streamInfo: streamInfo,\r\n            timelineConverter: timelineConverter,\r\n            baseURLController: baseURLController,\r\n            debug: debug,\r\n            eventBus: eventBus,\r\n            events: events,\r\n            dashConstants: dashConstants,\r\n            urlUtils: urlUtils\r\n        });\r\n\r\n        // initialize controllers\r\n        indexHandler.initialize(adapter ? adapter.getIsDynamic() : false);\r\n\r\n        // parse representation and create tracks\r\n        addTracks();\r\n    }\r\n\r\n    function normalizeSegments(fragments, representation) {\r\n        const segments = [];\r\n        let count = 0;\r\n\r\n        let i,\r\n            len,\r\n            s,\r\n            seg;\r\n\r\n        for (i = 0, len = fragments.length; i < len; i++) {\r\n            s = fragments[i];\r\n\r\n            seg = getTimeBasedSegment(\r\n                timelineConverter,\r\n                adapter.getIsDynamic(),\r\n                representation,\r\n                s.startTime,\r\n                s.duration,\r\n                s.timescale,\r\n                s.media,\r\n                s.mediaRange,\r\n                count);\r\n\r\n            if (seg) {\r\n                segments.push(seg);\r\n                seg = null;\r\n                count++;\r\n            }\r\n        }\r\n        return segments;\r\n    }\r\n\r\n    function addTracks() {\r\n        if (!streamInfo || !adapter) {\r\n            return;\r\n        }\r\n\r\n        // Extract thumbnail tracks\r\n        mediaInfo = adapter.getMediaInfoForType(streamInfo, Constants.IMAGE);\r\n        if (!mediaInfo) {\r\n            return;\r\n        }\r\n\r\n        const voReps = adapter.getVoRepresentations(mediaInfo);\r\n\r\n        if (voReps && voReps.length > 0) {\r\n            voReps.forEach((rep) => {\r\n                if ((rep.segmentInfoType === DashConstants.SEGMENT_TEMPLATE && rep.segmentDuration > 0 && rep.media) ||\r\n                     rep.segmentInfoType === DashConstants.SEGMENT_TIMELINE) {\r\n                    createTrack(rep);\r\n                }\r\n                if (rep.segmentInfoType === DashConstants.SEGMENT_BASE) {\r\n                    createTrack(rep, true);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (tracks.length > 0) {\r\n            // Sort bitrates and select the lowest bitrate rendition\r\n            tracks.sort((a, b) => a.bitrate - b.bitrate);\r\n            currentTrackIndex = tracks.length - 1;\r\n        }\r\n    }\r\n\r\n    function createTrack(representation, useSegmentBase) {\r\n        const track = new ThumbnailTrackInfo();\r\n        track.id = representation.id;\r\n        track.bitrate = representation.bandwidth;\r\n        track.width = representation.width;\r\n        track.height = representation.height;\r\n        track.tilesHor = 1;\r\n        track.tilesVert = 1;\r\n\r\n        if (representation.essentialProperties) {\r\n            representation.essentialProperties.forEach((p) => {\r\n                if (THUMBNAILS_SCHEME_ID_URIS.indexOf(p.schemeIdUri) >= 0 && p.value) {\r\n                    const vars = p.value.split('x');\r\n                    if (vars.length === 2 && !isNaN(vars[0]) && !isNaN(vars[1])) {\r\n                        track.tilesHor = parseInt(vars[0], 10);\r\n                        track.tilesVert = parseInt(vars[1], 10);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (useSegmentBase) {\r\n            eventBus.trigger(Events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, {\r\n                streamId: streamInfo.id,\r\n                mediaType: Constants.IMAGE,\r\n                mimeType: mediaInfo.mimeType,\r\n                representation: representation,\r\n                callback: function (streamId, mediaType, segments, representation) {\r\n                    let cache = [];\r\n                    segments = normalizeSegments(segments, representation);\r\n                    track.segmentDuration = segments[0].duration; //assume all segments have the same duration\r\n                    track.readThumbnail = function (time, callback) {\r\n\r\n                        let cached = null;\r\n                        cache.some(el => {\r\n                            if (el.start <= time && el.end > time) {\r\n                                cached = el.url;\r\n                                return true;\r\n                            }\r\n                        });\r\n                        if (cached) {\r\n                            callback(cached);\r\n                        } else {\r\n                            segments.some((ss) => {\r\n                                if (ss.mediaStartTime <= time && ss.mediaStartTime + ss.duration > time) {\r\n                                    const baseURL = baseURLController.resolve(representation.path);\r\n                                    loader.load({\r\n                                        method: 'get',\r\n                                        url: baseURL.url,\r\n                                        request: {\r\n                                            range: ss.mediaRange,\r\n                                            responseType: 'arraybuffer'\r\n                                        },\r\n                                        onload: function (e) {\r\n                                            let info = boxParser.getSamplesInfo(e.target.response);\r\n                                            let blob = new Blob( [ e.target.response.slice(info.sampleList[0].offset, info.sampleList[0].offset + info.sampleList[0].size) ], { type: 'image/jpeg' } );\r\n                                            let imageUrl = window.URL.createObjectURL( blob );\r\n                                            cache.push({\r\n                                                start: ss.mediaStartTime,\r\n                                                end: ss.mediaStartTime + ss.duration,\r\n                                                url: imageUrl\r\n                                            });\r\n                                            if (callback)\r\n                                                callback(imageUrl);\r\n                                        }\r\n                                    });\r\n                                    return true;\r\n                                }\r\n                            });\r\n                        }\r\n                    };\r\n                }\r\n            });\r\n        } else {\r\n            track.startNumber = representation.startNumber;\r\n            track.segmentDuration = representation.segmentDuration;\r\n            track.timescale = representation.timescale;\r\n            track.templateUrl = buildTemplateUrl(representation);\r\n        }\r\n\r\n        if (track.tilesHor > 0 && track.tilesVert > 0) {\r\n            // Precalculate width and heigth per tile for perf reasons\r\n            track.widthPerTile = track.width / track.tilesHor;\r\n            track.heightPerTile = track.height / track.tilesVert;\r\n            tracks.push(track);\r\n        }\r\n    }\r\n\r\n    function buildTemplateUrl(representation) {\r\n        const templateUrl = urlUtils.isRelative(representation.media) ?\r\n            urlUtils.resolve(representation.media, baseURLController.resolve(representation.path).url) : representation.media;\r\n\r\n        if (!templateUrl) {\r\n            return '';\r\n        }\r\n\r\n        return replaceIDForTemplate(templateUrl, representation.id);\r\n    }\r\n\r\n    function getTracks() {\r\n        return tracks;\r\n    }\r\n\r\n    function getCurrentTrackIndex() {\r\n        return currentTrackIndex;\r\n    }\r\n\r\n    function getCurrentTrack() {\r\n        if (currentTrackIndex < 0) {\r\n            return null;\r\n        }\r\n        return tracks[currentTrackIndex];\r\n    }\r\n\r\n    function setTrackByIndex(index) {\r\n        if (!tracks || tracks.length === 0) {\r\n            return;\r\n        }\r\n        // select highest bitrate in case selected index is higher than bitrate list length\r\n        if (index >= tracks.length) {\r\n            index = tracks.length - 1;\r\n        }\r\n        currentTrackIndex = index;\r\n    }\r\n\r\n    function getThumbnailRequestForTime(time) {\r\n        let currentVoRep;\r\n        const voReps = adapter.getVoRepresentations(mediaInfo);\r\n        for (let i = 0; i < voReps.length; i++) {\r\n            if (tracks[currentTrackIndex].id === voReps[i].id) {\r\n                currentVoRep = voReps[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        return indexHandler.getSegmentRequestForTime(mediaInfo, currentVoRep, time);\r\n    }\r\n\r\n    function reset() {\r\n        tracks = [];\r\n        currentTrackIndex = -1;\r\n        mediaInfo = null;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getTracks: getTracks,\r\n        reset: reset,\r\n        setTrackByIndex: setTrackByIndex,\r\n        getCurrentTrack: getCurrentTrack,\r\n        getCurrentTrackIndex: getCurrentTrackIndex,\r\n        getThumbnailRequestForTime: getThumbnailRequestForTime\r\n    };\r\n\r\n    initialize();\r\n\r\n    return instance;\r\n}\r\n\r\nThumbnailTracks.__dashjs_factory_name = 'ThumbnailTracks';\r\nexport default FactoryMaker.getClassFactory(ThumbnailTracks);\r\n"]}