{"version":3,"sources":["../../../../../src/streaming/models/URIFragmentModel.js"],"names":["URIFragmentModel","instance","URIFragmentDataVO","initialize","uri","URIFragmentData","hashIndex","indexOf","fragments","substr","split","i","len","length","fragment","equalIndex","key","substring","hasOwnProperty","getURIFragmentData","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"sEA+BA,sD,+DACA,qD,4IAEA;;;GAlCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsCA,QAASA,iBAAT,EAA4B,CAExB,GAAIC,gBAAJ,CACIC,wBADJ,CAGA;;;;OAKA,QAASC,WAAT,CAAoBC,GAApB,CAAyB,CACrBF,kBAAoB,GAAIG,0BAAJ,EAApB,CAEA,GAAI,CAACD,GAAL,CAAU,MAAO,KAAP,CAEV,GAAME,WAAYF,IAAIG,OAAJ,CAAY,GAAZ,CAAlB,CACA,GAAID,YAAc,CAAC,CAAnB,CAAsB,CAClB,GAAME,WAAYJ,IAAIK,MAAJ,CAAWH,UAAY,CAAvB,EAA0BI,KAA1B,CAAgC,GAAhC,CAAlB,CACA,IAAK,GAAIC,GAAI,CAAR,CAAWC,IAAMJ,UAAUK,MAAhC,CAAwCF,EAAIC,GAA5C,CAAiD,EAAED,CAAnD,CAAsD,CAClD,GAAMG,UAAWN,UAAUG,CAAV,CAAjB,CACA,GAAMI,YAAaD,SAASP,OAAT,CAAiB,GAAjB,CAAnB,CACA,GAAIQ,aAAe,CAAC,CAApB,CAAuB,CACnB,GAAMC,KAAMF,SAASG,SAAT,CAAmB,CAAnB,CAAqBF,UAArB,CAAZ,CACA,GAAIb,kBAAkBgB,cAAlB,CAAiCF,GAAjC,CAAJ,CAA2C,CACvCd,kBAAkBc,GAAlB,EAAyBF,SAASL,MAAT,CAAgBM,WAAa,CAA7B,CAAzB,CACH,CACJ,CACJ,CACJ,CACJ,CAED;;;;OAKA,QAASI,mBAAT,EAA8B,CAC1B,MAAOjB,kBAAP,CACH,CAEDD,SAAW,CACPE,WAAYA,UADL,CAEPgB,mBAAoBA,kBAFb,CAAX,CAKA,MAAOlB,SAAP,CACH,CAEDD,iBAAiBoB,qBAAjB,CAAyC,kBAAzC,C,gBACeC,uBAAaC,mBAAb,CAAiCtB,gBAAjC,C","file":"URIFragmentModel.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport URIFragmentData from '../vo/URIFragmentData';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\n/**\r\n * Model class managing URI fragments.\r\n * @ignore\r\n */\r\nfunction URIFragmentModel() {\r\n\r\n    let instance,\r\n        URIFragmentDataVO;\r\n\r\n    /**\r\n     * @param {string} uri The URI to parse for fragment extraction\r\n     * @memberof module:URIFragmentModel\r\n     * @instance\r\n     */\r\n    function initialize(uri) {\r\n        URIFragmentDataVO = new URIFragmentData();\r\n\r\n        if (!uri) return null;\r\n\r\n        const hashIndex = uri.indexOf('#');\r\n        if (hashIndex !== -1) {\r\n            const fragments = uri.substr(hashIndex + 1).split('&');\r\n            for (let i = 0, len = fragments.length; i < len; ++i) {\r\n                const fragment = fragments[i];\r\n                const equalIndex = fragment.indexOf('=');\r\n                if (equalIndex !== -1) {\r\n                    const key = fragment.substring(0,equalIndex);\r\n                    if (URIFragmentDataVO.hasOwnProperty(key)) {\r\n                        URIFragmentDataVO[key] = fragment.substr(equalIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {URIFragmentData} Object containing supported URI fragments\r\n     * @memberof module:URIFragmentModel\r\n     * @instance\r\n     */\r\n    function getURIFragmentData() {\r\n        return URIFragmentDataVO;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getURIFragmentData: getURIFragmentData\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nURIFragmentModel.__dashjs_factory_name = 'URIFragmentModel';\r\nexport default FactoryMaker.getSingletonFactory(URIFragmentModel);\r\n"]}