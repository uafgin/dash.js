{"version":3,"sources":["../../../../src/streaming/FragmentLoader.js"],"names":["FragmentLoader","config","context","eventBus","events","urlUtils","errors","instance","urlLoader","setup","create","errHandler","dashMetrics","mediaPlayerModel","requestModifier","useFetch","settings","get","streaming","lowLatencyEnabled","constants","Constants","boxParser","dashConstants","requestTimeout","fragmentRequestTimeout","checkForExistence","request","report","success","trigger","CHECK_FOR_EXISTENCE_COMPLETED","exists","headRequest","HeadRequest","url","load","error","data","LOADING_COMPLETED","response","sender","progress","event","LOADING_PROGRESS","stream","LOADING_DATA_PROGRESS","statusText","errorText","undefined","DashJSError","FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE","abort","LOADING_ABANDONED","mediaType","FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE","FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE","reset","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"FragmentLoader.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from './constants/Constants';\r\nimport URLLoader from './net/URLLoader';\r\nimport HeadRequest from './vo/HeadRequest';\r\nimport DashJSError from './vo/DashJSError';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\n\r\nfunction FragmentLoader(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const urlUtils = config.urlUtils;\r\n    const errors = config.errors;\r\n\r\n    let instance,\r\n        urlLoader;\r\n\r\n    function setup() {\r\n        urlLoader = URLLoader(context).create({\r\n            errHandler: config.errHandler,\r\n            errors: errors,\r\n            dashMetrics: config.dashMetrics,\r\n            mediaPlayerModel: config.mediaPlayerModel,\r\n            requestModifier: config.requestModifier,\r\n            useFetch: config.settings.get().streaming.lowLatencyEnabled,\r\n            urlUtils: urlUtils,\r\n            constants: Constants,\r\n            boxParser: config.boxParser,\r\n            dashConstants: config.dashConstants,\r\n            requestTimeout: config.settings.get().streaming.fragmentRequestTimeout\r\n        });\r\n    }\r\n\r\n    function checkForExistence(request) {\r\n        const report = function (success) {\r\n            eventBus.trigger(events.CHECK_FOR_EXISTENCE_COMPLETED, {\r\n                    request: request,\r\n                    exists: success\r\n                }\r\n            );\r\n        };\r\n\r\n        if (request) {\r\n            let headRequest = new HeadRequest(request.url);\r\n            urlLoader.load({\r\n                request: headRequest,\r\n                success: function () {\r\n                    report(true);\r\n                },\r\n                error: function () {\r\n                    report(false);\r\n                }\r\n            });\r\n        } else {\r\n            report(false);\r\n        }\r\n    }\r\n\r\n    function load(request) {\r\n        const report = function (data, error) {\r\n            eventBus.trigger(events.LOADING_COMPLETED, {\r\n                request: request,\r\n                response: data || null,\r\n                error: error || null,\r\n                sender: instance\r\n            });\r\n        };\r\n\r\n        if (request) {\r\n            urlLoader.load({\r\n                request: request,\r\n                progress: function (event) {\r\n                    eventBus.trigger(events.LOADING_PROGRESS, {\r\n                        request: request,\r\n                        stream: event.stream\r\n                    });\r\n                    if (event.data) {\r\n                        eventBus.trigger(events.LOADING_DATA_PROGRESS, {\r\n                            request: request,\r\n                            response: event.data || null,\r\n                            error: null,\r\n                            sender: instance\r\n                        });\r\n                    }\r\n                },\r\n                success: function (data) {\r\n                    report(data);\r\n                },\r\n                error: function (request, statusText, errorText) {\r\n                    report(\r\n                        undefined,\r\n                        new DashJSError(\r\n                            errors.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE,\r\n                            errorText,\r\n                            statusText\r\n                        )\r\n                    );\r\n                },\r\n                abort: function (request) {\r\n                    if (request) {\r\n                        eventBus.trigger(events.LOADING_ABANDONED, {\r\n                            mediaType: request.mediaType,\r\n                            request: request,\r\n                            sender: instance\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            report(\r\n                undefined,\r\n                new DashJSError(\r\n                    errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE,\r\n                    errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function abort() {\r\n        if (urlLoader) {\r\n            urlLoader.abort();\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        if (urlLoader) {\r\n            urlLoader.abort();\r\n            urlLoader = null;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        checkForExistence: checkForExistence,\r\n        load: load,\r\n        abort: abort,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nFragmentLoader.__dashjs_factory_name = 'FragmentLoader';\r\nexport default FactoryMaker.getClassFactory(FragmentLoader);\r\n"]}