{"version":3,"sources":["../../../../src/core/Debug.js"],"names":["LOG_LEVEL_NONE","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARNING","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG","Debug","config","context","eventBus","getInstance","settings","logFn","instance","showLogTimestamp","showCalleeName","startTime","setup","Date","getTime","window","console","getLogFn","error","warn","info","debug","fn","bind","log","getLogger","fatal","setLogTimestampVisible","value","setCalleeNameVisible","params","doLog","level","_this","message","logTime","getClassName","getType","length","Array","apply","forEach","item","get","logLevel","dispatchEvent","trigger","Events","LOG","__dashjs_factory_name","factory","FactoryMaker","getSingletonFactory","updateSingletonFactory"],"mappings":"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","file":"Debug.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventBus from './EventBus';\r\nimport Events from './events/Events';\r\nimport FactoryMaker from './FactoryMaker';\r\n\r\nconst LOG_LEVEL_NONE = 0;\r\nconst LOG_LEVEL_FATAL = 1;\r\nconst LOG_LEVEL_ERROR = 2;\r\nconst LOG_LEVEL_WARNING = 3;\r\nconst LOG_LEVEL_INFO = 4;\r\nconst LOG_LEVEL_DEBUG = 5;\r\n\r\n/**\r\n * @module Debug\r\n * @param {object} config\r\n * @ignore\r\n */\r\nfunction Debug(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const settings = config.settings;\r\n\r\n    const logFn = [];\r\n\r\n    let instance,\r\n        showLogTimestamp,\r\n        showCalleeName,\r\n        startTime;\r\n\r\n    function setup() {\r\n        showLogTimestamp = true;\r\n        showCalleeName = true;\r\n        startTime = new Date().getTime();\r\n\r\n        if (typeof window !== 'undefined' && window.console) {\r\n            logFn[LOG_LEVEL_FATAL] = getLogFn(window.console.error);\r\n            logFn[LOG_LEVEL_ERROR] = getLogFn(window.console.error);\r\n            logFn[LOG_LEVEL_WARNING] = getLogFn(window.console.warn);\r\n            logFn[LOG_LEVEL_INFO] = getLogFn(window.console.info);\r\n            logFn[LOG_LEVEL_DEBUG] = getLogFn(window.console.debug);\r\n        }\r\n    }\r\n\r\n    function getLogFn(fn) {\r\n        if (fn && fn.bind) {\r\n            return fn.bind(window.console);\r\n        }\r\n        // if not define, return the default function for reporting logs\r\n        return window.console.log.bind(window.console);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a logger which can be used to write logging information in browser console.\r\n     * @param {object} instance Object for which the logger is created. It is used\r\n     * to include calle object information in log messages.\r\n     * @memberof module:Debug\r\n     * @returns {Logger}\r\n     * @instance\r\n     */\r\n    function getLogger(instance) {\r\n        return {\r\n            fatal: fatal.bind(instance),\r\n            error: error.bind(instance),\r\n            warn: warn.bind(instance),\r\n            info: info.bind(instance),\r\n            debug: debug.bind(instance)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Prepends a timestamp in milliseconds to each log message.\r\n     * @param {boolean} value Set to true if you want to see a timestamp in each log message.\r\n     * @default LOG_LEVEL_WARNING\r\n     * @memberof module:Debug\r\n     * @instance\r\n     */\r\n    function setLogTimestampVisible(value) {\r\n        showLogTimestamp = value;\r\n    }\r\n\r\n    /**\r\n     * Prepends the callee object name, and media type if available, to each log message.\r\n     * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.\r\n     * @default true\r\n     * @memberof module:Debug\r\n     * @instance\r\n     */\r\n    function setCalleeNameVisible(value) {\r\n        showCalleeName = value;\r\n    }\r\n\r\n    function fatal(...params) {\r\n        doLog(LOG_LEVEL_FATAL, this, ...params);\r\n    }\r\n\r\n    function error(...params) {\r\n        doLog(LOG_LEVEL_ERROR, this, ...params);\r\n    }\r\n\r\n    function warn(...params) {\r\n        doLog(LOG_LEVEL_WARNING, this, ...params);\r\n    }\r\n\r\n    function info(...params) {\r\n        doLog(LOG_LEVEL_INFO, this, ...params);\r\n    }\r\n\r\n    function debug(...params) {\r\n        doLog(LOG_LEVEL_DEBUG, this, ...params);\r\n    }\r\n\r\n    function doLog(level, _this, ...params) {\r\n        let message = '';\r\n        let logTime = null;\r\n\r\n        if (showLogTimestamp) {\r\n            logTime = new Date().getTime();\r\n            message += '[' + (logTime - startTime) + ']';\r\n        }\r\n\r\n        if (showCalleeName && _this && _this.getClassName) {\r\n            message += '[' + _this.getClassName() + ']';\r\n            if (_this.getType) {\r\n                message += '[' + _this.getType() + ']';\r\n            }\r\n        }\r\n\r\n        if (message.length > 0) {\r\n            message += ' ';\r\n        }\r\n\r\n        Array.apply(null, params).forEach(function (item) {\r\n            message += item + ' ';\r\n        });\r\n\r\n        // log to console if the log level is high enough\r\n        if (logFn[level] && settings.get().debug.logLevel >= level) {\r\n            logFn[level](message);\r\n        }\r\n\r\n        // send log event regardless of log level\r\n        if (settings && settings.get().debug.dispatchEvent) {\r\n            eventBus.trigger(Events.LOG, { message: message, level: level });\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getLogger: getLogger,\r\n        setLogTimestampVisible: setLogTimestampVisible,\r\n        setCalleeNameVisible: setCalleeNameVisible\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDebug.__dashjs_factory_name = 'Debug';\r\n\r\nconst factory = FactoryMaker.getSingletonFactory(Debug);\r\nfactory.LOG_LEVEL_NONE = LOG_LEVEL_NONE;\r\nfactory.LOG_LEVEL_FATAL = LOG_LEVEL_FATAL;\r\nfactory.LOG_LEVEL_ERROR = LOG_LEVEL_ERROR;\r\nfactory.LOG_LEVEL_WARNING = LOG_LEVEL_WARNING;\r\nfactory.LOG_LEVEL_INFO = LOG_LEVEL_INFO;\r\nfactory.LOG_LEVEL_DEBUG = LOG_LEVEL_DEBUG;\r\nFactoryMaker.updateSingletonFactory(Debug.__dashjs_factory_name, factory);\r\nexport default factory;\r\n"]}