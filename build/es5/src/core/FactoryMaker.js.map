{"version":3,"sources":["../../../../src/core/FactoryMaker.js"],"names":["FactoryMaker","instance","singletonContexts","singletonFactories","classFactories","extend","name","childInstance","override","context","getSingletonInstance","className","i","obj","setSingletonInstance","push","deleteSingletonInstances","filter","x","getFactoryByName","factoriesArray","updateFactory","factory","updateClassFactory","getClassFactoryByName","getClassFactory","classConstructor","__dashjs_factory_name","undefined","create","merge","arguments","updateSingletonFactory","getSingletonFactoryByName","getSingletonFactory","getInstance","args","classInstance","extensionObject","extension","apply","parent","prop","hasOwnProperty","getClassName"],"mappings":"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","file":"FactoryMaker.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @module FactoryMaker\r\n * @ignore\r\n */\r\nconst FactoryMaker = (function () {\r\n\r\n    let instance;\r\n    let singletonContexts = [];\r\n    const singletonFactories = {};\r\n    const classFactories = {};\r\n\r\n    function extend(name, childInstance, override, context) {\r\n        if (!context[name] && childInstance) {\r\n            context[name] = {\r\n                instance: childInstance,\r\n                override: override\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this method from your extended object.  this.factory is injected into your object.\r\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\r\n     * will return the video model for use in the extended object.\r\n     *\r\n     * @param {Object} context - injected into extended object as this.context\r\n     * @param {string} className - string name found in all dash.js objects\r\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\r\n     * @returns {*} Context aware instance of specified singleton name.\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function getSingletonInstance(context, className) {\r\n        for (const i in singletonContexts) {\r\n            const obj = singletonContexts[i];\r\n            if (obj.context === context && obj.name === className) {\r\n                return obj.instance;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\r\n     *\r\n     * @param {Object} context\r\n     * @param {string} className\r\n     * @param {Object} instance\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function setSingletonInstance(context, className, instance) {\r\n        for (const i in singletonContexts) {\r\n            const obj = singletonContexts[i];\r\n            if (obj.context === context && obj.name === className) {\r\n                singletonContexts[i].instance = instance;\r\n                return;\r\n            }\r\n        }\r\n        singletonContexts.push({\r\n            name: className,\r\n            context: context,\r\n            instance: instance\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Use this method to remove all singleton instances associated with a particular context.\r\n     *\r\n     * @param {Object} context\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function deleteSingletonInstances(context) {\r\n        singletonContexts = singletonContexts.filter(x => x.context !== context);\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Factories storage Management\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function getFactoryByName(name, factoriesArray) {\r\n        return factoriesArray[name];\r\n    }\r\n\r\n    function updateFactory(name, factory, factoriesArray) {\r\n        if (name in factoriesArray) {\r\n            factoriesArray[name] = factory;\r\n        }\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Class Factories Management\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function updateClassFactory(name, factory) {\r\n        updateFactory(name, factory, classFactories);\r\n    }\r\n\r\n    function getClassFactoryByName(name) {\r\n        return getFactoryByName(name, classFactories);\r\n    }\r\n\r\n    function getClassFactory(classConstructor) {\r\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\r\n\r\n        if (!factory) {\r\n            factory = function (context) {\r\n                if (context === undefined) {\r\n                    context = {};\r\n                }\r\n                return {\r\n                    create: function () {\r\n                        return merge(classConstructor, context, arguments);\r\n                    }\r\n                };\r\n            };\r\n\r\n            classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\r\n        }\r\n        return factory;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Singleton Factory MAangement\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function updateSingletonFactory(name, factory) {\r\n        updateFactory(name, factory, singletonFactories);\r\n    }\r\n\r\n    function getSingletonFactoryByName(name) {\r\n        return getFactoryByName(name, singletonFactories);\r\n    }\r\n\r\n    function getSingletonFactory(classConstructor) {\r\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\r\n        if (!factory) {\r\n            factory = function (context) {\r\n                let instance;\r\n                if (context === undefined) {\r\n                    context = {};\r\n                }\r\n                return {\r\n                    getInstance: function () {\r\n                        // If we don't have an instance yet check for one on the context\r\n                        if (!instance) {\r\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\r\n                        }\r\n                        // If there's no instance on the context then create one\r\n                        if (!instance) {\r\n                            instance = merge(classConstructor, context, arguments);\r\n                            singletonContexts.push({\r\n                                name: classConstructor.__dashjs_factory_name,\r\n                                context: context,\r\n                                instance: instance\r\n                            });\r\n                        }\r\n                        return instance;\r\n                    }\r\n                };\r\n            };\r\n            singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\r\n        }\r\n\r\n        return factory;\r\n    }\r\n\r\n    function merge(classConstructor, context, args) {\r\n\r\n        let classInstance;\r\n        const className = classConstructor.__dashjs_factory_name;\r\n        const extensionObject = context[className];\r\n\r\n        if (extensionObject) {\r\n\r\n            let extension = extensionObject.instance;\r\n\r\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\r\n\r\n                classInstance = classConstructor.apply({context}, args);\r\n                extension = extension.apply({\r\n                    context,\r\n                    factory: instance,\r\n                    parent: classInstance\r\n                }, args);\r\n\r\n                for (const prop in extension) {\r\n                    if (classInstance.hasOwnProperty(prop)) {\r\n                        classInstance[prop] = extension[prop];\r\n                    }\r\n                }\r\n\r\n            } else { //replace parent object completely with new object. Same as dijon.\r\n\r\n                return extension.apply({\r\n                    context,\r\n                    factory: instance\r\n                }, args);\r\n\r\n            }\r\n        } else {\r\n            // Create new instance of the class\r\n            classInstance = classConstructor.apply({context}, args);\r\n        }\r\n\r\n        // Add getClassName function to class instance prototype (used by Debug)\r\n        classInstance.getClassName = function () {return className;};\r\n\r\n        return classInstance;\r\n    }\r\n\r\n    instance = {\r\n        extend: extend,\r\n        getSingletonInstance: getSingletonInstance,\r\n        setSingletonInstance: setSingletonInstance,\r\n        deleteSingletonInstances: deleteSingletonInstances,\r\n        getSingletonFactory: getSingletonFactory,\r\n        getSingletonFactoryByName: getSingletonFactoryByName,\r\n        updateSingletonFactory: updateSingletonFactory,\r\n        getClassFactory: getClassFactory,\r\n        getClassFactoryByName: getClassFactoryByName,\r\n        updateClassFactory: updateClassFactory\r\n    };\r\n\r\n    return instance;\r\n\r\n}());\r\n\r\nexport default FactoryMaker;\r\n"]}