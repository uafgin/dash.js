{"version":3,"sources":["../../../../../src/dash/parser/DashParser.js"],"names":["DashParser","config","context","debug","instance","logger","matchers","converter","objectIron","setup","getLogger","DurationMatcher","DateTimeMatcher","NumericMatcher","StringMatcher","X2JS","escapeMode","attributePrefix","arrayAccessForm","emptyNodeForm","stripWhitespaces","enableToStringFunc","ignoreRoot","create","adaptationset","RepresentationBaseValuesMap","period","SegmentValuesMap","getMatchers","getIron","parse","data","manifest","startTime","window","performance","now","xml_str2json","Error","jsonTime","Patch","add_asArray","forEach","operand","run","replace_asArray","MPD","ironedTime","info","toPrecision","protocol","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"DashParser.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport ObjectIron from './objectiron';\r\nimport X2JS from '../../../externals/xml2json';\r\nimport StringMatcher from './matchers/StringMatcher';\r\nimport DurationMatcher from './matchers/DurationMatcher';\r\nimport DateTimeMatcher from './matchers/DateTimeMatcher';\r\nimport NumericMatcher from './matchers/NumericMatcher';\r\nimport RepresentationBaseValuesMap from './maps/RepresentationBaseValuesMap';\r\nimport SegmentValuesMap from './maps/SegmentValuesMap';\r\n\r\nfunction DashParser(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const debug = config.debug;\r\n\r\n    let instance,\r\n        logger,\r\n        matchers,\r\n        converter,\r\n        objectIron;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        matchers = [\r\n            new DurationMatcher(),\r\n            new DateTimeMatcher(),\r\n            new NumericMatcher(),\r\n            new StringMatcher()   // last in list to take precedence over NumericMatcher\r\n        ];\r\n\r\n        converter = new X2JS({\r\n            escapeMode:         false,\r\n            attributePrefix:    '',\r\n            arrayAccessForm:    'property',\r\n            emptyNodeForm:      'object',\r\n            stripWhitespaces:   false,\r\n            enableToStringFunc: true,\r\n            ignoreRoot:         false,\r\n            matchers:           matchers\r\n        });\r\n\r\n        objectIron = ObjectIron(context).create({\r\n            adaptationset: new RepresentationBaseValuesMap(),\r\n            period: new SegmentValuesMap()\r\n        });\r\n    }\r\n\r\n    function getMatchers() {\r\n        return matchers;\r\n    }\r\n\r\n    function getIron() {\r\n        return objectIron;\r\n    }\r\n\r\n    function parse(data) {\r\n        let manifest;\r\n        const startTime = window.performance.now();\r\n\r\n        manifest = converter.xml_str2json(data);\r\n\r\n        if (!manifest) {\r\n            throw new Error('parsing the manifest failed');\r\n        }\r\n\r\n        const jsonTime = window.performance.now();\r\n\r\n        // handle full MPD and Patch ironing separately\r\n        if (manifest.Patch) {\r\n            manifest = manifest.Patch; // drop root reference\r\n            // apply iron to patch operations individually\r\n            if (manifest.add_asArray) {\r\n                manifest.add_asArray.forEach((operand) => objectIron.run(operand));\r\n            }\r\n            if (manifest.replace_asArray) {\r\n                manifest.replace_asArray.forEach((operand) => objectIron.run(operand));\r\n            }\r\n            // note that we don't need to iron remove as they contain no children\r\n        } else {\r\n            manifest = manifest.MPD; // drop root reference\r\n            objectIron.run(manifest);\r\n        }\r\n\r\n        const ironedTime = window.performance.now();\r\n        logger.info('Parsing complete: ( xml2json: ' + (jsonTime - startTime).toPrecision(3) + 'ms, objectiron: ' + (ironedTime - jsonTime).toPrecision(3) + 'ms, total: ' + ((ironedTime - startTime) / 1000).toPrecision(3) + 's)');\r\n\r\n        manifest.protocol = 'DASH';\r\n\r\n        return manifest;\r\n    }\r\n\r\n    instance = {\r\n        parse: parse,\r\n        getMatchers: getMatchers,\r\n        getIron: getIron\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDashParser.__dashjs_factory_name = 'DashParser';\r\nexport default FactoryMaker.getClassFactory(DashParser);\r\n"]}