{"version":3,"sources":["../../../../../../src/dash/parser/matchers/DateTimeMatcher.js"],"names":["SECONDS_IN_MIN","MINUTES_IN_HOUR","MILLISECONDS_IN_SECONDS","datetimeRegex","DateTimeMatcher","test","attr","value","match","exec","str","utcDate","Date","UTC","parseInt","parseFloat","timezoneOffset","BaseMatcher"],"mappings":"sEAiCA,2C,y7BAjCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BA;;GAKA,GAAMA,gBAAiB,EAAvB,CACA,GAAMC,iBAAkB,EAAxB,CACA,GAAMC,yBAA0B,IAAhC,CAEA,GAAMC,eAAgB,uHAAtB,C,GAEMC,gB,gEACF,0BAAc,4JAEN,qBAAQD,eAAcE,IAAd,CAAmBC,KAAKC,KAAxB,CAAR,EAFM,CAGN,aAAO,CACH,GAAMC,OAAQL,cAAcM,IAAd,CAAmBC,GAAnB,CAAd,CACA,GAAIC,eAAJ,CAEA;AACA;AACA;AACAA,QAAUC,KAAKC,GAAL,CACNC,SAASN,MAAM,CAAN,CAAT,CAAmB,EAAnB,CADM,CAENM,SAASN,MAAM,CAAN,CAAT,CAAmB,EAAnB,EAAyB,CAFnB,CAEsB;AAC5BM,SAASN,MAAM,CAAN,CAAT,CAAmB,EAAnB,CAHM,CAINM,SAASN,MAAM,CAAN,CAAT,CAAmB,EAAnB,CAJM,CAKNM,SAASN,MAAM,CAAN,CAAT,CAAmB,EAAnB,CALM,CAMLA,MAAM,CAAN,GAAYM,SAASN,MAAM,CAAN,CAAT,CAAmB,EAAnB,CAAZ,EAAsC,CANjC,CAOLA,MAAM,CAAN,GAAYO,WAAWP,MAAM,CAAN,CAAX,EAAuBN,uBAApC,EAAgE,CAP1D,CAAV,CASA;AACA,GAAIM,MAAM,CAAN,GAAYA,MAAM,EAAN,CAAhB,CAA2B,CACvB,GAAMQ,gBAAiBF,SAASN,MAAM,CAAN,CAAT,CAAmB,EAAnB,EAAyBP,eAAzB,CAA2Ca,SAASN,MAAM,EAAN,CAAT,CAAoB,EAApB,CAAlE,CACAG,SAAW,CAACH,MAAM,CAAN,IAAa,GAAb,CAAmB,CAAC,CAApB,CAAwB,CAAC,CAA1B,EAA+BQ,cAA/B,CAAgDhB,cAAhD,CAAiEE,uBAA5E,CACH,CAED,MAAO,IAAIU,KAAJ,CAASD,OAAT,CAAP,CACH,CA1BK,GA4Bb,C,yBA7ByBM,qB,kBAgCfb,e","file":"DateTimeMatcher.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc matches and converts xs:datetime to Date\r\n */\r\nimport BaseMatcher from './BaseMatcher';\r\n\r\nconst SECONDS_IN_MIN = 60;\r\nconst MINUTES_IN_HOUR = 60;\r\nconst MILLISECONDS_IN_SECONDS = 1000;\r\n\r\nconst datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\\.[0-9]*)?)?(?:([+-])([0-9]{2})(?::?)([0-9]{2}))?/;\r\n\r\nclass DateTimeMatcher extends BaseMatcher {\r\n    constructor() {\r\n        super(\r\n            attr => datetimeRegex.test(attr.value),\r\n            str => {\r\n                const match = datetimeRegex.exec(str);\r\n                let utcDate;\r\n\r\n                // If the string does not contain a timezone offset different browsers can interpret it either\r\n                // as UTC or as a local time so we have to parse the string manually to normalize the given date value for\r\n                // all browsers\r\n                utcDate = Date.UTC(\r\n                    parseInt(match[1], 10),\r\n                    parseInt(match[2], 10) - 1, // months start from zero\r\n                    parseInt(match[3], 10),\r\n                    parseInt(match[4], 10),\r\n                    parseInt(match[5], 10),\r\n                    (match[6] && parseInt(match[6], 10) || 0),\r\n                    (match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS) || 0);\r\n\r\n                // If the date has timezone offset take it into account as well\r\n                if (match[9] && match[10]) {\r\n                    const timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);\r\n                    utcDate += (match[8] === '+' ? -1 : +1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;\r\n                }\r\n\r\n                return new Date(utcDate);\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport default DateTimeMatcher;\r\n"]}