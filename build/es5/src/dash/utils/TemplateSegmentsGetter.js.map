{"version":3,"sources":["../../../../../src/dash/utils/TemplateSegmentsGetter.js"],"names":["TemplateSegmentsGetter","config","isDynamic","timelineConverter","instance","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getSegmentByIndex","representation","index","template","adaptation","period","mpd","manifest","Period_asArray","AdaptationSet_asArray","Representation_asArray","SegmentTemplate","Math","max","seg","replacementTime","round","segmentDuration","timescale","url","media","replacementNumber","duration","availabilityWindow","segmentAvailabilityRange","isNaN","availableSegmentsNumber","ceil","end","start","getSegmentByTime","requestedTime","periodTime","calcPeriodRelativeTimeFromMpdRelativeTime","floor","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,qD,yDACA,8D,mDAEA,8C,mFAEA,QAASA,uBAAT,CAAgCC,MAAhC,CAAwCC,SAAxC,CAAmD,CAC/CD,OAASA,QAAU,EAAnB,CACA,GAAME,mBAAoBF,OAAOE,iBAAjC,CAEA,GAAIC,gBAAJ,CAEA,QAASC,YAAT,EAAuB,CACnB,GAAI,CAACF,iBAAD,EAAsB,CAACA,kBAAkBG,cAAlB,CAAiC,2CAAjC,CAA3B,CAA0G,CACtG,KAAM,IAAIC,MAAJ,CAAUC,oBAAUC,oBAApB,CAAN,CACH,CACJ,CAED,QAASC,kBAAT,CAA2BC,cAA3B,CAA2CC,KAA3C,CAAkD,CAC9CP,cAEA,GAAI,CAACM,cAAL,CAAqB,CACjB,MAAO,KAAP,CACH,CAED,GAAME,UAAWF,eAAeG,UAAf,CAA0BC,MAA1B,CAAiCC,GAAjC,CAAqCC,QAArC,CAA8CC,cAA9C,CAA6DP,eAAeG,UAAf,CAA0BC,MAA1B,CAAiCH,KAA9F,EACbO,qBADa,CACSR,eAAeG,UAAf,CAA0BF,KADnC,EAC0CQ,sBAD1C,CACiET,eAAeC,KADhF,EACuFS,eADxG,CAGAT,MAAQU,KAAKC,GAAL,CAASX,KAAT,CAAgB,CAAhB,CAAR,CAEA,GAAMY,KAAM,wCAAqBrB,iBAArB,CAAwCD,SAAxC,CAAmDS,cAAnD,CAAmEC,KAAnE,CAAZ,CACA,GAAIY,GAAJ,CAAS,CACLA,IAAIC,eAAJ,CAAsBH,KAAKI,KAAL,CAAW,CAACd,MAAQ,CAAT,EAAcD,eAAegB,eAA7B,CAA+ChB,eAAeiB,SAAzE,CAAmF,EAAnF,CAAtB,CAEA,GAAIC,KAAMhB,SAASiB,KAAnB,CACAD,IAAM,2CAAwBA,GAAxB,CAA6B,QAA7B,CAAuCL,IAAIO,iBAA3C,CAAN,CACAF,IAAM,2CAAwBA,GAAxB,CAA6B,MAA7B,CAAqCL,IAAIC,eAAzC,CAAN,CACAD,IAAIM,KAAJ,CAAYD,GAAZ,CACH,CAED,GAAMG,UAAWrB,eAAegB,eAAhC,CACA,GAAMM,oBAAqBtB,eAAeuB,wBAA1C,CACA,GAAIC,MAAMH,QAAN,CAAJ,CAAqB,CACjBrB,eAAeyB,uBAAf,CAAyC,CAAzC,CACH,CAFD,IAGK,CACDzB,eAAeyB,uBAAf,CAAyCd,KAAKe,IAAL,CAAU,CAACJ,mBAAmBK,GAAnB,CAAyBL,mBAAmBM,KAA7C,EAAsDP,QAAhE,CAAzC,CACH,CAED,MAAOR,IAAP,CACH,CAED,QAASgB,iBAAT,CAA0B7B,cAA1B,CAA0C8B,aAA1C,CAAyD,CACrDpC,cAEA,GAAI,CAACM,cAAL,CAAqB,CACjB,MAAO,KAAP,CACH,CAED,GAAMqB,UAAWrB,eAAegB,eAAhC,CAEA,GAAIQ,MAAMH,QAAN,CAAJ,CAAqB,CACjB,MAAO,KAAP,CACH,CAED,GAAMU,YAAavC,kBAAkBwC,yCAAlB,CAA4DhC,cAA5D,CAA4E8B,aAA5E,CAAnB,CACA,GAAM7B,OAAQU,KAAKsB,KAAL,CAAWF,WAAaV,QAAxB,CAAd,CAEA,MAAOtB,mBAAkBC,cAAlB,CAAkCC,KAAlC,CAAP,CACH,CAEDR,SAAW,CACPM,kBAAmBA,iBADZ,CAEP8B,iBAAkBA,gBAFX,CAAX,CAKA,MAAOpC,SAAP,CACH,CA3GD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6GAJ,uBAAuB6C,qBAAvB,CAA+C,wBAA/C,CACA,GAAMC,SAAUC,uBAAaC,eAAb,CAA6BhD,sBAA7B,CAAhB,C,gBACe8C,O","file":"TemplateSegmentsGetter.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../../streaming/constants/Constants';\r\n\r\nimport { replaceTokenForTemplate, getIndexBasedSegment } from './SegmentsUtils';\r\n\r\nfunction TemplateSegmentsGetter(config, isDynamic) {\r\n    config = config || {};\r\n    const timelineConverter = config.timelineConverter;\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        const template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\r\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate;\r\n\r\n        index = Math.max(index, 0);\r\n\r\n        const seg = getIndexBasedSegment(timelineConverter, isDynamic, representation, index);\r\n        if (seg) {\r\n            seg.replacementTime = Math.round((index - 1) * representation.segmentDuration * representation.timescale,10);\r\n\r\n            let url = template.media;\r\n            url = replaceTokenForTemplate(url, 'Number', seg.replacementNumber);\r\n            url = replaceTokenForTemplate(url, 'Time', seg.replacementTime);\r\n            seg.media = url;\r\n        }\r\n\r\n        const duration = representation.segmentDuration;\r\n        const availabilityWindow = representation.segmentAvailabilityRange;\r\n        if (isNaN(duration)) {\r\n            representation.availableSegmentsNumber = 1;\r\n        }\r\n        else {\r\n            representation.availableSegmentsNumber = Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration);\r\n        }\r\n\r\n        return seg;\r\n    }\r\n\r\n    function getSegmentByTime(representation, requestedTime) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        const duration = representation.segmentDuration;\r\n\r\n        if (isNaN(duration)) {\r\n            return null;\r\n        }\r\n\r\n        const periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\r\n        const index = Math.floor(periodTime / duration);\r\n\r\n        return getSegmentByIndex(representation, index);\r\n    }\r\n\r\n    instance = {\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nTemplateSegmentsGetter.__dashjs_factory_name = 'TemplateSegmentsGetter';\r\nconst factory = FactoryMaker.getClassFactory(TemplateSegmentsGetter);\r\nexport default factory;\r\n"]}