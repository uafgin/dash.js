{"version":3,"sources":["../../../../../src/dash/utils/SegmentBaseGetter.js"],"names":["SegmentBaseGetter","config","timelineConverter","instance","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getSegmentByIndex","representation","index","len","segments","length","seg","availabilityIdx","i","getSegmentByTime","requestedTime","getIndexByTime","time","ln","idx","epsilon","frag","ft","fd","presentationStartTime","duration","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,qD,yDACA,8D,sIAhCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCA,QAASA,kBAAT,CAA2BC,MAA3B,CAAmC,CAE/BA,OAASA,QAAU,EAAnB,CACA,GAAMC,mBAAoBD,OAAOC,iBAAjC,CAEA,GAAIC,gBAAJ,CAEA,QAASC,YAAT,EAAuB,CACnB,GAAI,CAACF,iBAAD,EAAsB,CAACA,kBAAkBG,cAAlB,CAAiC,2CAAjC,CAA3B,CAA0G,CACtG,KAAM,IAAIC,MAAJ,CAAUC,oBAAUC,oBAApB,CAAN,CACH,CACJ,CAED,QAASC,kBAAT,CAA2BC,cAA3B,CAA2CC,KAA3C,CAAkD,CAC9CP,cAEA,GAAI,CAACM,cAAL,CAAqB,CACjB,MAAO,KAAP,CACH,CAED,GAAME,KAAMF,eAAeG,QAAf,CAA0BH,eAAeG,QAAf,CAAwBC,MAAlD,CAA2D,CAAC,CAAxE,CACA,GAAIC,WAAJ,CACA,GAAIJ,MAAQC,GAAZ,CAAiB,CACbG,IAAML,eAAeG,QAAf,CAAwBF,KAAxB,CAAN,CACA,GAAII,KAAOA,IAAIC,eAAJ,GAAwBL,KAAnC,CAA0C,CACtC,MAAOI,IAAP,CACH,CACJ,CAED,IAAK,GAAIE,GAAI,CAAb,CAAgBA,EAAIL,GAApB,CAAyBK,GAAzB,CAA8B,CAC1BF,IAAML,eAAeG,QAAf,CAAwBI,CAAxB,CAAN,CAEA,GAAIF,KAAOA,IAAIC,eAAJ,GAAwBL,KAAnC,CAA0C,CACtC,MAAOI,IAAP,CACH,CACJ,CAED,MAAO,KAAP,CACH,CAED,QAASG,iBAAT,CAA0BR,cAA1B,CAA0CS,aAA1C,CAAyD,CACrDf,cAEA,GAAMO,OAAQS,eAAeV,cAAf,CAA+BS,aAA/B,CAAd,CAEA,MAAOV,mBAAkBC,cAAlB,CAAkCC,KAAlC,CAAP,CACH,CAED,QAASS,eAAT,CAAwBV,cAAxB,CAAwCW,IAAxC,CAA8C,CAC1C,GAAI,CAACX,cAAL,CAAqB,CACjB,MAAO,CAAC,CAAR,CACH,CAED,GAAMG,UAAWH,eAAeG,QAAhC,CACA,GAAMS,IAAKT,SAAWA,SAASC,MAApB,CAA6B,IAAxC,CAEA,GAAIS,KAAM,CAAC,CAAX,CACA,GAAIC,eAAJ,CACIC,WADJ,CAEIC,SAFJ,CAGIC,SAHJ,CAIIV,QAJJ,CAMA,GAAIJ,UAAYS,GAAK,CAArB,CAAwB,CACpB,IAAKL,EAAI,CAAT,CAAYA,EAAIK,EAAhB,CAAoBL,GAApB,CAAyB,CACrBQ,KAAOZ,SAASI,CAAT,CAAP,CACAS,GAAKD,KAAKG,qBAAV,CACAD,GAAKF,KAAKI,QAAV,CAEAL,QAAUG,GAAK,CAAf,CACA,GAAKN,KAAOG,OAAR,EAAoBE,EAApB,EACCL,KAAOG,OAAR,CAAoBE,GAAKC,EAD7B,CACkC,CAC9BJ,IAAME,KAAKT,eAAX,CACA,MACH,CACJ,CACJ,CAED,MAAOO,IAAP,CACH,CAEDpB,SAAW,CACPM,kBAAmBA,iBADZ,CAEPS,iBAAkBA,gBAFX,CAAX,CAKA,MAAOf,SAAP,CACH,CAEDH,kBAAkB8B,qBAAlB,CAA0C,mBAA1C,CACA,GAAMC,SAAUC,uBAAaC,eAAb,CAA6BjC,iBAA7B,CAAhB,C,gBACe+B,O","file":"SegmentBaseGetter.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../../streaming/constants/Constants';\r\n\r\n\r\nfunction SegmentBaseGetter(config) {\r\n\r\n    config = config || {};\r\n    const timelineConverter = config.timelineConverter;\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        const len = representation.segments ? representation.segments.length : -1;\r\n        let seg;\r\n        if (index < len) {\r\n            seg = representation.segments[index];\r\n            if (seg && seg.availabilityIdx === index) {\r\n                return seg;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            seg = representation.segments[i];\r\n\r\n            if (seg && seg.availabilityIdx === index) {\r\n                return seg;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getSegmentByTime(representation, requestedTime) {\r\n        checkConfig();\r\n\r\n        const index = getIndexByTime(representation, requestedTime);\r\n\r\n        return getSegmentByIndex(representation, index);\r\n    }\r\n\r\n    function getIndexByTime(representation, time) {\r\n        if (!representation) {\r\n            return -1;\r\n        }\r\n\r\n        const segments = representation.segments;\r\n        const ln = segments ? segments.length : null;\r\n\r\n        let idx = -1;\r\n        let epsilon,\r\n            frag,\r\n            ft,\r\n            fd,\r\n            i;\r\n\r\n        if (segments && ln > 0) {\r\n            for (i = 0; i < ln; i++) {\r\n                frag = segments[i];\r\n                ft = frag.presentationStartTime;\r\n                fd = frag.duration;\r\n\r\n                epsilon = fd / 2;\r\n                if ((time + epsilon) >= ft &&\r\n                    (time - epsilon) < (ft + fd)) {\r\n                    idx = frag.availabilityIdx;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return idx;\r\n    }\r\n\r\n    instance = {\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nSegmentBaseGetter.__dashjs_factory_name = 'SegmentBaseGetter';\r\nconst factory = FactoryMaker.getClassFactory(SegmentBaseGetter);\r\nexport default factory;\r\n"]}