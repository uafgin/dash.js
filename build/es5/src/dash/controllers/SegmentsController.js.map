{"version":3,"sources":["../../../../../src/dash/controllers/SegmentsController.js"],"names":["SegmentsController","config","context","events","eventBus","dashConstants","streamInfo","type","instance","getters","setup","initialize","isDynamic","SEGMENT_TIMELINE","create","SEGMENT_TEMPLATE","SEGMENT_LIST","SEGMENT_BASE","update","voRepresentation","mimeType","hasInitialization","hasSegments","trigger","SEGMENTBASE_INIT_REQUEST_NEEDED","streamId","id","mediaType","representation","SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED","getSegmentsGetter","segments","segmentInfoType","getSegmentByIndex","index","lastSegmentTime","getter","getSegmentByTime","time","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"sEA8BA,qD,yDACA,uE,6EACA,uE,6EACA,+D,qEACA,6D,sJAEA,QAASA,mBAAT,CAA4BC,MAA5B,CAAoC,CAChCA,OAASA,QAAU,EAAnB,CAEA,GAAMC,SAAU,KAAKA,OAArB,CACA,GAAMC,QAASF,OAAOE,MAAtB,CACA,GAAMC,UAAWH,OAAOG,QAAxB,CACA,GAAMC,eAAgBJ,OAAOI,aAA7B,CACA,GAAMC,YAAaL,OAAOK,UAA1B,CACA,GAAMC,MAAON,OAAOM,IAApB,CAEA,GAAIC,gBAAJ,CACIC,cADJ,CAGA,QAASC,MAAT,EAAiB,CACbD,QAAU,EAAV,CACH,CAED,QAASE,WAAT,CAAoBC,SAApB,CAA+B,CAC3BH,QAAQJ,cAAcQ,gBAAtB,EAA0C,qCAAuBX,OAAvB,EAAgCY,MAAhC,CAAuCb,MAAvC,CAA+CW,SAA/C,CAA1C,CACAH,QAAQJ,cAAcU,gBAAtB,EAA0C,qCAAuBb,OAAvB,EAAgCY,MAAhC,CAAuCb,MAAvC,CAA+CW,SAA/C,CAA1C,CACAH,QAAQJ,cAAcW,YAAtB,EAAsC,iCAAmBd,OAAnB,EAA4BY,MAA5B,CAAmCb,MAAnC,CAA2CW,SAA3C,CAAtC,CACAH,QAAQJ,cAAcY,YAAtB,EAAsC,gCAAkBf,OAAlB,EAA2BY,MAA3B,CAAkCb,MAAlC,CAA0CW,SAA1C,CAAtC,CACH,CAED,QAASM,OAAT,CAAgBC,gBAAhB,CAAkCC,QAAlC,CAA4CC,iBAA5C,CAA+DC,WAA/D,CAA4E,CACxE,GAAI,CAACD,iBAAL,CAAwB,CACpBjB,SAASmB,OAAT,CAAiBpB,OAAOqB,+BAAxB,CAAyD,CACrDC,SAAUnB,WAAWoB,EADgC,CAErDC,UAAWpB,IAF0C,CAGrDa,SAAUA,QAH2C,CAIrDQ,eAAgBT,gBAJqC,CAAzD,EAMH,CAED,GAAI,CAACG,WAAL,CAAkB,CACdlB,SAASmB,OAAT,CAAiBpB,OAAO0B,uCAAxB,CAAiE,CAC7DJ,SAAUnB,WAAWoB,EADwC,CAE7DC,UAAWpB,IAFkD,CAG7Da,SAAUA,QAHmD,CAI7DQ,eAAgBT,gBAJ6C,CAAjE,EAMH,CACJ,CAED,QAASW,kBAAT,CAA2BF,cAA3B,CAA2C,CACvC,MAAOA,gBAAiBA,eAAeG,QAAf,CAA0BtB,QAAQJ,cAAcY,YAAtB,CAA1B,CAAgER,QAAQmB,eAAeI,eAAvB,CAAjF,CAA2H,IAAlI,CACH,CAED,QAASC,kBAAT,CAA2BL,cAA3B,CAA2CM,KAA3C,CAAkDC,eAAlD,CAAmE,CAC/D,GAAMC,QAASN,kBAAkBF,cAAlB,CAAf,CACA,MAAOQ,QAASA,OAAOH,iBAAP,CAAyBL,cAAzB,CAAyCM,KAAzC,CAAgDC,eAAhD,CAAT,CAA4E,IAAnF,CACH,CAED,QAASE,iBAAT,CAA0BT,cAA1B,CAA0CU,IAA1C,CAAgD,CAC5C,GAAMF,QAASN,kBAAkBF,cAAlB,CAAf,CACA,MAAOQ,QAASA,OAAOC,gBAAP,CAAwBT,cAAxB,CAAwCU,IAAxC,CAAT,CAAyD,IAAhE,CACH,CAED9B,SAAW,CACPG,WAAYA,UADL,CAEPO,OAAQA,MAFD,CAGPe,kBAAmBA,iBAHZ,CAIPI,iBAAkBA,gBAJX,CAAX,CAOA3B,QAEA,MAAOF,SAAP,CACH,CAxGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0GAR,mBAAmBuC,qBAAnB,CAA2C,oBAA3C,CACA,GAAMC,SAAUC,uBAAaC,eAAb,CAA6B1C,kBAA7B,CAAhB,C,gBACewC,O","file":"SegmentsController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport TimelineSegmentsGetter from '../utils/TimelineSegmentsGetter';\r\nimport TemplateSegmentsGetter from '../utils/TemplateSegmentsGetter';\r\nimport ListSegmentsGetter from '../utils/ListSegmentsGetter';\r\nimport SegmentBaseGetter from '../utils/SegmentBaseGetter';\r\n\r\nfunction SegmentsController(config) {\r\n    config = config || {};\r\n\r\n    const context = this.context;\r\n    const events = config.events;\r\n    const eventBus = config.eventBus;\r\n    const dashConstants = config.dashConstants;\r\n    const streamInfo = config.streamInfo;\r\n    const type = config.type;\r\n\r\n    let instance,\r\n        getters;\r\n\r\n    function setup() {\r\n        getters = {};\r\n    }\r\n\r\n    function initialize(isDynamic) {\r\n        getters[dashConstants.SEGMENT_TIMELINE] = TimelineSegmentsGetter(context).create(config, isDynamic);\r\n        getters[dashConstants.SEGMENT_TEMPLATE] = TemplateSegmentsGetter(context).create(config, isDynamic);\r\n        getters[dashConstants.SEGMENT_LIST] = ListSegmentsGetter(context).create(config, isDynamic);\r\n        getters[dashConstants.SEGMENT_BASE] = SegmentBaseGetter(context).create(config, isDynamic);\r\n    }\r\n\r\n    function update(voRepresentation, mimeType, hasInitialization, hasSegments) {\r\n        if (!hasInitialization) {\r\n            eventBus.trigger(events.SEGMENTBASE_INIT_REQUEST_NEEDED, {\r\n                streamId: streamInfo.id,\r\n                mediaType: type,\r\n                mimeType: mimeType,\r\n                representation: voRepresentation\r\n            });\r\n        }\r\n\r\n        if (!hasSegments) {\r\n            eventBus.trigger(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, {\r\n                streamId: streamInfo.id,\r\n                mediaType: type,\r\n                mimeType: mimeType,\r\n                representation: voRepresentation\r\n            });\r\n        }\r\n    }\r\n\r\n    function getSegmentsGetter(representation) {\r\n        return representation ? representation.segments ? getters[dashConstants.SEGMENT_BASE] : getters[representation.segmentInfoType] : null;\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index, lastSegmentTime) {\r\n        const getter = getSegmentsGetter(representation);\r\n        return getter ? getter.getSegmentByIndex(representation, index, lastSegmentTime) : null;\r\n    }\r\n\r\n    function getSegmentByTime(representation, time) {\r\n        const getter = getSegmentsGetter(representation);\r\n        return getter ? getter.getSegmentByTime(representation, time) : null;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        update: update,\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nSegmentsController.__dashjs_factory_name = 'SegmentsController';\r\nconst factory = FactoryMaker.getClassFactory(SegmentsController);\r\nexport default factory;\r\n"]}