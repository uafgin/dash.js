{"version":3,"sources":["../../../../src/dash/DashMetrics.js"],"names":["DashMetrics","config","context","instance","playListTraceMetricsClosed","playListTraceMetrics","playListMetrics","metricsModel","setup","getInstance","settings","resetInitialSettings","getCurrentRepresentationSwitch","mediaType","metrics","getMetricsFor","getCurrent","MetricsConstants","TRACK_SWITCH","addRepresentationSwitch","t","mt","to","lto","getCurrentBufferState","type","BUFFER_STATE","getCurrentBufferLevel","metric","BUFFER_LEVEL","Round10","round10","level","addBufferLevel","addBufferState","state","target","clearAllCurrentMetrics","getCurrentHttpRequest","httpList","HttpList","currentHttpList","httpListLastIndex","length","responsecode","getHttpRequests","addRequestsQueue","loadingRequests","executedRequests","metricName","list","getCurrentDroppedFrames","Constants","VIDEO","DROPPED_FRAMES","addDroppedFrames","quality","getCurrentSchedulingInfo","SCHEDULING_INFO","addSchedulingInfo","request","Date","startTime","availabilityStartTime","duration","range","getCurrentManifestUpdate","streamMetrics","STREAM","MANIFEST_UPDATE","updateManifestUpdateInfo","updatedFields","manifestUpdate","addManifestUpdateStreamInfo","streamInfo","id","index","start","addManifestUpdate","requestStartDate","requestEndDate","addHttpRequest","responseURL","responseStatus","responseHeaders","traces","url","serviceLocation","firstByteDate","addManifestUpdateRepresentationInfo","representation","manifestUpdateInfo","streamIndex","presentationTimeOffset","startNumber","fragmentInfoType","getCurrentDVRInfo","AUDIO","DVR_INFO","addDVRInfo","currentTime","mpd","getLatestMPDRequestHeaderValueByID","headers","httpRequestList","httpRequest","i","HTTPRequest","MPD_TYPE","Utils","parseHttpHeaders","_responseHeaders","undefined","getLatestFragmentRequestHeaderValueByID","addPlayList","createPlaylistMetrics","mediaStartTime","startReason","PlayList","mstart","starttype","createPlaylistTraceMetrics","representationId","speed","PlayListTrace","representationid","playbackspeed","toString","updatePlayListTraceMetrics","traceToUpdate","field","pushPlayListTraceMetrics","endTime","reason","getTime","stopreason","trace","push","addDVBErrors","errors","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"DashMetrics.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../streaming/constants/Constants';\r\nimport { HTTPRequest } from '../streaming/vo/metrics/HTTPRequest';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport MetricsConstants from '../streaming/constants/MetricsConstants';\r\nimport Round10 from './utils/Round10';\r\nimport MetricsModel from '../streaming/models/MetricsModel';\r\nimport Utils from '../core/Utils';\r\nimport {\r\n    PlayList,\r\n    PlayListTrace\r\n} from '../streaming/vo/metrics/PlayList';\r\n\r\n/**\r\n * @module DashMetrics\r\n * @param {object} config\r\n */\r\n\r\nfunction DashMetrics(config) {\r\n\r\n    config = config || {};\r\n\r\n    const context = this.context;\r\n    let instance,\r\n        playListTraceMetricsClosed,\r\n        playListTraceMetrics,\r\n        playListMetrics;\r\n\r\n    let metricsModel = config.metricsModel;\r\n\r\n    function setup() {\r\n        metricsModel = metricsModel || MetricsModel(context).getInstance({settings: config.settings});\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        playListTraceMetricsClosed = true;\r\n        playListTraceMetrics = null;\r\n        playListMetrics = null;\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentRepresentationSwitch(mediaType) {\r\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\r\n        return getCurrent(metrics, MetricsConstants.TRACK_SWITCH);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @param {Date} t time of the switch event\r\n     * @param {Date} mt media presentation time\r\n     * @param {string} to id of representation\r\n     * @param {string} lto if present, subrepresentation reference\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addRepresentationSwitch(mediaType, t, mt, to, lto) {\r\n        metricsModel.addRepresentationSwitch(mediaType, t, mt, to, lto);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} type\r\n     * @returns {number}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentBufferState(type) {\r\n        const metrics = metricsModel.getMetricsFor(type, true);\r\n        return getCurrent(metrics, MetricsConstants.BUFFER_STATE);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} type\r\n     * @returns {number}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentBufferLevel(type) {\r\n        const metrics = metricsModel.getMetricsFor(type, true);\r\n        const metric = getCurrent(metrics, MetricsConstants.BUFFER_LEVEL);\r\n\r\n        if (metric) {\r\n            return Round10.round10(metric.level / 1000, -3);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @param {number} t\r\n     * @param {number} level\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addBufferLevel(mediaType, t, level) {\r\n        metricsModel.addBufferLevel(mediaType, t, level);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @param {string} state\r\n     * @param {number} target\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addBufferState(mediaType, state, target) {\r\n        metricsModel.addBufferState(mediaType, state, target);\r\n    }\r\n\r\n    /**\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function clearAllCurrentMetrics () {\r\n        metricsModel.clearAllCurrentMetrics();\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentHttpRequest(mediaType) {\r\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\r\n\r\n        if (!metrics) {\r\n            return null;\r\n        }\r\n\r\n        const httpList = metrics.HttpList;\r\n        let currentHttpList = null;\r\n\r\n        let httpListLastIndex;\r\n\r\n        if (!httpList || httpList.length <= 0) {\r\n            return null;\r\n        }\r\n\r\n        httpListLastIndex = httpList.length - 1;\r\n\r\n        while (httpListLastIndex >= 0) {\r\n            if (httpList[httpListLastIndex].responsecode) {\r\n                currentHttpList = httpList[httpListLastIndex];\r\n                break;\r\n            }\r\n            httpListLastIndex--;\r\n        }\r\n        return currentHttpList;\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getHttpRequests(mediaType) {\r\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\r\n        if (!metrics) {\r\n            return [];\r\n        }\r\n\r\n        return !!metrics.HttpList ? metrics.HttpList : [];\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @param {Array} loadingRequests\r\n     * @param {Array} executedRequests\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\r\n        metricsModel.addRequestsQueue(mediaType, loadingRequests, executedRequests);\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @param {string} metricName\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrent(metrics, metricName) {\r\n        if (!metrics) {\r\n            return null;\r\n        }\r\n        const list = metrics[metricName];\r\n        return (!list || list.length === 0) ? null : list[list.length - 1];\r\n    }\r\n\r\n    /**\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getCurrentDroppedFrames() {\r\n        const metrics = metricsModel.getMetricsFor(Constants.VIDEO, true);\r\n        return getCurrent(metrics, MetricsConstants.DROPPED_FRAMES);\r\n    }\r\n\r\n    /**\r\n     * @param {number} quality\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addDroppedFrames(quality) {\r\n        metricsModel.addDroppedFrames(Constants.VIDEO, quality);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentSchedulingInfo(mediaType) {\r\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\r\n        return getCurrent(metrics, MetricsConstants.SCHEDULING_INFO);\r\n    }\r\n\r\n    /**\r\n     * @param {object} request\r\n     * @param {string} state\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addSchedulingInfo(request, state) {\r\n        metricsModel.addSchedulingInfo(\r\n            request.mediaType,\r\n            new Date(),\r\n            request.type,\r\n            request.startTime,\r\n            request.availabilityStartTime,\r\n            request.duration,\r\n            request.quality,\r\n            request.range,\r\n            state);\r\n    }\r\n\r\n    /**\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentManifestUpdate() {\r\n        const streamMetrics = metricsModel.getMetricsFor(Constants.STREAM);\r\n        return getCurrent(streamMetrics, MetricsConstants.MANIFEST_UPDATE);\r\n    }\r\n\r\n    /**\r\n     * @param {object} updatedFields fields to be updated\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function updateManifestUpdateInfo(updatedFields) {\r\n        const manifestUpdate = this.getCurrentManifestUpdate();\r\n        metricsModel.updateManifestUpdateInfo(manifestUpdate, updatedFields);\r\n    }\r\n\r\n    /**\r\n     * @param {object} streamInfo\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addManifestUpdateStreamInfo(streamInfo) {\r\n        if (streamInfo) {\r\n            const manifestUpdate = this.getCurrentManifestUpdate();\r\n            metricsModel.addManifestUpdateStreamInfo(manifestUpdate, streamInfo.id, streamInfo.index, streamInfo.start, streamInfo.duration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {object} request\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addManifestUpdate(request) {\r\n        metricsModel.addManifestUpdate(Constants.STREAM, request.type, request.requestStartDate, request.requestEndDate);\r\n    }\r\n\r\n    /**\r\n     * @param {object} request\r\n     * @param {string} responseURL\r\n     * @param {number} responseStatus\r\n     * @param {object} responseHeaders\r\n     * @param {object} traces\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addHttpRequest(request, responseURL, responseStatus, responseHeaders, traces) {\r\n        metricsModel.addHttpRequest(request.mediaType,\r\n            null,\r\n            request.type,\r\n            request.url,\r\n            request.quality,\r\n            responseURL,\r\n            request.serviceLocation || null,\r\n            request.range || null,\r\n            request.requestStartDate,\r\n            request.firstByteDate,\r\n            request.requestEndDate,\r\n            responseStatus,\r\n            request.duration,\r\n            responseHeaders,\r\n            traces);\r\n    }\r\n\r\n    /**\r\n     * @param {object} representation\r\n     * @param {MediaType} mediaType\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addManifestUpdateRepresentationInfo(representation, mediaType) {\r\n        if (representation) {\r\n            const manifestUpdateInfo = this.getCurrentManifestUpdate();\r\n            metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, representation.id, representation.index, representation.streamIndex, mediaType, representation.presentationTimeOffset, representation.startNumber, representation.fragmentInfoType);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentDVRInfo(mediaType) {\r\n        const metrics = mediaType ? metricsModel.getMetricsFor(mediaType, true) :\r\n            metricsModel.getMetricsFor(Constants.VIDEO, true) || metricsModel.getMetricsFor(Constants.AUDIO, true);\r\n        return getCurrent(metrics, MetricsConstants.DVR_INFO);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @param {Date} currentTime time of the switch event\r\n     * @param {object} mpd mpd reference\r\n     * @param {object} range range of the dvr info\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addDVRInfo(mediaType, currentTime, mpd, range) {\r\n        metricsModel.addDVRInfo(mediaType, currentTime, mpd, range);\r\n    }\r\n\r\n    /**\r\n     * @param {string} id\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getLatestMPDRequestHeaderValueByID(id) {\r\n        let headers = {};\r\n        let httpRequestList,\r\n            httpRequest,\r\n            i;\r\n\r\n        httpRequestList = getHttpRequests(Constants.STREAM);\r\n\r\n        for (i = httpRequestList.length - 1; i >= 0; i--) {\r\n            httpRequest = httpRequestList[i];\r\n\r\n            if (httpRequest.type === HTTPRequest.MPD_TYPE) {\r\n                headers = Utils.parseHttpHeaders(httpRequest._responseHeaders);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return headers[id] === undefined ? null :  headers[id];\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {string} id\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getLatestFragmentRequestHeaderValueByID(type, id) {\r\n        let headers = {};\r\n        let httpRequest = getCurrentHttpRequest(type, true);\r\n        if (httpRequest) {\r\n            headers = Utils.parseHttpHeaders(httpRequest._responseHeaders);\r\n        }\r\n        return headers[id] === undefined ? null :  headers[id];\r\n    }\r\n\r\n    /**\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addPlayList() {\r\n        if (playListMetrics) {\r\n            metricsModel.addPlayList(playListMetrics);\r\n            playListMetrics = null;\r\n        }\r\n    }\r\n\r\n    function createPlaylistMetrics(mediaStartTime, startReason) {\r\n        playListMetrics = new PlayList();\r\n\r\n        playListMetrics.start = new Date();\r\n        playListMetrics.mstart = mediaStartTime;\r\n        playListMetrics.starttype = startReason;\r\n    }\r\n\r\n    function createPlaylistTraceMetrics(representationId, mediaStartTime, speed) {\r\n        if (playListTraceMetricsClosed === true ) {\r\n            playListTraceMetricsClosed = false;\r\n            playListTraceMetrics = new PlayListTrace();\r\n\r\n            playListTraceMetrics.representationid = representationId;\r\n            playListTraceMetrics.start = new Date();\r\n            playListTraceMetrics.mstart = mediaStartTime;\r\n            playListTraceMetrics.playbackspeed = speed !== null ? speed.toString() : null;\r\n        }\r\n    }\r\n\r\n    function updatePlayListTraceMetrics(traceToUpdate) {\r\n        if (playListTraceMetrics) {\r\n            for (let field in playListTraceMetrics) {\r\n                playListTraceMetrics[field] = traceToUpdate[field];\r\n            }\r\n        }\r\n    }\r\n\r\n    function pushPlayListTraceMetrics(endTime, reason) {\r\n        if (playListTraceMetricsClosed === false && playListMetrics && playListTraceMetrics && playListTraceMetrics.start) {\r\n            const startTime = playListTraceMetrics.start;\r\n            const duration = endTime.getTime() - startTime.getTime();\r\n            playListTraceMetrics.duration = duration;\r\n            playListTraceMetrics.stopreason = reason;\r\n            playListMetrics.trace.push(playListTraceMetrics);\r\n            playListTraceMetricsClosed = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {object} errors\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addDVBErrors(errors) {\r\n        metricsModel.addDVBErrors(errors);\r\n    }\r\n\r\n    instance = {\r\n        getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,\r\n        getCurrentBufferState: getCurrentBufferState,\r\n        getCurrentBufferLevel: getCurrentBufferLevel,\r\n        getCurrentHttpRequest: getCurrentHttpRequest,\r\n        getHttpRequests: getHttpRequests,\r\n        getCurrentDroppedFrames: getCurrentDroppedFrames,\r\n        getCurrentSchedulingInfo: getCurrentSchedulingInfo,\r\n        getCurrentDVRInfo: getCurrentDVRInfo,\r\n        getCurrentManifestUpdate: getCurrentManifestUpdate,\r\n        getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,\r\n        getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,\r\n        addRepresentationSwitch: addRepresentationSwitch,\r\n        addDVRInfo: addDVRInfo,\r\n        updateManifestUpdateInfo: updateManifestUpdateInfo,\r\n        addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\r\n        addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\r\n        addManifestUpdate: addManifestUpdate,\r\n        addHttpRequest: addHttpRequest,\r\n        addSchedulingInfo: addSchedulingInfo,\r\n        addRequestsQueue: addRequestsQueue,\r\n        addBufferLevel: addBufferLevel,\r\n        addBufferState: addBufferState,\r\n        addDroppedFrames: addDroppedFrames,\r\n        addPlayList: addPlayList,\r\n        addDVBErrors: addDVBErrors,\r\n        createPlaylistMetrics: createPlaylistMetrics,\r\n        createPlaylistTraceMetrics: createPlaylistTraceMetrics,\r\n        updatePlayListTraceMetrics: updatePlayListTraceMetrics,\r\n        pushPlayListTraceMetrics: pushPlayListTraceMetrics,\r\n        clearAllCurrentMetrics: clearAllCurrentMetrics\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDashMetrics.__dashjs_factory_name = 'DashMetrics';\r\nexport default FactoryMaker.getSingletonFactory(DashMetrics);\r\n"]}